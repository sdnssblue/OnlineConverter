# -*- coding: mbcs -*-

from ctypes import *
import comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8
import comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0
from comtypes import (
    _check_version, BSTR, CoClass, COMMETHOD, dispid, GUID, IUnknown
)
from ctypes import HRESULT
from comtypes.automation import _midlSAFEARRAY, IDispatch, VARIANT
from ctypes.wintypes import VARIANT_BOOL
import comtypes.gen._0002E157_0000_0000_C000_000000000046_0_5_3
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from comtypes import hints


_lcid = 0  # change this if required
typelib_path = 'C:\\Program Files (x86)\\Microsoft Office\\Root\\Office16\\MSPPT.OLB'

# values for enumeration 'XlSizeRepresents'
xlSizeIsWidth = 2
xlSizeIsArea = 1
XlSizeRepresents = c_int  # enum

# values for enumeration 'XlEndStyleCap'
xlCap = 1
xlNoCap = 2
XlEndStyleCap = c_int  # enum

# values for enumeration 'PpChartUnitEffect'
ppAnimateChartMixed = -2
ppAnimateBySeries = 1
ppAnimateByCategory = 2
ppAnimateBySeriesElements = 3
ppAnimateByCategoryElements = 4
ppAnimateChartAllAtOnce = 5
PpChartUnitEffect = c_int  # enum

# values for enumeration 'XlErrorBarDirection'
xlChartX = -4168
xlChartY = 1
XlErrorBarDirection = c_int  # enum

# values for enumeration 'XlChartPicturePlacement'
xlSides = 1
xlEnd = 2
xlEndSides = 3
xlFront = 4
xlFrontSides = 5
xlFrontEnd = 6
xlAllFaces = 7
XlChartPicturePlacement = c_int  # enum

# values for enumeration 'XlChartSplitType'
xlSplitByPosition = 1
xlSplitByPercentValue = 3
xlSplitByCustomSplit = 4
xlSplitByValue = 2
XlChartSplitType = c_int  # enum

# values for enumeration 'XlErrorBarInclude'
xlErrorBarIncludeBoth = 1
xlErrorBarIncludeMinusValues = 3
xlErrorBarIncludeNone = -4142
xlErrorBarIncludePlusValues = 2
XlErrorBarInclude = c_int  # enum

# values for enumeration 'PpAfterEffect'
ppAfterEffectMixed = -2
ppAfterEffectNothing = 0
ppAfterEffectHide = 1
ppAfterEffectDim = 2
ppAfterEffectHideOnClick = 3
PpAfterEffect = c_int  # enum

# values for enumeration 'PpSlideShowType'
ppShowTypeSpeaker = 1
ppShowTypeWindow = 2
ppShowTypeKiosk = 3
ppShowTypeWindow2 = 4
PpSlideShowType = c_int  # enum

# values for enumeration 'XlPattern'
xlPatternAutomatic = -4105
xlPatternChecker = 9
xlPatternCrissCross = 16
xlPatternDown = -4121
xlPatternGray16 = 17
xlPatternGray25 = -4124
xlPatternGray50 = -4125
xlPatternGray75 = -4126
xlPatternGray8 = 18
xlPatternGrid = 15
xlPatternHorizontal = -4128
xlPatternLightDown = 13
xlPatternLightHorizontal = 11
xlPatternLightUp = 14
xlPatternLightVertical = 12
xlPatternNone = -4142
xlPatternSemiGray75 = 10
xlPatternSolid = 1
xlPatternUp = -4162
xlPatternVertical = -4166
xlPatternLinearGradient = 4000
xlPatternRectangularGradient = 4001
XlPattern = c_int  # enum

# values for enumeration 'XlErrorBarType'
xlErrorBarTypeCustom = -4114
xlErrorBarTypeFixedValue = 1
xlErrorBarTypePercent = 2
xlErrorBarTypeStDev = -4155
xlErrorBarTypeStError = 4
XlErrorBarType = c_int  # enum

# values for enumeration 'PpResampleMediaProfile'
ppResampleMediaProfileCustom = 1
ppResampleMediaProfileSmall = 2
ppResampleMediaProfileSmaller = 3
ppResampleMediaProfileSmallest = 4
PpResampleMediaProfile = c_int  # enum

# values for enumeration 'PpMediaTaskStatus'
ppMediaTaskStatusNone = 0
ppMediaTaskStatusInProgress = 1
ppMediaTaskStatusQueued = 2
ppMediaTaskStatusDone = 3
ppMediaTaskStatusFailed = 4
PpMediaTaskStatus = c_int  # enum

# values for enumeration 'XlDataLabelSeparator'
xlDataLabelSeparatorDefault = 1
XlDataLabelSeparator = c_int  # enum

# values for enumeration 'XlLineStyle'
xlContinuous = 1
xlDash = -4115
xlDashDot = 4
xlDashDotDot = 5
xlDot = -4118
xlDouble = -4119
xlSlantDashDot = 13
xlLineStyleNone = -4142
XlLineStyle = c_int  # enum

# values for enumeration 'PpAdvanceMode'
ppAdvanceModeMixed = -2
ppAdvanceOnClick = 1
ppAdvanceOnTime = 2
PpAdvanceMode = c_int  # enum

# values for enumeration 'PpPrintRangeType'
ppPrintAll = 1
ppPrintSelection = 2
ppPrintCurrent = 3
ppPrintSlideRange = 4
ppPrintNamedSlideShow = 5
ppPrintSection = 6
PpPrintRangeType = c_int  # enum

# values for enumeration 'XlHAlign'
xlHAlignCenter = -4108
xlHAlignCenterAcrossSelection = 7
xlHAlignDistributed = -4117
xlHAlignFill = 5
xlHAlignGeneral = 1
xlHAlignJustify = -4130
xlHAlignLeft = -4131
xlHAlignRight = -4152
XlHAlign = c_int  # enum

# values for enumeration 'PpSoundEffectType'
ppSoundEffectsMixed = -2
ppSoundNone = 0
ppSoundStopPrevious = 1
ppSoundFile = 2
PpSoundEffectType = c_int  # enum

# values for enumeration 'PpAutoSize'
ppAutoSizeMixed = -2
ppAutoSizeNone = 0
ppAutoSizeShapeToFitText = 1
PpAutoSize = c_int  # enum

# values for enumeration 'XlAxisGroup'
xlPrimary = 1
xlSecondary = 2
XlAxisGroup = c_int  # enum

# values for enumeration 'XlAxisCrosses'
xlAxisCrossesAutomatic = -4105
xlAxisCrossesCustom = -4114
xlAxisCrossesMaximum = 2
xlAxisCrossesMinimum = 4
XlAxisCrosses = c_int  # enum

# values for enumeration 'PpFollowColors'
ppFollowColorsMixed = -2
ppFollowColorsNone = 0
ppFollowColorsScheme = 1
ppFollowColorsTextAndBackground = 2
PpFollowColors = c_int  # enum

# values for enumeration 'PpMediaType'
ppMediaTypeMixed = -2
ppMediaTypeOther = 1
ppMediaTypeSound = 2
ppMediaTypeMovie = 3
PpMediaType = c_int  # enum

# values for enumeration 'PpPasteDataType'
ppPasteDefault = 0
ppPasteBitmap = 1
ppPasteEnhancedMetafile = 2
ppPasteMetafilePicture = 3
ppPasteGIF = 4
ppPasteJPG = 5
ppPastePNG = 6
ppPasteText = 7
ppPasteHTML = 8
ppPasteRTF = 9
ppPasteOLEObject = 10
ppPasteShape = 11
ppPasteSVG = 12
PpPasteDataType = c_int  # enum

# values for enumeration 'XlAxisType'
xlCategory = 1
xlSeriesAxis = 3
xlValue = 2
XlAxisType = c_int  # enum

# values for enumeration 'XlMarkerStyle'
xlMarkerStyleAutomatic = -4105
xlMarkerStyleCircle = 8
xlMarkerStyleDash = -4115
xlMarkerStyleDiamond = 2
xlMarkerStyleDot = -4118
xlMarkerStyleNone = -4142
xlMarkerStylePicture = -4147
xlMarkerStylePlus = 9
xlMarkerStyleSquare = 1
xlMarkerStyleStar = 5
xlMarkerStyleTriangle = 3
xlMarkerStyleX = -4168
XlMarkerStyle = c_int  # enum

# values for enumeration 'PpUpdateOption'
ppUpdateOptionMixed = -2
ppUpdateOptionManual = 1
ppUpdateOptionAutomatic = 2
PpUpdateOption = c_int  # enum

# values for enumeration 'PpSoundFormatType'
ppSoundFormatMixed = -2
ppSoundFormatNone = 0
ppSoundFormatWAV = 1
ppSoundFormatMIDI = 2
ppSoundFormatCDAudio = 3
PpSoundFormatType = c_int  # enum

# values for enumeration 'PpShapeFormat'
ppShapeFormatGIF = 0
ppShapeFormatJPG = 1
ppShapeFormatPNG = 2
ppShapeFormatBMP = 3
ppShapeFormatWMF = 4
ppShapeFormatEMF = 5
ppShapeFormatSVG = 6
PpShapeFormat = c_int  # enum

# values for enumeration 'XlBorderWeight'
xlHairline = 1
xlMedium = -4138
xlThick = 4
xlThin = 2
XlBorderWeight = c_int  # enum

# values for enumeration 'PpParagraphAlignment'
ppAlignmentMixed = -2
ppAlignLeft = 1
ppAlignCenter = 2
ppAlignRight = 3
ppAlignJustify = 4
ppAlignDistribute = 5
ppAlignThaiDistribute = 6
ppAlignJustifyLow = 7
PpParagraphAlignment = c_int  # enum

# values for enumeration 'PpColorSchemeIndex'
ppSchemeColorMixed = -2
ppNotSchemeColor = 0
ppBackground = 1
ppForeground = 2
ppShadow = 3
ppTitle = 4
ppFill = 5
ppAccent1 = 6
ppAccent2 = 7
ppAccent3 = 8
PpColorSchemeIndex = c_int  # enum

# values for enumeration 'XlCategoryType'
xlCategoryScale = 2
xlTimeScale = 3
xlAutomaticScale = -4105
XlCategoryType = c_int  # enum

# values for enumeration 'PpFarEastLineBreakLevel'
ppFarEastLineBreakLevelNormal = 1
ppFarEastLineBreakLevelStrict = 2
ppFarEastLineBreakLevelCustom = 3
PpFarEastLineBreakLevel = c_int  # enum

# values for enumeration 'XlRgbColor'
rgbAliceBlue = 16775408
rgbAntiqueWhite = 14150650
rgbAqua = 16776960
rgbAquamarine = 13959039
rgbAzure = 16777200
rgbBeige = 14480885
rgbBisque = 12903679
rgbBlack = 0
rgbBlanchedAlmond = 13495295
rgbBlue = 16711680
rgbBlueViolet = 14822282
rgbBrown = 2763429
rgbBurlyWood = 8894686
rgbCadetBlue = 10526303
rgbChartreuse = 65407
rgbCoral = 5275647
rgbCornflowerBlue = 15570276
rgbCornsilk = 14481663
rgbCrimson = 3937500
rgbDarkBlue = 9109504
rgbDarkCyan = 9145088
rgbDarkGoldenrod = 755384
rgbDarkGreen = 25600
rgbDarkGray = 11119017
rgbDarkGrey = 11119017
rgbDarkKhaki = 7059389
rgbDarkMagenta = 9109643
rgbDarkOliveGreen = 3107669
rgbDarkOrange = 36095
rgbDarkOrchid = 13382297
rgbDarkRed = 139
rgbDarkSalmon = 8034025
rgbDarkSeaGreen = 9419919
rgbDarkSlateBlue = 9125192
rgbDarkSlateGray = 5197615
rgbDarkSlateGrey = 5197615
rgbDarkTurquoise = 13749760
rgbDarkViolet = 13828244
rgbDeepPink = 9639167
rgbDeepSkyBlue = 16760576
rgbDimGray = 6908265
rgbDimGrey = 6908265
rgbDodgerBlue = 16748574
rgbFireBrick = 2237106
rgbFloralWhite = 15792895
rgbForestGreen = 2263842
rgbFuchsia = 16711935
rgbGainsboro = 14474460
rgbGhostWhite = 16775416
rgbGold = 55295
rgbGoldenrod = 2139610
rgbGray = 8421504
rgbGreen = 32768
rgbGrey = 8421504
rgbGreenYellow = 3145645
rgbHoneydew = 15794160
rgbHotPink = 11823615
rgbIndianRed = 6053069
rgbIndigo = 8519755
rgbIvory = 15794175
rgbKhaki = 9234160
rgbLavender = 16443110
rgbLavenderBlush = 16118015
rgbLawnGreen = 64636
rgbLemonChiffon = 13499135
rgbLightBlue = 15128749
rgbLightCoral = 8421616
rgbLightCyan = 9145088
rgbLightGoldenrodYellow = 13826810
rgbLightGray = 13882323
rgbLightGreen = 9498256
rgbLightGrey = 13882323
rgbLightPink = 12695295
rgbLightSalmon = 8036607
rgbLightSeaGreen = 11186720
rgbLightSkyBlue = 16436871
rgbLightSlateGray = 10061943
rgbLightSlateGrey = 10061943
rgbLightSteelBlue = 14599344
rgbLightYellow = 14745599
rgbLime = 65280
rgbLimeGreen = 3329330
rgbLinen = 15134970
rgbMaroon = 128
rgbMediumAquamarine = 11206502
rgbMediumBlue = 13434880
rgbMediumOrchid = 13850042
rgbMediumPurple = 14381203
rgbMediumSeaGreen = 7451452
rgbMediumSlateBlue = 15624315
rgbMediumSpringGreen = 10156544
rgbMediumTurquoise = 13422920
rgbMediumVioletRed = 8721863
rgbMidnightBlue = 7346457
rgbMintCream = 16449525
rgbMistyRose = 14804223
rgbMoccasin = 11920639
rgbNavajoWhite = 11394815
rgbNavy = 8388608
rgbNavyBlue = 8388608
rgbOldLace = 15136253
rgbOlive = 32896
rgbOliveDrab = 2330219
rgbOrange = 42495
rgbOrangeRed = 17919
rgbOrchid = 14053594
rgbPaleGoldenrod = 7071982
rgbPaleGreen = 10025880
rgbPaleTurquoise = 15658671
rgbPaleVioletRed = 9662683
rgbPapayaWhip = 14020607
rgbPeachPuff = 12180223
rgbPeru = 4163021
rgbPink = 13353215
rgbPlum = 14524637
rgbPowderBlue = 15130800
rgbPurple = 8388736
rgbRed = 255
rgbRosyBrown = 9408444
rgbRoyalBlue = 14772545
rgbSalmon = 7504122
rgbSandyBrown = 6333684
rgbSeaGreen = 5737262
rgbSeashell = 15660543
rgbSienna = 2970272
rgbSilver = 12632256
rgbSkyBlue = 15453831
rgbSlateBlue = 13458026
rgbSlateGray = 9470064
rgbSlateGrey = 9470064
rgbSnow = 16448255
rgbSpringGreen = 8388352
rgbSteelBlue = 11829830
rgbTan = 9221330
rgbTeal = 8421376
rgbThistle = 14204888
rgbTomato = 4678655
rgbTurquoise = 13688896
rgbYellow = 65535
rgbYellowGreen = 3329434
rgbViolet = 15631086
rgbWheat = 11788021
rgbWhite = 16777215
rgbWhiteSmoke = 16119285
XlRgbColor = c_int  # enum

# values for enumeration 'XlTickLabelOrientation'
xlTickLabelOrientationAutomatic = -4105
xlTickLabelOrientationDownward = -4170
xlTickLabelOrientationHorizontal = -4128
xlTickLabelOrientationUpward = -4171
xlTickLabelOrientationVertical = -4166
XlTickLabelOrientation = c_int  # enum

# values for enumeration 'XlChartItem'
xlDataLabel = 0
xlChartArea = 2
xlSeries = 3
xlChartTitle = 4
xlWalls = 5
xlCorners = 6
xlDataTable = 7
xlTrendline = 8
xlErrorBars = 9
xlXErrorBars = 10
xlYErrorBars = 11
xlLegendEntry = 12
xlLegendKey = 13
xlShape = 14
xlMajorGridlines = 15
xlMinorGridlines = 16
xlAxisTitle = 17
xlUpBars = 18
xlPlotArea = 19
xlDownBars = 20
xlAxis = 21
xlSeriesLines = 22
xlFloor = 23
xlLegend = 24
xlHiLoLines = 25
xlDropLines = 26
xlRadarAxisLabels = 27
xlNothing = 28
xlLeaderLines = 29
xlDisplayUnitLabel = 30
xlPivotChartFieldButton = 31
xlPivotChartDropZone = 32
XlChartItem = c_int  # enum

# values for enumeration 'XlPivotFieldOrientation'
xlColumnField = 2
xlDataField = 4
xlHidden = 0
xlPageField = 3
xlRowField = 1
XlPivotFieldOrientation = c_int  # enum

# values for enumeration 'PpSlideShowRangeType'
ppShowAll = 1
ppShowSlideRange = 2
ppShowNamedSlideShow = 3
PpSlideShowRangeType = c_int  # enum

# values for enumeration 'PpBaselineAlignment'
ppBaselineAlignMixed = -2
ppBaselineAlignBaseline = 1
ppBaselineAlignTop = 2
ppBaselineAlignCenter = 3
ppBaselineAlignFarEast50 = 4
ppBaselineAlignAuto = 5
PpBaselineAlignment = c_int  # enum

# values for enumeration 'PpFrameColors'
ppFrameColorsBrowserColors = 1
ppFrameColorsPresentationSchemeTextColor = 2
ppFrameColorsPresentationSchemeAccentColor = 3
ppFrameColorsWhiteTextOnBlack = 4
ppFrameColorsBlackTextOnWhite = 5
PpFrameColors = c_int  # enum

# values for enumeration 'XlBarShape'
xlBox = 0
xlPyramidToPoint = 1
xlPyramidToMax = 2
xlCylinder = 3
xlConeToPoint = 4
xlConeToMax = 5
XlBarShape = c_int  # enum

# values for enumeration 'XlReadingOrder'
xlContext = -5002
xlLTR = -5003
xlRTL = -5004
XlReadingOrder = c_int  # enum

# values for enumeration 'PpTabStopType'
ppTabStopMixed = -2
ppTabStopLeft = 1
ppTabStopCenter = 2
ppTabStopRight = 3
ppTabStopDecimal = 4
PpTabStopType = c_int  # enum

# values for enumeration 'XlScaleType'
xlScaleLinear = -4132
xlScaleLogarithmic = -4133
XlScaleType = c_int  # enum

# values for enumeration 'PpGuideOrientation'
ppHorizontalGuide = 1
ppVerticalGuide = 2
PpGuideOrientation = c_int  # enum

# values for enumeration 'XlTickLabelPosition'
xlTickLabelPositionHigh = -4127
xlTickLabelPositionLow = -4134
xlTickLabelPositionNextToAxis = 4
xlTickLabelPositionNone = -4142
XlTickLabelPosition = c_int  # enum

# values for enumeration 'PpIndentControl'
ppIndentControlMixed = -2
ppIndentReplaceAttr = 1
ppIndentKeepAttr = 2
PpIndentControl = c_int  # enum

# values for enumeration 'PpFileDialogType'
ppFileDialogOpen = 1
ppFileDialogSave = 2
PpFileDialogType = c_int  # enum

# values for enumeration 'PpWindowState'
ppWindowNormal = 1
ppWindowMinimized = 2
ppWindowMaximized = 3
PpWindowState = c_int  # enum

# values for enumeration 'PpAlertLevel'
ppAlertsNone = 1
ppAlertsAll = 2
PpAlertLevel = c_int  # enum

# values for enumeration 'XlTickMark'
xlTickMarkCross = 4
xlTickMarkInside = 2
xlTickMarkNone = -4142
xlTickMarkOutside = 3
XlTickMark = c_int  # enum

# values for enumeration 'PpChangeCase'
ppCaseSentence = 1
ppCaseLower = 2
ppCaseUpper = 3
ppCaseTitle = 4
ppCaseToggle = 5
PpChangeCase = c_int  # enum

# values for enumeration 'XlTimeUnit'
xlDays = 0
xlMonths = 1
xlYears = 2
XlTimeUnit = c_int  # enum

# values for enumeration 'PpSlideShowPointerType'
ppSlideShowPointerNone = 0
ppSlideShowPointerArrow = 1
ppSlideShowPointerPen = 2
ppSlideShowPointerAlwaysHidden = 3
ppSlideShowPointerAutoArrow = 4
ppSlideShowPointerEraser = 5
PpSlideShowPointerType = c_int  # enum

# values for enumeration 'XlTrendlineType'
xlExponential = 5
xlLinear = -4132
xlLogarithmic = -4133
xlMovingAvg = 6
xlPolynomial = 3
xlPower = 4
XlTrendlineType = c_int  # enum

# values for enumeration 'XlGradientStopPositionType'
xlGradientStopPositionTypeExtremeValue = 0
xlGradientStopPositionTypeNumber = 1
xlGradientStopPositionTypePercent = 2
XlGradientStopPositionType = c_int  # enum

# values for enumeration 'PpSlideShowState'
ppSlideShowRunning = 1
ppSlideShowPaused = 2
ppSlideShowBlackScreen = 3
ppSlideShowWhiteScreen = 4
ppSlideShowDone = 5
PpSlideShowState = c_int  # enum

# values for enumeration 'XlOrientation'
xlDownward = -4170
xlHorizontal = -4128
xlUpward = -4171
xlVertical = -4166
XlOrientation = c_int  # enum

# values for enumeration 'XlUnderlineStyle'
xlUnderlineStyleDouble = -4119
xlUnderlineStyleDoubleAccounting = 5
xlUnderlineStyleNone = -4142
xlUnderlineStyleSingle = 2
xlUnderlineStyleSingleAccounting = 4
XlUnderlineStyle = c_int  # enum

# values for enumeration 'PpProtectedViewCloseReason'
ppProtectedViewCloseNormal = 0
ppProtectedViewCloseEdit = 1
ppProtectedViewCloseForced = 2
PpProtectedViewCloseReason = c_int  # enum

# values for enumeration 'PpSlideShowAdvanceMode'
ppSlideShowManualAdvance = 1
ppSlideShowUseSlideTimings = 2
ppSlideShowRehearseNewTimings = 3
PpSlideShowAdvanceMode = c_int  # enum

# values for enumeration 'XlChartPictureType'
xlStackScale = 3
xlStack = 2
xlStretch = 1
XlChartPictureType = c_int  # enum

# values for enumeration 'XlVAlign'
xlVAlignBottom = -4107
xlVAlignCenter = -4108
xlVAlignDistributed = -4117
xlVAlignJustify = -4130
xlVAlignTop = -4160
XlVAlign = c_int  # enum

# values for enumeration 'PpExportMode'
ppRelativeToSlide = 1
ppClipRelativeToSlide = 2
ppScaleToFit = 3
ppScaleXY = 4
PpExportMode = c_int  # enum

# values for enumeration 'XlColorIndex'
xlColorIndexAutomatic = -4105
xlColorIndexNone = -4142
XlColorIndex = c_int  # enum

# values for enumeration 'XlDataLabelPosition'
xlLabelPositionCenter = -4108
xlLabelPositionAbove = 0
xlLabelPositionBelow = 1
xlLabelPositionLeft = -4131
xlLabelPositionRight = -4152
xlLabelPositionOutsideEnd = 2
xlLabelPositionInsideEnd = 3
xlLabelPositionInsideBase = 4
xlLabelPositionBestFit = 5
xlLabelPositionMixed = 6
xlLabelPositionCustom = 7
XlDataLabelPosition = c_int  # enum

# values for enumeration 'PpPrintOutputType'
ppPrintOutputSlides = 1
ppPrintOutputTwoSlideHandouts = 2
ppPrintOutputThreeSlideHandouts = 3
ppPrintOutputSixSlideHandouts = 4
ppPrintOutputNotesPages = 5
ppPrintOutputOutline = 6
ppPrintOutputBuildSlides = 7
ppPrintOutputFourSlideHandouts = 8
ppPrintOutputNineSlideHandouts = 9
ppPrintOutputOneSlideHandouts = 10
PpPrintOutputType = c_int  # enum

# values for enumeration 'PpSelectionType'
ppSelectionNone = 0
ppSelectionSlides = 1
ppSelectionShapes = 2
ppSelectionText = 3
PpSelectionType = c_int  # enum

# values for enumeration 'XlConstants'
xlAutomatic = -4105
xlCombination = -4111
xlCustom = -4114
xlBar = 2
xlColumn = 3
xl3DBar = -4099
xl3DSurface = -4103
xlDefaultAutoFormat = -1
xlNone = -4142
xlAbove = 0
xlBelow = 1
xlBoth = 1
xlBottom = -4107
xlCenter = -4108
xlChecker = 9
xlCircle = 8
xlCorner = 2
xlCrissCross = 16
xlCross = 4
xlDiamond = 2
xlDistributed = -4117
xlFill = 5
xlFixedValue = 1
xlGeneral = 1
xlGray16 = 17
xlGray25 = -4124
xlGray50 = -4125
xlGray75 = -4126
xlGray8 = 18
xlGrid = 15
xlHigh = -4127
xlInside = 2
xlJustify = -4130
xlLeft = -4131
xlLightDown = 13
xlLightHorizontal = 11
xlLightUp = 14
xlLightVertical = 12
xlLow = -4134
xlMaximum = 2
xlMinimum = 4
xlMinusValues = 3
xlNextToAxis = 4
xlOpaque = 3
xlOutside = 3
xlPercent = 2
xlPlus = 9
xlPlusValues = 2
xlRight = -4152
xlScale = 3
xlSemiGray75 = 10
xlShowLabel = 4
xlShowLabelAndPercent = 5
xlShowPercent = 3
xlShowValue = 2
xlSingle = 2
xlSolid = 1
xlSquare = 1
xlStar = 5
xlStError = 4
xlTop = -4160
xlTransparent = 2
xlTriangle = 3
XlConstants = c_int  # enum

# values for enumeration 'PpDirection'
ppDirectionMixed = -2
ppDirectionLeftToRight = 1
ppDirectionRightToLeft = 2
PpDirection = c_int  # enum

# values for enumeration 'XlBinsType'
xlBinsTypeAutomatic = 0
xlBinsTypeCategorical = 1
xlBinsTypeManual = 2
xlBinsTypeBinSize = 3
xlBinsTypeBinCount = 4
XlBinsType = c_int  # enum

# values for enumeration 'PpSlideLayout'
ppLayoutMixed = -2
ppLayoutTitle = 1
ppLayoutText = 2
ppLayoutTwoColumnText = 3
ppLayoutTable = 4
ppLayoutTextAndChart = 5
ppLayoutChartAndText = 6
ppLayoutOrgchart = 7
ppLayoutChart = 8
ppLayoutTextAndClipart = 9
ppLayoutClipartAndText = 10
ppLayoutTitleOnly = 11
ppLayoutBlank = 12
ppLayoutTextAndObject = 13
ppLayoutObjectAndText = 14
ppLayoutLargeObject = 15
ppLayoutObject = 16
ppLayoutTextAndMediaClip = 17
ppLayoutMediaClipAndText = 18
ppLayoutObjectOverText = 19
ppLayoutTextOverObject = 20
ppLayoutTextAndTwoObjects = 21
ppLayoutTwoObjectsAndText = 22
ppLayoutTwoObjectsOverText = 23
ppLayoutFourObjects = 24
ppLayoutVerticalText = 25
ppLayoutClipArtAndVerticalText = 26
ppLayoutVerticalTitleAndText = 27
ppLayoutVerticalTitleAndTextOverChart = 28
ppLayoutTwoObjects = 29
ppLayoutObjectAndTwoObjects = 30
ppLayoutTwoObjectsAndObject = 31
ppLayoutCustom = 32
ppLayoutSectionHeader = 33
ppLayoutComparison = 34
ppLayoutContentWithCaption = 35
ppLayoutPictureWithCaption = 36
PpSlideLayout = c_int  # enum

# values for enumeration 'PpPrintHandoutOrder'
ppPrintHandoutVerticalFirst = 1
ppPrintHandoutHorizontalFirst = 2
PpPrintHandoutOrder = c_int  # enum

# values for enumeration 'PpPrintColorType'
ppPrintColor = 1
ppPrintBlackAndWhite = 2
ppPrintPureBlackAndWhite = 3
PpPrintColorType = c_int  # enum

# values for enumeration 'XlDisplayUnit'
xlHundreds = -2
xlThousands = -3
xlTenThousands = -4
xlHundredThousands = -5
xlMillions = -6
xlTenMillions = -7
xlHundredMillions = -8
xlThousandMillions = -9
xlMillionMillions = -10
XlDisplayUnit = c_int  # enum

# values for enumeration 'XlCategorySortOrder'
xlIndexAscending = 0
xlIndexDescending = 1
xlCategoryAscending = 2
xlCategoryDescending = 3
XlCategorySortOrder = c_int  # enum

# values for enumeration 'PpDateTimeFormat'
ppDateTimeFormatMixed = -2
ppDateTimeMdyy = 1
ppDateTimeddddMMMMddyyyy = 2
ppDateTimedMMMMyyyy = 3
ppDateTimeMMMMdyyyy = 4
ppDateTimedMMMyy = 5
ppDateTimeMMMMyy = 6
ppDateTimeMMyy = 7
ppDateTimeMMddyyHmm = 8
ppDateTimeMMddyyhmmAMPM = 9
ppDateTimeHmm = 10
ppDateTimeHmmss = 11
ppDateTimehmmAMPM = 12
ppDateTimehmmssAMPM = 13
ppDateTimeFigureOut = 14
ppDateTimeUAQ1 = 15
ppDateTimeUAQ2 = 16
ppDateTimeUAQ3 = 17
ppDateTimeUAQ4 = 18
ppDateTimeUAQ5 = 19
ppDateTimeUAQ6 = 20
ppDateTimeUAQ7 = 21
ppDateTimeFullYear = 22
PpDateTimeFormat = c_int  # enum

# values for enumeration 'XlChartElementPosition'
xlChartElementPositionAutomatic = -4105
xlChartElementPositionCustom = -4114
XlChartElementPosition = c_int  # enum

# values for enumeration 'PpPlaceholderType'
ppPlaceholderMixed = -2
ppPlaceholderTitle = 1
ppPlaceholderBody = 2
ppPlaceholderCenterTitle = 3
ppPlaceholderSubtitle = 4
ppPlaceholderVerticalTitle = 5
ppPlaceholderVerticalBody = 6
ppPlaceholderObject = 7
ppPlaceholderChart = 8
ppPlaceholderBitmap = 9
ppPlaceholderMediaClip = 10
ppPlaceholderOrgChart = 11
ppPlaceholderTable = 12
ppPlaceholderSlideNumber = 13
ppPlaceholderHeader = 14
ppPlaceholderFooter = 15
ppPlaceholderDate = 16
ppPlaceholderVerticalObject = 17
ppPlaceholderPicture = 18
ppPlaceholderCameo = 19
PpPlaceholderType = c_int  # enum

# values for enumeration 'PpTextStyleType'
ppDefaultStyle = 1
ppTitleStyle = 2
ppBodyStyle = 3
PpTextStyleType = c_int  # enum

# values for enumeration 'PpHTMLVersion'
ppHTMLv3 = 1
ppHTMLv4 = 2
ppHTMLDual = 3
ppHTMLAutodetect = 4
PpHTMLVersion = c_int  # enum

# values for enumeration 'PpTransitionSpeed'
ppTransitionSpeedMixed = -2
ppTransitionSpeedSlow = 1
ppTransitionSpeedMedium = 2
ppTransitionSpeedFast = 3
PpTransitionSpeed = c_int  # enum

# values for enumeration 'PpMouseActivation'
ppMouseClick = 1
ppMouseOver = 2
PpMouseActivation = c_int  # enum

# values for enumeration 'PpActionType'
ppActionMixed = -2
ppActionNone = 0
ppActionNextSlide = 1
ppActionPreviousSlide = 2
ppActionFirstSlide = 3
ppActionLastSlide = 4
ppActionLastSlideViewed = 5
ppActionEndShow = 6
ppActionHyperlink = 7
ppActionRunMacro = 8
ppActionRunProgram = 9
ppActionNamedSlideShow = 10
ppActionOLEVerb = 11
ppActionPlay = 12
PpActionType = c_int  # enum

# values for enumeration 'PpBorderType'
ppBorderTop = 1
ppBorderLeft = 2
ppBorderBottom = 3
ppBorderRight = 4
ppBorderDiagonalDown = 5
ppBorderDiagonalUp = 6
PpBorderType = c_int  # enum

# values for enumeration 'PpTextLevelEffect'
ppAnimateLevelMixed = -2
ppAnimateLevelNone = 0
ppAnimateByFirstLevel = 1
ppAnimateBySecondLevel = 2
ppAnimateByThirdLevel = 3
ppAnimateByFourthLevel = 4
ppAnimateByFifthLevel = 5
ppAnimateByAllLevels = 16
PpTextLevelEffect = c_int  # enum

# values for enumeration 'PpTextUnitEffect'
ppAnimateUnitMixed = -2
ppAnimateByParagraph = 0
ppAnimateByWord = 1
ppAnimateByCharacter = 2
PpTextUnitEffect = c_int  # enum

# values for enumeration 'PpArrangeStyle'
ppArrangeTiled = 1
ppArrangeCascade = 2
PpArrangeStyle = c_int  # enum

# values for enumeration 'PpSlideSizeType'
ppSlideSizeOnScreen = 1
ppSlideSizeLetterPaper = 2
ppSlideSizeA4Paper = 3
ppSlideSize35MM = 4
ppSlideSizeOverhead = 5
ppSlideSizeBanner = 6
ppSlideSizeCustom = 7
ppSlideSizeLedgerPaper = 8
ppSlideSizeA3Paper = 9
ppSlideSizeB4ISOPaper = 10
ppSlideSizeB5ISOPaper = 11
ppSlideSizeB4JISPaper = 12
ppSlideSizeB5JISPaper = 13
ppSlideSizeHagakiCard = 14
ppSlideSizeOnScreen16x9 = 15
ppSlideSizeOnScreen16x10 = 16
PpSlideSizeType = c_int  # enum

# values for enumeration 'PpViewType'
ppViewSlide = 1
ppViewSlideMaster = 2
ppViewNotesPage = 3
ppViewHandoutMaster = 4
ppViewNotesMaster = 5
ppViewOutline = 6
ppViewSlideSorter = 7
ppViewTitleMaster = 8
ppViewNormal = 9
ppViewPrintPreview = 10
ppViewThumbnails = 11
ppViewMasterThumbnails = 12
PpViewType = c_int  # enum

# values for enumeration 'PpPlayerState'
ppPlaying = 0
ppPaused = 1
ppStopped = 2
ppNotReady = 3
PpPlayerState = c_int  # enum

# values for enumeration 'MsoAnimProperty'
msoAnimNone = 0
msoAnimX = 1
msoAnimY = 2
msoAnimWidth = 3
msoAnimHeight = 4
msoAnimOpacity = 5
msoAnimRotation = 6
msoAnimColor = 7
msoAnimVisibility = 8
msoAnimTextFontBold = 100
msoAnimTextFontColor = 101
msoAnimTextFontEmboss = 102
msoAnimTextFontItalic = 103
msoAnimTextFontName = 104
msoAnimTextFontShadow = 105
msoAnimTextFontSize = 106
msoAnimTextFontSubscript = 107
msoAnimTextFontSuperscript = 108
msoAnimTextFontUnderline = 109
msoAnimTextFontStrikeThrough = 110
msoAnimTextBulletCharacter = 111
msoAnimTextBulletFontName = 112
msoAnimTextBulletNumber = 113
msoAnimTextBulletColor = 114
msoAnimTextBulletRelativeSize = 115
msoAnimTextBulletStyle = 116
msoAnimTextBulletType = 117
msoAnimShapePictureContrast = 1000
msoAnimShapePictureBrightness = 1001
msoAnimShapePictureGamma = 1002
msoAnimShapePictureGrayscale = 1003
msoAnimShapeFillOn = 1004
msoAnimShapeFillColor = 1005
msoAnimShapeFillOpacity = 1006
msoAnimShapeFillBackColor = 1007
msoAnimShapeLineOn = 1008
msoAnimShapeLineColor = 1009
msoAnimShapeShadowOn = 1010
msoAnimShapeShadowType = 1011
msoAnimShapeShadowColor = 1012
msoAnimShapeShadowOpacity = 1013
msoAnimShapeShadowOffsetX = 1014
msoAnimShapeShadowOffsetY = 1015
MsoAnimProperty = c_int  # enum

# values for enumeration 'PpRevisionInfo'
ppRevisionInfoNone = 0
ppRevisionInfoBaseline = 1
ppRevisionInfoMerged = 2
PpRevisionInfo = c_int  # enum

# values for enumeration 'XlLegendPosition'
xlLegendPositionBottom = -4107
xlLegendPositionCorner = 2
xlLegendPositionLeft = -4131
xlLegendPositionRight = -4152
xlLegendPositionTop = -4160
xlLegendPositionCustom = -4161
XlLegendPosition = c_int  # enum

# values for enumeration 'PpSaveAsFileType'
ppSaveAsPresentation = 1
ppSaveAsPowerPoint7 = 2
ppSaveAsPowerPoint4 = 3
ppSaveAsPowerPoint3 = 4
ppSaveAsTemplate = 5
ppSaveAsRTF = 6
ppSaveAsShow = 7
ppSaveAsAddIn = 8
ppSaveAsPowerPoint4FarEast = 10
ppSaveAsDefault = 11
ppSaveAsHTML = 12
ppSaveAsHTMLv3 = 13
ppSaveAsHTMLDual = 14
ppSaveAsMetaFile = 15
ppSaveAsGIF = 16
ppSaveAsJPG = 17
ppSaveAsPNG = 18
ppSaveAsBMP = 19
ppSaveAsWebArchive = 20
ppSaveAsTIF = 21
ppSaveAsPresForReview = 22
ppSaveAsEMF = 23
ppSaveAsOpenXMLPresentation = 24
ppSaveAsOpenXMLPresentationMacroEnabled = 25
ppSaveAsOpenXMLTemplate = 26
ppSaveAsOpenXMLTemplateMacroEnabled = 27
ppSaveAsOpenXMLShow = 28
ppSaveAsOpenXMLShowMacroEnabled = 29
ppSaveAsOpenXMLAddin = 30
ppSaveAsOpenXMLTheme = 31
ppSaveAsPDF = 32
ppSaveAsXPS = 33
ppSaveAsXMLPresentation = 34
ppSaveAsOpenDocumentPresentation = 35
ppSaveAsOpenXMLPicturePresentation = 36
ppSaveAsWMV = 37
ppSaveAsStrictOpenXMLPresentation = 38
ppSaveAsMP4 = 39
ppSaveAsAnimatedGIF = 40
ppSaveAsExternalConverter = 64000
PpSaveAsFileType = c_int  # enum

# values for enumeration 'MsoAnimAfterEffect'
msoAnimAfterEffectMixed = -1
msoAnimAfterEffectNone = 0
msoAnimAfterEffectDim = 1
msoAnimAfterEffectHide = 2
msoAnimAfterEffectHideOnNextClick = 3
MsoAnimAfterEffect = c_int  # enum

# values for enumeration 'PpBulletType'
ppBulletMixed = -2
ppBulletNone = 0
ppBulletUnnumbered = 1
ppBulletNumbered = 2
ppBulletPicture = 3
PpBulletType = c_int  # enum

# values for enumeration 'PpNumberedBulletStyle'
ppBulletStyleMixed = -2
ppBulletAlphaLCPeriod = 0
ppBulletAlphaUCPeriod = 1
ppBulletArabicParenRight = 2
ppBulletArabicPeriod = 3
ppBulletRomanLCParenBoth = 4
ppBulletRomanLCParenRight = 5
ppBulletRomanLCPeriod = 6
ppBulletRomanUCPeriod = 7
ppBulletAlphaLCParenBoth = 8
ppBulletAlphaLCParenRight = 9
ppBulletAlphaUCParenBoth = 10
ppBulletAlphaUCParenRight = 11
ppBulletArabicParenBoth = 12
ppBulletArabicPlain = 13
ppBulletRomanUCParenBoth = 14
ppBulletRomanUCParenRight = 15
ppBulletSimpChinPlain = 16
ppBulletSimpChinPeriod = 17
ppBulletCircleNumDBPlain = 18
ppBulletCircleNumWDWhitePlain = 19
ppBulletCircleNumWDBlackPlain = 20
ppBulletTradChinPlain = 21
ppBulletTradChinPeriod = 22
ppBulletArabicAlphaDash = 23
ppBulletArabicAbjadDash = 24
ppBulletHebrewAlphaDash = 25
ppBulletKanjiKoreanPlain = 26
ppBulletKanjiKoreanPeriod = 27
ppBulletArabicDBPlain = 28
ppBulletArabicDBPeriod = 29
ppBulletThaiAlphaPeriod = 30
ppBulletThaiAlphaParenRight = 31
ppBulletThaiAlphaParenBoth = 32
ppBulletThaiNumPeriod = 33
ppBulletThaiNumParenRight = 34
ppBulletThaiNumParenBoth = 35
ppBulletHindiAlphaPeriod = 36
ppBulletHindiNumPeriod = 37
ppBulletKanjiSimpChinDBPeriod = 38
ppBulletHindiNumParenRight = 39
ppBulletHindiAlpha1Period = 40
PpNumberedBulletStyle = c_int  # enum

# values for enumeration 'PpPublishSourceType'
ppPublishAll = 1
ppPublishSlideRange = 2
ppPublishNamedSlideShow = 3
PpPublishSourceType = c_int  # enum

# values for enumeration 'MsoAnimEffect'
msoAnimEffectCustom = 0
msoAnimEffectAppear = 1
msoAnimEffectFly = 2
msoAnimEffectBlinds = 3
msoAnimEffectBox = 4
msoAnimEffectCheckerboard = 5
msoAnimEffectCircle = 6
msoAnimEffectCrawl = 7
msoAnimEffectDiamond = 8
msoAnimEffectDissolve = 9
msoAnimEffectFade = 10
msoAnimEffectFlashOnce = 11
msoAnimEffectPeek = 12
msoAnimEffectPlus = 13
msoAnimEffectRandomBars = 14
msoAnimEffectSpiral = 15
msoAnimEffectSplit = 16
msoAnimEffectStretch = 17
msoAnimEffectStrips = 18
msoAnimEffectSwivel = 19
msoAnimEffectWedge = 20
msoAnimEffectWheel = 21
msoAnimEffectWipe = 22
msoAnimEffectZoom = 23
msoAnimEffectRandomEffects = 24
msoAnimEffectBoomerang = 25
msoAnimEffectBounce = 26
msoAnimEffectColorReveal = 27
msoAnimEffectCredits = 28
msoAnimEffectEaseIn = 29
msoAnimEffectFloat = 30
msoAnimEffectGrowAndTurn = 31
msoAnimEffectLightSpeed = 32
msoAnimEffectPinwheel = 33
msoAnimEffectRiseUp = 34
msoAnimEffectSwish = 35
msoAnimEffectThinLine = 36
msoAnimEffectUnfold = 37
msoAnimEffectWhip = 38
msoAnimEffectAscend = 39
msoAnimEffectCenterRevolve = 40
msoAnimEffectFadedSwivel = 41
msoAnimEffectDescend = 42
msoAnimEffectSling = 43
msoAnimEffectSpinner = 44
msoAnimEffectStretchy = 45
msoAnimEffectZip = 46
msoAnimEffectArcUp = 47
msoAnimEffectFadedZoom = 48
msoAnimEffectGlide = 49
msoAnimEffectExpand = 50
msoAnimEffectFlip = 51
msoAnimEffectShimmer = 52
msoAnimEffectFold = 53
msoAnimEffectChangeFillColor = 54
msoAnimEffectChangeFont = 55
msoAnimEffectChangeFontColor = 56
msoAnimEffectChangeFontSize = 57
msoAnimEffectChangeFontStyle = 58
msoAnimEffectGrowShrink = 59
msoAnimEffectChangeLineColor = 60
msoAnimEffectSpin = 61
msoAnimEffectTransparency = 62
msoAnimEffectBoldFlash = 63
msoAnimEffectBlast = 64
msoAnimEffectBoldReveal = 65
msoAnimEffectBrushOnColor = 66
msoAnimEffectBrushOnUnderline = 67
msoAnimEffectColorBlend = 68
msoAnimEffectColorWave = 69
msoAnimEffectComplementaryColor = 70
msoAnimEffectComplementaryColor2 = 71
msoAnimEffectContrastingColor = 72
msoAnimEffectDarken = 73
msoAnimEffectDesaturate = 74
msoAnimEffectFlashBulb = 75
msoAnimEffectFlicker = 76
msoAnimEffectGrowWithColor = 77
msoAnimEffectLighten = 78
msoAnimEffectStyleEmphasis = 79
msoAnimEffectTeeter = 80
msoAnimEffectVerticalGrow = 81
msoAnimEffectWave = 82
msoAnimEffectMediaPlay = 83
msoAnimEffectMediaPause = 84
msoAnimEffectMediaStop = 85
msoAnimEffectPathCircle = 86
msoAnimEffectPathRightTriangle = 87
msoAnimEffectPathDiamond = 88
msoAnimEffectPathHexagon = 89
msoAnimEffectPath5PointStar = 90
msoAnimEffectPathCrescentMoon = 91
msoAnimEffectPathSquare = 92
msoAnimEffectPathTrapezoid = 93
msoAnimEffectPathHeart = 94
msoAnimEffectPathOctagon = 95
msoAnimEffectPath6PointStar = 96
msoAnimEffectPathFootball = 97
msoAnimEffectPathEqualTriangle = 98
msoAnimEffectPathParallelogram = 99
msoAnimEffectPathPentagon = 100
msoAnimEffectPath4PointStar = 101
msoAnimEffectPath8PointStar = 102
msoAnimEffectPathTeardrop = 103
msoAnimEffectPathPointyStar = 104
msoAnimEffectPathCurvedSquare = 105
msoAnimEffectPathCurvedX = 106
msoAnimEffectPathVerticalFigure8 = 107
msoAnimEffectPathCurvyStar = 108
msoAnimEffectPathLoopdeLoop = 109
msoAnimEffectPathBuzzsaw = 110
msoAnimEffectPathHorizontalFigure8 = 111
msoAnimEffectPathPeanut = 112
msoAnimEffectPathFigure8Four = 113
msoAnimEffectPathNeutron = 114
msoAnimEffectPathSwoosh = 115
msoAnimEffectPathBean = 116
msoAnimEffectPathPlus = 117
msoAnimEffectPathInvertedTriangle = 118
msoAnimEffectPathInvertedSquare = 119
msoAnimEffectPathLeft = 120
msoAnimEffectPathTurnRight = 121
msoAnimEffectPathArcDown = 122
msoAnimEffectPathZigzag = 123
msoAnimEffectPathSCurve2 = 124
msoAnimEffectPathSineWave = 125
msoAnimEffectPathBounceLeft = 126
msoAnimEffectPathDown = 127
msoAnimEffectPathTurnUp = 128
msoAnimEffectPathArcUp = 129
msoAnimEffectPathHeartbeat = 130
msoAnimEffectPathSpiralRight = 131
msoAnimEffectPathWave = 132
msoAnimEffectPathCurvyLeft = 133
msoAnimEffectPathDiagonalDownRight = 134
msoAnimEffectPathTurnDown = 135
msoAnimEffectPathArcLeft = 136
msoAnimEffectPathFunnel = 137
msoAnimEffectPathSpring = 138
msoAnimEffectPathBounceRight = 139
msoAnimEffectPathSpiralLeft = 140
msoAnimEffectPathDiagonalUpRight = 141
msoAnimEffectPathTurnUpRight = 142
msoAnimEffectPathArcRight = 143
msoAnimEffectPathSCurve1 = 144
msoAnimEffectPathDecayingWave = 145
msoAnimEffectPathCurvyRight = 146
msoAnimEffectPathStairsDown = 147
msoAnimEffectPathUp = 148
msoAnimEffectPathRight = 149
msoAnimEffectMediaPlayFromBookmark = 150
msoAnimEffect3DArrive = 151
msoAnimEffect3DTurntable = 152
msoAnimEffect3DSwing = 153
msoAnimEffect3DJumpAndTurn = 154
MsoAnimEffect = c_int  # enum

# values for enumeration 'MsoAnimateByLevel'
msoAnimateLevelMixed = -1
msoAnimateLevelNone = 0
msoAnimateTextByAllLevels = 1
msoAnimateTextByFirstLevel = 2
msoAnimateTextBySecondLevel = 3
msoAnimateTextByThirdLevel = 4
msoAnimateTextByFourthLevel = 5
msoAnimateTextByFifthLevel = 6
msoAnimateChartAllAtOnce = 7
msoAnimateChartByCategory = 8
msoAnimateChartByCategoryElements = 9
msoAnimateChartBySeries = 10
msoAnimateChartBySeriesElements = 11
msoAnimateDiagramAllAtOnce = 12
msoAnimateDiagramDepthByNode = 13
msoAnimateDiagramDepthByBranch = 14
msoAnimateDiagramBreadthByNode = 15
msoAnimateDiagramBreadthByLevel = 16
msoAnimateDiagramClockwise = 17
msoAnimateDiagramClockwiseIn = 18
msoAnimateDiagramClockwiseOut = 19
msoAnimateDiagramCounterClockwise = 20
msoAnimateDiagramCounterClockwiseIn = 21
msoAnimateDiagramCounterClockwiseOut = 22
msoAnimateDiagramInByRing = 23
msoAnimateDiagramOutByRing = 24
msoAnimateDiagramUp = 25
msoAnimateDiagramDown = 26
MsoAnimateByLevel = c_int  # enum

# values for enumeration 'MsoAnimTriggerType'
msoAnimTriggerMixed = -1
msoAnimTriggerNone = 0
msoAnimTriggerOnPageClick = 1
msoAnimTriggerWithPrevious = 2
msoAnimTriggerAfterPrevious = 3
msoAnimTriggerOnShapeClick = 4
msoAnimTriggerOnMediaBookmark = 5
MsoAnimTriggerType = c_int  # enum

# values for enumeration 'MsoAnimTextUnitEffect'
msoAnimTextUnitEffectMixed = -1
msoAnimTextUnitEffectByParagraph = 0
msoAnimTextUnitEffectByCharacter = 1
msoAnimTextUnitEffectByWord = 2
MsoAnimTextUnitEffect = c_int  # enum

# values for enumeration 'XlRowCol'
xlColumns = 2
xlRows = 1
XlRowCol = c_int  # enum

# values for enumeration 'MsoAnimType'
msoAnimTypeMixed = -2
msoAnimTypeNone = 0
msoAnimTypeMotion = 1
msoAnimTypeColor = 2
msoAnimTypeScale = 3
msoAnimTypeRotation = 4
msoAnimTypeProperty = 5
msoAnimTypeCommand = 6
msoAnimTypeFilter = 7
msoAnimTypeSet = 8
MsoAnimType = c_int  # enum

# values for enumeration 'PpRemoveDocInfoType'
ppRDIComments = 1
ppRDIRemovePersonalInformation = 4
ppRDIDocumentProperties = 8
ppRDIDocumentWorkspace = 10
ppRDIInkAnnotations = 11
ppRDIPublishPath = 13
ppRDIDocumentServerProperties = 14
ppRDIDocumentManagementPolicy = 15
ppRDIContentType = 16
ppRDISlideUpdateInformation = 17
ppRDIAtMentions = 18
ppRDIAll = 99
PpRemoveDocInfoType = c_int  # enum

# values for enumeration 'XlDataLabelsType'
xlDataLabelsShowNone = -4142
xlDataLabelsShowValue = 2
xlDataLabelsShowPercent = 3
xlDataLabelsShowLabel = 4
xlDataLabelsShowLabelAndPercent = 5
xlDataLabelsShowBubbleSizes = 6
XlDataLabelsType = c_int  # enum

# values for enumeration 'XlPictureAppearance'
xlPrinter = 2
xlScreen = 1
XlPictureAppearance = c_int  # enum

# values for enumeration 'XlCopyPictureFormat'
xlBitmap = 2
xlPicture = -4147
XlCopyPictureFormat = c_int  # enum

# values for enumeration 'XlDisplayBlanksAs'
xlInterpolated = 3
xlNotPlotted = 1
xlZero = 2
XlDisplayBlanksAs = c_int  # enum

# values for enumeration 'XlCategoryLabelLevel'
xlCategoryLabelLevelNone = -3
xlCategoryLabelLevelCustom = -2
xlCategoryLabelLevelAll = -1
XlCategoryLabelLevel = c_int  # enum

# values for enumeration 'XlSeriesNameLevel'
xlSeriesNameLevelNone = -3
xlSeriesNameLevelCustom = -2
xlSeriesNameLevelAll = -1
XlSeriesNameLevel = c_int  # enum

# values for enumeration 'MsoAnimAdditive'
msoAnimAdditiveAddBase = 1
msoAnimAdditiveAddSum = 2
MsoAnimAdditive = c_int  # enum

# values for enumeration 'MsoAnimAccumulate'
msoAnimAccumulateNone = 1
msoAnimAccumulateAlways = 2
MsoAnimAccumulate = c_int  # enum

# values for enumeration 'PpFixedFormatIntent'
ppFixedFormatIntentScreen = 1
ppFixedFormatIntentPrint = 2
PpFixedFormatIntent = c_int  # enum

# values for enumeration 'XlParentDataLabelOptions'
xlParentDataLabelOptionsNone = 0
xlParentDataLabelOptionsBanner = 1
xlParentDataLabelOptionsOverlapping = 2
XlParentDataLabelOptions = c_int  # enum

# values for enumeration 'PpFixedFormatType'
ppFixedFormatTypeXPS = 1
ppFixedFormatTypePDF = 2
PpFixedFormatType = c_int  # enum

# values for enumeration 'XlValueSortOrder'
xlValueNone = 0
xlValueAscending = 1
xlValueDescending = 2
XlValueSortOrder = c_int  # enum

# values for enumeration 'XlPieSliceLocation'
xlHorizontalCoordinate = 1
xlVerticalCoordinate = 2
XlPieSliceLocation = c_int  # enum

# values for enumeration 'XlPieSliceIndex'
xlOuterCounterClockwisePoint = 1
xlOuterCenterPoint = 2
xlOuterClockwisePoint = 3
xlMidClockwiseRadiusPoint = 4
xlCenterPoint = 5
xlMidCounterClockwiseRadiusPoint = 6
xlInnerClockwisePoint = 7
xlInnerCenterPoint = 8
xlInnerCounterClockwisePoint = 9
XlPieSliceIndex = c_int  # enum

# values for enumeration 'XlGeoProjectionType'
xlGeoProjectionTypeAutomatic = 0
xlGeoProjectionTypeMercator = 1
xlGeoProjectionTypeMiller = 2
xlGeoProjectionTypeAlbers = 3
xlGeoProjectionTypeRobinson = 4
XlGeoProjectionType = c_int  # enum

# values for enumeration 'MsoAnimEffectRestart'
msoAnimEffectRestartAlways = 1
msoAnimEffectRestartWhenOff = 2
msoAnimEffectRestartNever = 3
MsoAnimEffectRestart = c_int  # enum

# values for enumeration 'XlGeoMappingLevel'
xlGeoMappingLevelAutomatic = 0
xlGeoMappingLevelDataOnly = 1
xlGeoMappingLevelPostalCode = 2
xlGeoMappingLevelCounty = 3
xlGeoMappingLevelState = 4
xlGeoMappingLevelCountryRegion = 5
xlGeoMappingLevelCountryRegionList = 6
xlGeoMappingLevelWorld = 7
XlGeoMappingLevel = c_int  # enum

# values for enumeration 'PpEntryEffect'
ppEffectMixed = -2
ppEffectNone = 0
ppEffectCut = 257
ppEffectCutThroughBlack = 258
ppEffectRandom = 513
ppEffectBlindsHorizontal = 769
ppEffectBlindsVertical = 770
ppEffectCheckerboardAcross = 1025
ppEffectCheckerboardDown = 1026
ppEffectCoverLeft = 1281
ppEffectCoverUp = 1282
ppEffectCoverRight = 1283
ppEffectCoverDown = 1284
ppEffectCoverLeftUp = 1285
ppEffectCoverRightUp = 1286
ppEffectCoverLeftDown = 1287
ppEffectCoverRightDown = 1288
ppEffectDissolve = 1537
ppEffectFade = 1793
ppEffectUncoverLeft = 2049
ppEffectUncoverUp = 2050
ppEffectUncoverRight = 2051
ppEffectUncoverDown = 2052
ppEffectUncoverLeftUp = 2053
ppEffectUncoverRightUp = 2054
ppEffectUncoverLeftDown = 2055
ppEffectUncoverRightDown = 2056
ppEffectRandomBarsHorizontal = 2305
ppEffectRandomBarsVertical = 2306
ppEffectStripsUpLeft = 2561
ppEffectStripsUpRight = 2562
ppEffectStripsDownLeft = 2563
ppEffectStripsDownRight = 2564
ppEffectStripsLeftUp = 2565
ppEffectStripsRightUp = 2566
ppEffectStripsLeftDown = 2567
ppEffectStripsRightDown = 2568
ppEffectWipeLeft = 2817
ppEffectWipeUp = 2818
ppEffectWipeRight = 2819
ppEffectWipeDown = 2820
ppEffectBoxOut = 3073
ppEffectBoxIn = 3074
ppEffectFlyFromLeft = 3329
ppEffectFlyFromTop = 3330
ppEffectFlyFromRight = 3331
ppEffectFlyFromBottom = 3332
ppEffectFlyFromTopLeft = 3333
ppEffectFlyFromTopRight = 3334
ppEffectFlyFromBottomLeft = 3335
ppEffectFlyFromBottomRight = 3336
ppEffectPeekFromLeft = 3337
ppEffectPeekFromDown = 3338
ppEffectPeekFromRight = 3339
ppEffectPeekFromUp = 3340
ppEffectCrawlFromLeft = 3341
ppEffectCrawlFromUp = 3342
ppEffectCrawlFromRight = 3343
ppEffectCrawlFromDown = 3344
ppEffectZoomIn = 3345
ppEffectZoomInSlightly = 3346
ppEffectZoomOut = 3347
ppEffectZoomOutSlightly = 3348
ppEffectZoomCenter = 3349
ppEffectZoomBottom = 3350
ppEffectStretchAcross = 3351
ppEffectStretchLeft = 3352
ppEffectStretchUp = 3353
ppEffectStretchRight = 3354
ppEffectStretchDown = 3355
ppEffectSwivel = 3356
ppEffectSpiral = 3357
ppEffectSplitHorizontalOut = 3585
ppEffectSplitHorizontalIn = 3586
ppEffectSplitVerticalOut = 3587
ppEffectSplitVerticalIn = 3588
ppEffectFlashOnceFast = 3841
ppEffectFlashOnceMedium = 3842
ppEffectFlashOnceSlow = 3843
ppEffectAppear = 3844
ppEffectCircleOut = 3845
ppEffectDiamondOut = 3846
ppEffectCombHorizontal = 3847
ppEffectCombVertical = 3848
ppEffectFadeSmoothly = 3849
ppEffectNewsflash = 3850
ppEffectPlusOut = 3851
ppEffectPushDown = 3852
ppEffectPushLeft = 3853
ppEffectPushRight = 3854
ppEffectPushUp = 3855
ppEffectWedge = 3856
ppEffectWheel1Spoke = 3857
ppEffectWheel2Spokes = 3858
ppEffectWheel3Spokes = 3859
ppEffectWheel4Spokes = 3860
ppEffectWheel8Spokes = 3861
ppEffectWheelReverse1Spoke = 3862
ppEffectVortexLeft = 3863
ppEffectVortexUp = 3864
ppEffectVortexRight = 3865
ppEffectVortexDown = 3866
ppEffectRippleCenter = 3867
ppEffectRippleRightUp = 3868
ppEffectRippleLeftUp = 3869
ppEffectRippleLeftDown = 3870
ppEffectRippleRightDown = 3871
ppEffectGlitterDiamondLeft = 3872
ppEffectGlitterDiamondUp = 3873
ppEffectGlitterDiamondRight = 3874
ppEffectGlitterDiamondDown = 3875
ppEffectGlitterHexagonLeft = 3876
ppEffectGlitterHexagonUp = 3877
ppEffectGlitterHexagonRight = 3878
ppEffectGlitterHexagonDown = 3879
ppEffectGalleryLeft = 3880
ppEffectGalleryRight = 3881
ppEffectConveyorLeft = 3882
ppEffectConveyorRight = 3883
ppEffectDoorsVertical = 3884
ppEffectDoorsHorizontal = 3885
ppEffectWindowVertical = 3886
ppEffectWindowHorizontal = 3887
ppEffectWarpIn = 3888
ppEffectWarpOut = 3889
ppEffectFlyThroughIn = 3890
ppEffectFlyThroughOut = 3891
ppEffectFlyThroughInBounce = 3892
ppEffectFlyThroughOutBounce = 3893
ppEffectRevealSmoothLeft = 3894
ppEffectRevealSmoothRight = 3895
ppEffectRevealBlackLeft = 3896
ppEffectRevealBlackRight = 3897
ppEffectHoneycomb = 3898
ppEffectFerrisWheelLeft = 3899
ppEffectFerrisWheelRight = 3900
ppEffectSwitchLeft = 3901
ppEffectSwitchUp = 3902
ppEffectSwitchRight = 3903
ppEffectSwitchDown = 3904
ppEffectFlipLeft = 3905
ppEffectFlipUp = 3906
ppEffectFlipRight = 3907
ppEffectFlipDown = 3908
ppEffectFlashbulb = 3909
ppEffectShredStripsIn = 3910
ppEffectShredStripsOut = 3911
ppEffectShredRectangleIn = 3912
ppEffectShredRectangleOut = 3913
ppEffectCubeLeft = 3914
ppEffectCubeUp = 3915
ppEffectCubeRight = 3916
ppEffectCubeDown = 3917
ppEffectRotateLeft = 3918
ppEffectRotateUp = 3919
ppEffectRotateRight = 3920
ppEffectRotateDown = 3921
ppEffectBoxLeft = 3922
ppEffectBoxUp = 3923
ppEffectBoxRight = 3924
ppEffectBoxDown = 3925
ppEffectOrbitLeft = 3926
ppEffectOrbitUp = 3927
ppEffectOrbitRight = 3928
ppEffectOrbitDown = 3929
ppEffectPanLeft = 3930
ppEffectPanUp = 3931
ppEffectPanRight = 3932
ppEffectPanDown = 3933
ppEffectFallOverLeft = 3934
ppEffectFallOverRight = 3935
ppEffectDrapeLeft = 3936
ppEffectDrapeRight = 3937
ppEffectCurtains = 3938
ppEffectWindLeft = 3939
ppEffectWindRight = 3940
ppEffectPrestige = 3941
ppEffectFracture = 3942
ppEffectCrush = 3943
ppEffectPeelOffLeft = 3944
ppEffectPeelOffRight = 3945
ppEffectPageCurlSingleLeft = 3946
ppEffectPageCurlSingleRight = 3947
ppEffectPageCurlDoubleLeft = 3948
ppEffectPageCurlDoubleRight = 3949
ppEffectAirplaneLeft = 3950
ppEffectAirplaneRight = 3951
ppEffectOrigamiLeft = 3952
ppEffectOrigamiRight = 3953
ppEffectMorphByObject = 3954
ppEffectMorphByWord = 3955
ppEffectMorphByChar = 3956
PpEntryEffect = c_int  # enum

# values for enumeration 'XlRegionLabelOptions'
xlRegionLabelOptionsNone = 0
xlRegionLabelOptionsBestFitOnly = 1
xlRegionLabelOptionsShowAll = 2
XlRegionLabelOptions = c_int  # enum

# values for enumeration 'XlSeriesColorGradientStyle'
xlSeriesColorGradientStyleSequential = 0
xlSeriesColorGradientStyleDiverging = 1
XlSeriesColorGradientStyle = c_int  # enum

# values for enumeration 'MsoAnimCommandType'
msoAnimCommandTypeEvent = 0
msoAnimCommandTypeCall = 1
msoAnimCommandTypeVerb = 2
MsoAnimCommandType = c_int  # enum

# values for enumeration 'MsoAnimFilterEffectType'
msoAnimFilterEffectTypeNone = 0
msoAnimFilterEffectTypeBarn = 1
msoAnimFilterEffectTypeBlinds = 2
msoAnimFilterEffectTypeBox = 3
msoAnimFilterEffectTypeCheckerboard = 4
msoAnimFilterEffectTypeCircle = 5
msoAnimFilterEffectTypeDiamond = 6
msoAnimFilterEffectTypeDissolve = 7
msoAnimFilterEffectTypeFade = 8
msoAnimFilterEffectTypeImage = 9
msoAnimFilterEffectTypePixelate = 10
msoAnimFilterEffectTypePlus = 11
msoAnimFilterEffectTypeRandomBar = 12
msoAnimFilterEffectTypeSlide = 13
msoAnimFilterEffectTypeStretch = 14
msoAnimFilterEffectTypeStrips = 15
msoAnimFilterEffectTypeWedge = 16
msoAnimFilterEffectTypeWheel = 17
msoAnimFilterEffectTypeWipe = 18
MsoAnimFilterEffectType = c_int  # enum

# values for enumeration 'MsoAnimFilterEffectSubtype'
msoAnimFilterEffectSubtypeNone = 0
msoAnimFilterEffectSubtypeInVertical = 1
msoAnimFilterEffectSubtypeOutVertical = 2
msoAnimFilterEffectSubtypeInHorizontal = 3
msoAnimFilterEffectSubtypeOutHorizontal = 4
msoAnimFilterEffectSubtypeHorizontal = 5
msoAnimFilterEffectSubtypeVertical = 6
msoAnimFilterEffectSubtypeIn = 7
msoAnimFilterEffectSubtypeOut = 8
msoAnimFilterEffectSubtypeAcross = 9
msoAnimFilterEffectSubtypeFromLeft = 10
msoAnimFilterEffectSubtypeFromRight = 11
msoAnimFilterEffectSubtypeFromTop = 12
msoAnimFilterEffectSubtypeFromBottom = 13
msoAnimFilterEffectSubtypeDownLeft = 14
msoAnimFilterEffectSubtypeUpLeft = 15
msoAnimFilterEffectSubtypeDownRight = 16
msoAnimFilterEffectSubtypeUpRight = 17
msoAnimFilterEffectSubtypeSpokes1 = 18
msoAnimFilterEffectSubtypeSpokes2 = 19
msoAnimFilterEffectSubtypeSpokes3 = 20
msoAnimFilterEffectSubtypeSpokes4 = 21
msoAnimFilterEffectSubtypeSpokes8 = 22
msoAnimFilterEffectSubtypeLeft = 23
msoAnimFilterEffectSubtypeRight = 24
msoAnimFilterEffectSubtypeDown = 25
msoAnimFilterEffectSubtypeUp = 26
MsoAnimFilterEffectSubtype = c_int  # enum

# values for enumeration 'MsoAnimDirection'
msoAnimDirectionNone = 0
msoAnimDirectionUp = 1
msoAnimDirectionRight = 2
msoAnimDirectionDown = 3
msoAnimDirectionLeft = 4
msoAnimDirectionOrdinalMask = 5
msoAnimDirectionUpLeft = 6
msoAnimDirectionUpRight = 7
msoAnimDirectionDownRight = 8
msoAnimDirectionDownLeft = 9
msoAnimDirectionTop = 10
msoAnimDirectionBottom = 11
msoAnimDirectionTopLeft = 12
msoAnimDirectionTopRight = 13
msoAnimDirectionBottomRight = 14
msoAnimDirectionBottomLeft = 15
msoAnimDirectionHorizontal = 16
msoAnimDirectionVertical = 17
msoAnimDirectionAcross = 18
msoAnimDirectionIn = 19
msoAnimDirectionOut = 20
msoAnimDirectionClockwise = 21
msoAnimDirectionCounterclockwise = 22
msoAnimDirectionHorizontalIn = 23
msoAnimDirectionHorizontalOut = 24
msoAnimDirectionVerticalIn = 25
msoAnimDirectionVerticalOut = 26
msoAnimDirectionSlightly = 27
msoAnimDirectionCenter = 28
msoAnimDirectionInSlightly = 29
msoAnimDirectionInCenter = 30
msoAnimDirectionInBottom = 31
msoAnimDirectionOutSlightly = 32
msoAnimDirectionOutCenter = 33
msoAnimDirectionOutBottom = 34
msoAnimDirectionFontBold = 35
msoAnimDirectionFontItalic = 36
msoAnimDirectionFontUnderline = 37
msoAnimDirectionFontStrikethrough = 38
msoAnimDirectionFontShadow = 39
msoAnimDirectionFontAllCaps = 40
msoAnimDirectionInstant = 41
msoAnimDirectionGradual = 42
msoAnimDirectionCycleClockwise = 43
msoAnimDirectionCycleCounterclockwise = 44
MsoAnimDirection = c_int  # enum

# values for enumeration 'PpCheckInVersionType'
ppCheckInMinorVersion = 0
ppCheckInMajorVersion = 1
ppCheckInOverwriteVersion = 2
PpCheckInVersionType = c_int  # enum

# values for enumeration 'MsoAnimEffectAfter'
msoAnimEffectAfterFreeze = 1
msoAnimEffectAfterRemove = 2
msoAnimEffectAfterHold = 3
msoAnimEffectAfterTransition = 4
MsoAnimEffectAfter = c_int  # enum

# values for enumeration 'MsoClickState'
msoClickStateAfterAllAnimations = -2
msoClickStateBeforeAutomaticAnimations = -1
MsoClickState = c_int  # enum

# values for enumeration 'XlBackground'
xlBackgroundAutomatic = -4105
xlBackgroundOpaque = 3
xlBackgroundTransparent = 2
XlBackground = c_int  # enum

# values for enumeration 'XlChartGallery'
xlBuiltIn = 21
xlUserDefined = 22
xlAnyGallery = 23
XlChartGallery = c_int  # enum



class ChartFormat(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A5C-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Fill(self) -> 'FillFormat': ...
        Fill = hints.normal_property(_get_Fill)
        def _get_Glow(self) -> hints.Incomplete: ...
        Glow = hints.normal_property(_get_Glow)
        def _get_Line(self) -> 'LineFormat': ...
        Line = hints.normal_property(_get_Line)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_PictureFormat(self) -> 'PictureFormat': ...
        PictureFormat = hints.normal_property(_get_PictureFormat)
        def _get_Shadow(self) -> 'ShadowFormat': ...
        Shadow = hints.normal_property(_get_Shadow)
        def _get_SoftEdge(self) -> hints.Incomplete: ...
        SoftEdge = hints.normal_property(_get_SoftEdge)
        def _get_TextFrame2(self) -> 'TextFrame2': ...
        TextFrame2 = hints.normal_property(_get_TextFrame2)
        def _get_ThreeD(self) -> 'ThreeDFormat': ...
        ThreeD = hints.normal_property(_get_ThreeD)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Adjustments(self) -> 'Adjustments': ...
        Adjustments = hints.normal_property(_get_Adjustments)
        def _get_AutoShapeType(self) -> hints.Incomplete: ...
        def _set_AutoShapeType(self, AutoShapeType: hints.Incomplete) -> hints.Hresult: ...
        AutoShapeType = hints.normal_property(_get_AutoShapeType, _set_AutoShapeType)


class FillFormat(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{9149347E-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Background(self) -> hints.Hresult: ...
        def OneColorGradient(self, Style: hints.Incomplete, Variant: hints.Incomplete, Degree: hints.Incomplete) -> hints.Hresult: ...
        def Patterned(self, Pattern: hints.Incomplete) -> hints.Hresult: ...
        def PresetGradient(self, Style: hints.Incomplete, Variant: hints.Incomplete, PresetGradientType: hints.Incomplete) -> hints.Hresult: ...
        def PresetTextured(self, PresetTexture: hints.Incomplete) -> hints.Hresult: ...
        def Solid(self) -> hints.Hresult: ...
        def TwoColorGradient(self, Style: hints.Incomplete, Variant: hints.Incomplete) -> hints.Hresult: ...
        def UserPicture(self, PictureFile: hints.Incomplete) -> hints.Hresult: ...
        def UserTextured(self, TextureFile: hints.Incomplete) -> hints.Hresult: ...
        def _get_BackColor(self) -> 'ColorFormat': ...
        def _set_BackColor(self, BackColor: hints.Incomplete) -> hints.Hresult: ...
        BackColor = hints.normal_property(_get_BackColor, _set_BackColor)
        def _get_ForeColor(self) -> 'ColorFormat': ...
        def _set_ForeColor(self, ForeColor: hints.Incomplete) -> hints.Hresult: ...
        ForeColor = hints.normal_property(_get_ForeColor, _set_ForeColor)
        def _get_GradientColorType(self) -> hints.Incomplete: ...
        GradientColorType = hints.normal_property(_get_GradientColorType)
        def _get_GradientDegree(self) -> hints.Incomplete: ...
        GradientDegree = hints.normal_property(_get_GradientDegree)
        def _get_GradientStyle(self) -> hints.Incomplete: ...
        GradientStyle = hints.normal_property(_get_GradientStyle)
        def _get_GradientVariant(self) -> hints.Incomplete: ...
        GradientVariant = hints.normal_property(_get_GradientVariant)
        def _get_Pattern(self) -> hints.Incomplete: ...
        Pattern = hints.normal_property(_get_Pattern)
        def _get_PresetGradientType(self) -> hints.Incomplete: ...
        PresetGradientType = hints.normal_property(_get_PresetGradientType)
        def _get_PresetTexture(self) -> hints.Incomplete: ...
        PresetTexture = hints.normal_property(_get_PresetTexture)
        def _get_TextureName(self) -> hints.Incomplete: ...
        TextureName = hints.normal_property(_get_TextureName)
        def _get_TextureType(self) -> hints.Incomplete: ...
        TextureType = hints.normal_property(_get_TextureType)
        def _get_Transparency(self) -> hints.Incomplete: ...
        def _set_Transparency(self, Transparency: hints.Incomplete) -> hints.Hresult: ...
        Transparency = hints.normal_property(_get_Transparency, _set_Transparency)
        def _get_Type(self) -> hints.Incomplete: ...
        Type = hints.normal_property(_get_Type)
        def _get_Visible(self) -> hints.Incomplete: ...
        def _set_Visible(self, Visible: hints.Incomplete) -> hints.Hresult: ...
        Visible = hints.normal_property(_get_Visible, _set_Visible)
        def _get_GradientStops(self) -> hints.Incomplete: ...
        GradientStops = hints.normal_property(_get_GradientStops)
        def _get_TextureOffsetX(self) -> hints.Incomplete: ...
        def _set_TextureOffsetX(self, TextureOffsetX: hints.Incomplete) -> hints.Hresult: ...
        TextureOffsetX = hints.normal_property(_get_TextureOffsetX, _set_TextureOffsetX)
        def _get_TextureOffsetY(self) -> hints.Incomplete: ...
        def _set_TextureOffsetY(self, TextureOffsetY: hints.Incomplete) -> hints.Hresult: ...
        TextureOffsetY = hints.normal_property(_get_TextureOffsetY, _set_TextureOffsetY)
        def _get_TextureAlignment(self) -> hints.Incomplete: ...
        def _set_TextureAlignment(self, TextureAlignment: hints.Incomplete) -> hints.Hresult: ...
        TextureAlignment = hints.normal_property(_get_TextureAlignment, _set_TextureAlignment)
        def _get_TextureHorizontalScale(self) -> hints.Incomplete: ...
        def _set_TextureHorizontalScale(self, HorizontalScale: hints.Incomplete) -> hints.Hresult: ...
        TextureHorizontalScale = hints.normal_property(_get_TextureHorizontalScale, _set_TextureHorizontalScale)
        def _get_TextureVerticalScale(self) -> hints.Incomplete: ...
        def _set_TextureVerticalScale(self, VerticalScale: hints.Incomplete) -> hints.Hresult: ...
        TextureVerticalScale = hints.normal_property(_get_TextureVerticalScale, _set_TextureVerticalScale)
        def _get_TextureTile(self) -> hints.Incomplete: ...
        def _set_TextureTile(self, TextureTile: hints.Incomplete) -> hints.Hresult: ...
        TextureTile = hints.normal_property(_get_TextureTile, _set_TextureTile)
        def _get_RotateWithObject(self) -> hints.Incomplete: ...
        def _set_RotateWithObject(self, RotateWithObject: hints.Incomplete) -> hints.Hresult: ...
        RotateWithObject = hints.normal_property(_get_RotateWithObject, _set_RotateWithObject)
        def _get_PictureEffects(self) -> hints.Incomplete: ...
        PictureEffects = hints.normal_property(_get_PictureEffects)
        def _get_GradientAngle(self) -> hints.Incomplete: ...
        def _set_GradientAngle(self, GradientAngle: hints.Incomplete) -> hints.Hresult: ...
        GradientAngle = hints.normal_property(_get_GradientAngle, _set_GradientAngle)


class LineFormat(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{9149347F-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_BackColor(self) -> 'ColorFormat': ...
        def _set_BackColor(self, BackColor: hints.Incomplete) -> hints.Hresult: ...
        BackColor = hints.normal_property(_get_BackColor, _set_BackColor)
        def _get_BeginArrowheadLength(self) -> hints.Incomplete: ...
        def _set_BeginArrowheadLength(self, BeginArrowheadLength: hints.Incomplete) -> hints.Hresult: ...
        BeginArrowheadLength = hints.normal_property(_get_BeginArrowheadLength, _set_BeginArrowheadLength)
        def _get_BeginArrowheadStyle(self) -> hints.Incomplete: ...
        def _set_BeginArrowheadStyle(self, BeginArrowheadStyle: hints.Incomplete) -> hints.Hresult: ...
        BeginArrowheadStyle = hints.normal_property(_get_BeginArrowheadStyle, _set_BeginArrowheadStyle)
        def _get_BeginArrowheadWidth(self) -> hints.Incomplete: ...
        def _set_BeginArrowheadWidth(self, BeginArrowheadWidth: hints.Incomplete) -> hints.Hresult: ...
        BeginArrowheadWidth = hints.normal_property(_get_BeginArrowheadWidth, _set_BeginArrowheadWidth)
        def _get_DashStyle(self) -> hints.Incomplete: ...
        def _set_DashStyle(self, DashStyle: hints.Incomplete) -> hints.Hresult: ...
        DashStyle = hints.normal_property(_get_DashStyle, _set_DashStyle)
        def _get_EndArrowheadLength(self) -> hints.Incomplete: ...
        def _set_EndArrowheadLength(self, EndArrowheadLength: hints.Incomplete) -> hints.Hresult: ...
        EndArrowheadLength = hints.normal_property(_get_EndArrowheadLength, _set_EndArrowheadLength)
        def _get_EndArrowheadStyle(self) -> hints.Incomplete: ...
        def _set_EndArrowheadStyle(self, EndArrowheadStyle: hints.Incomplete) -> hints.Hresult: ...
        EndArrowheadStyle = hints.normal_property(_get_EndArrowheadStyle, _set_EndArrowheadStyle)
        def _get_EndArrowheadWidth(self) -> hints.Incomplete: ...
        def _set_EndArrowheadWidth(self, EndArrowheadWidth: hints.Incomplete) -> hints.Hresult: ...
        EndArrowheadWidth = hints.normal_property(_get_EndArrowheadWidth, _set_EndArrowheadWidth)
        def _get_ForeColor(self) -> 'ColorFormat': ...
        def _set_ForeColor(self, ForeColor: hints.Incomplete) -> hints.Hresult: ...
        ForeColor = hints.normal_property(_get_ForeColor, _set_ForeColor)
        def _get_Pattern(self) -> hints.Incomplete: ...
        def _set_Pattern(self, Pattern: hints.Incomplete) -> hints.Hresult: ...
        Pattern = hints.normal_property(_get_Pattern, _set_Pattern)
        def _get_Style(self) -> hints.Incomplete: ...
        def _set_Style(self, Style: hints.Incomplete) -> hints.Hresult: ...
        Style = hints.normal_property(_get_Style, _set_Style)
        def _get_Transparency(self) -> hints.Incomplete: ...
        def _set_Transparency(self, Transparency: hints.Incomplete) -> hints.Hresult: ...
        Transparency = hints.normal_property(_get_Transparency, _set_Transparency)
        def _get_Visible(self) -> hints.Incomplete: ...
        def _set_Visible(self, Visible: hints.Incomplete) -> hints.Hresult: ...
        Visible = hints.normal_property(_get_Visible, _set_Visible)
        def _get_Weight(self) -> hints.Incomplete: ...
        def _set_Weight(self, Weight: hints.Incomplete) -> hints.Hresult: ...
        Weight = hints.normal_property(_get_Weight, _set_Weight)
        def _get_InsetPen(self) -> hints.Incomplete: ...
        def _set_InsetPen(self, InsetPen: hints.Incomplete) -> hints.Hresult: ...
        InsetPen = hints.normal_property(_get_InsetPen, _set_InsetPen)


class PictureFormat(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{9149347D-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def IncrementBrightness(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def IncrementContrast(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def _get_Brightness(self) -> hints.Incomplete: ...
        def _set_Brightness(self, Brightness: hints.Incomplete) -> hints.Hresult: ...
        Brightness = hints.normal_property(_get_Brightness, _set_Brightness)
        def _get_ColorType(self) -> hints.Incomplete: ...
        def _set_ColorType(self, ColorType: hints.Incomplete) -> hints.Hresult: ...
        ColorType = hints.normal_property(_get_ColorType, _set_ColorType)
        def _get_Contrast(self) -> hints.Incomplete: ...
        def _set_Contrast(self, Contrast: hints.Incomplete) -> hints.Hresult: ...
        Contrast = hints.normal_property(_get_Contrast, _set_Contrast)
        def _get_CropBottom(self) -> hints.Incomplete: ...
        def _set_CropBottom(self, CropBottom: hints.Incomplete) -> hints.Hresult: ...
        CropBottom = hints.normal_property(_get_CropBottom, _set_CropBottom)
        def _get_CropLeft(self) -> hints.Incomplete: ...
        def _set_CropLeft(self, CropLeft: hints.Incomplete) -> hints.Hresult: ...
        CropLeft = hints.normal_property(_get_CropLeft, _set_CropLeft)
        def _get_CropRight(self) -> hints.Incomplete: ...
        def _set_CropRight(self, CropRight: hints.Incomplete) -> hints.Hresult: ...
        CropRight = hints.normal_property(_get_CropRight, _set_CropRight)
        def _get_CropTop(self) -> hints.Incomplete: ...
        def _set_CropTop(self, CropTop: hints.Incomplete) -> hints.Hresult: ...
        CropTop = hints.normal_property(_get_CropTop, _set_CropTop)
        def _get_TransparencyColor(self) -> hints.Incomplete: ...
        def _set_TransparencyColor(self, TransparencyColor: hints.Incomplete) -> hints.Hresult: ...
        TransparencyColor = hints.normal_property(_get_TransparencyColor, _set_TransparencyColor)
        def _get_TransparentBackground(self) -> hints.Incomplete: ...
        def _set_TransparentBackground(self, TransparentBackground: hints.Incomplete) -> hints.Hresult: ...
        TransparentBackground = hints.normal_property(_get_TransparentBackground, _set_TransparentBackground)
        def _get_Crop(self) -> hints.Incomplete: ...
        Crop = hints.normal_property(_get_Crop)


class ShadowFormat(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493480-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def IncrementOffsetX(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def IncrementOffsetY(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def _get_ForeColor(self) -> 'ColorFormat': ...
        def _set_ForeColor(self, ForeColor: hints.Incomplete) -> hints.Hresult: ...
        ForeColor = hints.normal_property(_get_ForeColor, _set_ForeColor)
        def _get_Obscured(self) -> hints.Incomplete: ...
        def _set_Obscured(self, Obscured: hints.Incomplete) -> hints.Hresult: ...
        Obscured = hints.normal_property(_get_Obscured, _set_Obscured)
        def _get_OffsetX(self) -> hints.Incomplete: ...
        def _set_OffsetX(self, OffsetX: hints.Incomplete) -> hints.Hresult: ...
        OffsetX = hints.normal_property(_get_OffsetX, _set_OffsetX)
        def _get_OffsetY(self) -> hints.Incomplete: ...
        def _set_OffsetY(self, OffsetY: hints.Incomplete) -> hints.Hresult: ...
        OffsetY = hints.normal_property(_get_OffsetY, _set_OffsetY)
        def _get_Transparency(self) -> hints.Incomplete: ...
        def _set_Transparency(self, Transparency: hints.Incomplete) -> hints.Hresult: ...
        Transparency = hints.normal_property(_get_Transparency, _set_Transparency)
        def _get_Type(self) -> hints.Incomplete: ...
        def _set_Type(self, Type: hints.Incomplete) -> hints.Hresult: ...
        Type = hints.normal_property(_get_Type, _set_Type)
        def _get_Visible(self) -> hints.Incomplete: ...
        def _set_Visible(self, Visible: hints.Incomplete) -> hints.Hresult: ...
        Visible = hints.normal_property(_get_Visible, _set_Visible)
        def _get_Style(self) -> hints.Incomplete: ...
        def _set_Style(self, ShadowStyle: hints.Incomplete) -> hints.Hresult: ...
        Style = hints.normal_property(_get_Style, _set_Style)
        def _get_Blur(self) -> hints.Incomplete: ...
        def _set_Blur(self, Blur: hints.Incomplete) -> hints.Hresult: ...
        Blur = hints.normal_property(_get_Blur, _set_Blur)
        def _get_Size(self) -> hints.Incomplete: ...
        def _set_Size(self, Size: hints.Incomplete) -> hints.Hresult: ...
        Size = hints.normal_property(_get_Size, _set_Size)
        def _get_RotateWithShape(self) -> hints.Incomplete: ...
        def _set_RotateWithShape(self, RotateWithShape: hints.Incomplete) -> hints.Hresult: ...
        RotateWithShape = hints.normal_property(_get_RotateWithShape, _set_RotateWithShape)


class TextFrame2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934F9-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_MarginBottom(self) -> hints.Incomplete: ...
        def _set_MarginBottom(self, MarginBottom: hints.Incomplete) -> hints.Hresult: ...
        MarginBottom = hints.normal_property(_get_MarginBottom, _set_MarginBottom)
        def _get_MarginLeft(self) -> hints.Incomplete: ...
        def _set_MarginLeft(self, MarginLeft: hints.Incomplete) -> hints.Hresult: ...
        MarginLeft = hints.normal_property(_get_MarginLeft, _set_MarginLeft)
        def _get_MarginRight(self) -> hints.Incomplete: ...
        def _set_MarginRight(self, MarginRight: hints.Incomplete) -> hints.Hresult: ...
        MarginRight = hints.normal_property(_get_MarginRight, _set_MarginRight)
        def _get_MarginTop(self) -> hints.Incomplete: ...
        def _set_MarginTop(self, MarginTop: hints.Incomplete) -> hints.Hresult: ...
        MarginTop = hints.normal_property(_get_MarginTop, _set_MarginTop)
        def _get_Orientation(self) -> hints.Incomplete: ...
        def _set_Orientation(self, Orientation: hints.Incomplete) -> hints.Hresult: ...
        Orientation = hints.normal_property(_get_Orientation, _set_Orientation)
        def _get_HorizontalAnchor(self) -> hints.Incomplete: ...
        def _set_HorizontalAnchor(self, HorizontalAnchor: hints.Incomplete) -> hints.Hresult: ...
        HorizontalAnchor = hints.normal_property(_get_HorizontalAnchor, _set_HorizontalAnchor)
        def _get_VerticalAnchor(self) -> hints.Incomplete: ...
        def _set_VerticalAnchor(self, VerticalAnchor: hints.Incomplete) -> hints.Hresult: ...
        VerticalAnchor = hints.normal_property(_get_VerticalAnchor, _set_VerticalAnchor)
        def _get_PathFormat(self) -> hints.Incomplete: ...
        def _set_PathFormat(self, PathFormat: hints.Incomplete) -> hints.Hresult: ...
        PathFormat = hints.normal_property(_get_PathFormat, _set_PathFormat)
        def _get_WarpFormat(self) -> hints.Incomplete: ...
        def _set_WarpFormat(self, WarpFormat: hints.Incomplete) -> hints.Hresult: ...
        WarpFormat = hints.normal_property(_get_WarpFormat, _set_WarpFormat)
        def _get_WordArtFormat(self) -> hints.Incomplete: ...
        def _set_WordArtFormat(self, WordArtFormat: hints.Incomplete) -> hints.Hresult: ...
        WordArtFormat = hints.normal_property(_get_WordArtFormat, _set_WordArtFormat)
        def _get_WordWrap(self) -> hints.Incomplete: ...
        def _set_WordWrap(self, WordWrap: hints.Incomplete) -> hints.Hresult: ...
        WordWrap = hints.normal_property(_get_WordWrap, _set_WordWrap)
        def _get_AutoSize(self) -> hints.Incomplete: ...
        def _set_AutoSize(self, AutoSize: hints.Incomplete) -> hints.Hresult: ...
        AutoSize = hints.normal_property(_get_AutoSize, _set_AutoSize)
        def _get_ThreeD(self) -> 'ThreeDFormat': ...
        ThreeD = hints.normal_property(_get_ThreeD)
        def _get_HasText(self) -> hints.Incomplete: ...
        HasText = hints.normal_property(_get_HasText)
        def _get_TextRange(self) -> hints.Incomplete: ...
        TextRange = hints.normal_property(_get_TextRange)
        def _get_Column(self) -> hints.Incomplete: ...
        Column = hints.normal_property(_get_Column)
        def _get_Ruler(self) -> hints.Incomplete: ...
        Ruler = hints.normal_property(_get_Ruler)
        def DeleteText(self) -> hints.Hresult: ...
        def _get_NoTextRotation(self) -> hints.Incomplete: ...
        def _set_NoTextRotation(self, NoTextRotation: hints.Incomplete) -> hints.Hresult: ...
        NoTextRotation = hints.normal_property(_get_NoTextRotation, _set_NoTextRotation)


class ThreeDFormat(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493483-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def IncrementRotationX(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def IncrementRotationY(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def ResetRotation(self) -> hints.Hresult: ...
        def SetThreeDFormat(self, PresetThreeDFormat: hints.Incomplete) -> hints.Hresult: ...
        def SetExtrusionDirection(self, PresetExtrusionDirection: hints.Incomplete) -> hints.Hresult: ...
        def _get_Depth(self) -> hints.Incomplete: ...
        def _set_Depth(self, Depth: hints.Incomplete) -> hints.Hresult: ...
        Depth = hints.normal_property(_get_Depth, _set_Depth)
        def _get_ExtrusionColor(self) -> 'ColorFormat': ...
        ExtrusionColor = hints.normal_property(_get_ExtrusionColor)
        def _get_ExtrusionColorType(self) -> hints.Incomplete: ...
        def _set_ExtrusionColorType(self, ExtrusionColorType: hints.Incomplete) -> hints.Hresult: ...
        ExtrusionColorType = hints.normal_property(_get_ExtrusionColorType, _set_ExtrusionColorType)
        def _get_Perspective(self) -> hints.Incomplete: ...
        def _set_Perspective(self, Perspective: hints.Incomplete) -> hints.Hresult: ...
        Perspective = hints.normal_property(_get_Perspective, _set_Perspective)
        def _get_PresetExtrusionDirection(self) -> hints.Incomplete: ...
        PresetExtrusionDirection = hints.normal_property(_get_PresetExtrusionDirection)
        def _get_PresetLightingDirection(self) -> hints.Incomplete: ...
        def _set_PresetLightingDirection(self, PresetLightingDirection: hints.Incomplete) -> hints.Hresult: ...
        PresetLightingDirection = hints.normal_property(_get_PresetLightingDirection, _set_PresetLightingDirection)
        def _get_PresetLightingSoftness(self) -> hints.Incomplete: ...
        def _set_PresetLightingSoftness(self, PresetLightingSoftness: hints.Incomplete) -> hints.Hresult: ...
        PresetLightingSoftness = hints.normal_property(_get_PresetLightingSoftness, _set_PresetLightingSoftness)
        def _get_PresetMaterial(self) -> hints.Incomplete: ...
        def _set_PresetMaterial(self, PresetMaterial: hints.Incomplete) -> hints.Hresult: ...
        PresetMaterial = hints.normal_property(_get_PresetMaterial, _set_PresetMaterial)
        def _get_PresetThreeDFormat(self) -> hints.Incomplete: ...
        PresetThreeDFormat = hints.normal_property(_get_PresetThreeDFormat)
        def _get_RotationX(self) -> hints.Incomplete: ...
        def _set_RotationX(self, RotationX: hints.Incomplete) -> hints.Hresult: ...
        RotationX = hints.normal_property(_get_RotationX, _set_RotationX)
        def _get_RotationY(self) -> hints.Incomplete: ...
        def _set_RotationY(self, RotationY: hints.Incomplete) -> hints.Hresult: ...
        RotationY = hints.normal_property(_get_RotationY, _set_RotationY)
        def _get_Visible(self) -> hints.Incomplete: ...
        def _set_Visible(self, Visible: hints.Incomplete) -> hints.Hresult: ...
        Visible = hints.normal_property(_get_Visible, _set_Visible)
        def SetPresetCamera(self, PresetCamera: hints.Incomplete) -> hints.Hresult: ...
        def IncrementRotationZ(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def IncrementRotationHorizontal(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def IncrementRotationVertical(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def _get_PresetLighting(self) -> hints.Incomplete: ...
        def _set_PresetLighting(self, PresetLightRigType: hints.Incomplete) -> hints.Hresult: ...
        PresetLighting = hints.normal_property(_get_PresetLighting, _set_PresetLighting)
        def _get_Z(self) -> hints.Incomplete: ...
        def _set_Z(self, Z: hints.Incomplete) -> hints.Hresult: ...
        Z = hints.normal_property(_get_Z, _set_Z)
        def _get_BevelTopType(self) -> hints.Incomplete: ...
        def _set_BevelTopType(self, BevelTopType: hints.Incomplete) -> hints.Hresult: ...
        BevelTopType = hints.normal_property(_get_BevelTopType, _set_BevelTopType)
        def _get_BevelTopInset(self) -> hints.Incomplete: ...
        def _set_BevelTopInset(self, BevelTopInset: hints.Incomplete) -> hints.Hresult: ...
        BevelTopInset = hints.normal_property(_get_BevelTopInset, _set_BevelTopInset)
        def _get_BevelTopDepth(self) -> hints.Incomplete: ...
        def _set_BevelTopDepth(self, BevelTopDepth: hints.Incomplete) -> hints.Hresult: ...
        BevelTopDepth = hints.normal_property(_get_BevelTopDepth, _set_BevelTopDepth)
        def _get_BevelBottomType(self) -> hints.Incomplete: ...
        def _set_BevelBottomType(self, BevelBottomType: hints.Incomplete) -> hints.Hresult: ...
        BevelBottomType = hints.normal_property(_get_BevelBottomType, _set_BevelBottomType)
        def _get_BevelBottomInset(self) -> hints.Incomplete: ...
        def _set_BevelBottomInset(self, BevelBottomInset: hints.Incomplete) -> hints.Hresult: ...
        BevelBottomInset = hints.normal_property(_get_BevelBottomInset, _set_BevelBottomInset)
        def _get_BevelBottomDepth(self) -> hints.Incomplete: ...
        def _set_BevelBottomDepth(self, BevelBottomDepth: hints.Incomplete) -> hints.Hresult: ...
        BevelBottomDepth = hints.normal_property(_get_BevelBottomDepth, _set_BevelBottomDepth)
        def _get_PresetCamera(self) -> hints.Incomplete: ...
        PresetCamera = hints.normal_property(_get_PresetCamera)
        def _get_RotationZ(self) -> hints.Incomplete: ...
        def _set_RotationZ(self, RotationZ: hints.Incomplete) -> hints.Hresult: ...
        RotationZ = hints.normal_property(_get_RotationZ, _set_RotationZ)
        def _get_ContourWidth(self) -> hints.Incomplete: ...
        def _set_ContourWidth(self, Width: hints.Incomplete) -> hints.Hresult: ...
        ContourWidth = hints.normal_property(_get_ContourWidth, _set_ContourWidth)
        def _get_ContourColor(self) -> 'ColorFormat': ...
        ContourColor = hints.normal_property(_get_ContourColor)
        def _get_FieldOfView(self) -> hints.Incomplete: ...
        def _set_FieldOfView(self, FOV: hints.Incomplete) -> hints.Hresult: ...
        FieldOfView = hints.normal_property(_get_FieldOfView, _set_FieldOfView)
        def _get_ProjectText(self) -> hints.Incomplete: ...
        def _set_ProjectText(self, ProjectText: hints.Incomplete) -> hints.Hresult: ...
        ProjectText = hints.normal_property(_get_ProjectText, _set_ProjectText)
        def _get_LightAngle(self) -> hints.Incomplete: ...
        def _set_LightAngle(self, LightAngle: hints.Incomplete) -> hints.Hresult: ...
        LightAngle = hints.normal_property(_get_LightAngle, _set_LightAngle)


class Application(CoClass):
    _reg_clsid_ = GUID('{91493441-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{91493440-5A91-11CF-8700-00AA0060263B}', 2, 12)


class _Application(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493442-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Presentations(self) -> 'Presentations': ...
        Presentations = hints.normal_property(_get_Presentations)
        def _get_Windows(self) -> 'DocumentWindows': ...
        Windows = hints.normal_property(_get_Windows)
        def _get_Dialogs(self) -> hints.Incomplete: ...
        Dialogs = hints.normal_property(_get_Dialogs)
        def _get_ActiveWindow(self) -> 'DocumentWindow': ...
        ActiveWindow = hints.normal_property(_get_ActiveWindow)
        def _get_ActivePresentation(self) -> hints.Annotated['_Presentation', hints.FirstComItfOf['Presentation']]: ...
        ActivePresentation = hints.normal_property(_get_ActivePresentation)
        def _get_SlideShowWindows(self) -> 'SlideShowWindows': ...
        SlideShowWindows = hints.normal_property(_get_SlideShowWindows)
        def _get_CommandBars(self) -> hints.Incomplete: ...
        CommandBars = hints.normal_property(_get_CommandBars)
        def _get_Path(self) -> hints.Incomplete: ...
        Path = hints.normal_property(_get_Path)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Caption(self) -> hints.Incomplete: ...
        def _set_Caption(self, Caption: hints.Incomplete) -> hints.Hresult: ...
        Caption = hints.normal_property(_get_Caption, _set_Caption)
        def _get_Assistant(self) -> hints.Incomplete: ...
        Assistant = hints.normal_property(_get_Assistant)
        def _get_FileSearch(self) -> hints.Incomplete: ...
        FileSearch = hints.normal_property(_get_FileSearch)
        def _get_FileFind(self) -> hints.Incomplete: ...
        FileFind = hints.normal_property(_get_FileFind)
        def _get_Build(self) -> hints.Incomplete: ...
        Build = hints.normal_property(_get_Build)
        def _get_Version(self) -> hints.Incomplete: ...
        Version = hints.normal_property(_get_Version)
        def _get_OperatingSystem(self) -> hints.Incomplete: ...
        OperatingSystem = hints.normal_property(_get_OperatingSystem)
        def _get_ActivePrinter(self) -> hints.Incomplete: ...
        ActivePrinter = hints.normal_property(_get_ActivePrinter)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_AddIns(self) -> 'AddIns': ...
        AddIns = hints.normal_property(_get_AddIns)
        def _get_VBE(self) -> hints.Incomplete: ...
        VBE = hints.normal_property(_get_VBE)
        def Help(self, HelpFile: hints.Incomplete = ..., ContextID: hints.Incomplete = ...) -> hints.Hresult: ...
        def Quit(self) -> hints.Hresult: ...
        def Run(self, MacroName: hints.Incomplete, safeArrayOfParams: hints.Incomplete) -> hints.Incomplete: ...
        def PPFileDialog(self, Type: hints.Incomplete) -> hints.Incomplete: ...
        def LaunchSpelling(self, pWindow: hints.Incomplete) -> hints.Hresult: ...
        def _get_Left(self) -> hints.Incomplete: ...
        def _set_Left(self, Left: hints.Incomplete) -> hints.Hresult: ...
        Left = hints.normal_property(_get_Left, _set_Left)
        def _get_Top(self) -> hints.Incomplete: ...
        def _set_Top(self, Top: hints.Incomplete) -> hints.Hresult: ...
        Top = hints.normal_property(_get_Top, _set_Top)
        def _get_Width(self) -> hints.Incomplete: ...
        def _set_Width(self, Width: hints.Incomplete) -> hints.Hresult: ...
        Width = hints.normal_property(_get_Width, _set_Width)
        def _get_Height(self) -> hints.Incomplete: ...
        def _set_Height(self, Height: hints.Incomplete) -> hints.Hresult: ...
        Height = hints.normal_property(_get_Height, _set_Height)
        def _get_WindowState(self) -> hints.Incomplete: ...
        def _set_WindowState(self, WindowState: hints.Incomplete) -> hints.Hresult: ...
        WindowState = hints.normal_property(_get_WindowState, _set_WindowState)
        def _get_Visible(self) -> hints.Incomplete: ...
        def _set_Visible(self, Visible: hints.Incomplete) -> hints.Hresult: ...
        Visible = hints.normal_property(_get_Visible, _set_Visible)
        def _get_HWND(self) -> hints.Incomplete: ...
        HWND = hints.normal_property(_get_HWND)
        def _get_Active(self) -> hints.Incomplete: ...
        Active = hints.normal_property(_get_Active)
        def Activate(self) -> hints.Hresult: ...
        def _get_AnswerWizard(self) -> hints.Incomplete: ...
        AnswerWizard = hints.normal_property(_get_AnswerWizard)
        def _get_COMAddIns(self) -> hints.Incomplete: ...
        COMAddIns = hints.normal_property(_get_COMAddIns)
        def _get_ProductCode(self) -> hints.Incomplete: ...
        ProductCode = hints.normal_property(_get_ProductCode)
        def _get_DefaultWebOptions(self) -> 'DefaultWebOptions': ...
        DefaultWebOptions = hints.normal_property(_get_DefaultWebOptions)
        def _get_LanguageSettings(self) -> hints.Incomplete: ...
        LanguageSettings = hints.normal_property(_get_LanguageSettings)
        def _get_MsoDebugOptions(self) -> hints.Incomplete: ...
        MsoDebugOptions = hints.normal_property(_get_MsoDebugOptions)
        def _get_ShowWindowsInTaskbar(self) -> hints.Incomplete: ...
        def _set_ShowWindowsInTaskbar(self, ShowWindowsInTaskbar: hints.Incomplete) -> hints.Hresult: ...
        ShowWindowsInTaskbar = hints.normal_property(_get_ShowWindowsInTaskbar, _set_ShowWindowsInTaskbar)
        def _get_Marker(self) -> hints.Incomplete: ...
        Marker = hints.normal_property(_get_Marker)
        def _get_FeatureInstall(self) -> hints.Incomplete: ...
        def _set_FeatureInstall(self, FeatureInstall: hints.Incomplete) -> hints.Hresult: ...
        FeatureInstall = hints.normal_property(_get_FeatureInstall, _set_FeatureInstall)
        def GetOptionFlag(self, Option: hints.Incomplete, Persist: hints.Incomplete = ...) -> hints.Incomplete: ...
        def SetOptionFlag(self, Option: hints.Incomplete, State: hints.Incomplete, Persist: hints.Incomplete = ...) -> hints.Hresult: ...
        def _get_FileDialog(self, Type: hints.Incomplete) -> hints.Incomplete: ...
        FileDialog = hints.named_property('FileDialog', _get_FileDialog)
        def _get_DisplayGridLines(self) -> hints.Incomplete: ...
        def _set_DisplayGridLines(self, DisplayGridLines: hints.Incomplete) -> hints.Hresult: ...
        DisplayGridLines = hints.normal_property(_get_DisplayGridLines, _set_DisplayGridLines)
        def _get_AutomationSecurity(self) -> hints.Incomplete: ...
        def _set_AutomationSecurity(self, AutomationSecurity: hints.Incomplete) -> hints.Hresult: ...
        AutomationSecurity = hints.normal_property(_get_AutomationSecurity, _set_AutomationSecurity)
        def _get_NewPresentation(self) -> hints.Incomplete: ...
        NewPresentation = hints.normal_property(_get_NewPresentation)
        def _get_DisplayAlerts(self) -> hints.Incomplete: ...
        def _set_DisplayAlerts(self, DisplayAlerts: hints.Incomplete) -> hints.Hresult: ...
        DisplayAlerts = hints.normal_property(_get_DisplayAlerts, _set_DisplayAlerts)
        def _get_ShowStartupDialog(self) -> hints.Incomplete: ...
        def _set_ShowStartupDialog(self, ShowStartupDialog: hints.Incomplete) -> hints.Hresult: ...
        ShowStartupDialog = hints.normal_property(_get_ShowStartupDialog, _set_ShowStartupDialog)
        def SetPerfMarker(self, Marker: hints.Incomplete) -> hints.Hresult: ...
        def _get_AutoCorrect(self) -> 'AutoCorrect': ...
        AutoCorrect = hints.normal_property(_get_AutoCorrect)
        def _get_Options(self) -> 'Options': ...
        Options = hints.normal_property(_get_Options)
        def LaunchPublishSlidesDialog(self, SlideLibraryUrl: hints.Incomplete) -> hints.Hresult: ...
        def LaunchSendToPPTDialog(self, SlideUrls: hints.Incomplete) -> hints.Hresult: ...
        def _get_DisplayDocumentInformationPanel(self) -> hints.Incomplete: ...
        def _set_DisplayDocumentInformationPanel(self, DisplayDocumentInformationPanel: hints.Incomplete) -> hints.Hresult: ...
        DisplayDocumentInformationPanel = hints.normal_property(_get_DisplayDocumentInformationPanel, _set_DisplayDocumentInformationPanel)
        def _get_Assistance(self) -> hints.Incomplete: ...
        Assistance = hints.normal_property(_get_Assistance)
        def _get_ActiveEncryptionSession(self) -> hints.Incomplete: ...
        ActiveEncryptionSession = hints.normal_property(_get_ActiveEncryptionSession)
        def _get_FileConverters(self) -> 'FileConverters': ...
        FileConverters = hints.normal_property(_get_FileConverters)
        def _get_SmartArtLayouts(self) -> hints.Incomplete: ...
        SmartArtLayouts = hints.normal_property(_get_SmartArtLayouts)
        def _get_SmartArtQuickStyles(self) -> hints.Incomplete: ...
        SmartArtQuickStyles = hints.normal_property(_get_SmartArtQuickStyles)
        def _get_SmartArtColors(self) -> hints.Incomplete: ...
        SmartArtColors = hints.normal_property(_get_SmartArtColors)
        def _get_ProtectedViewWindows(self) -> 'ProtectedViewWindows': ...
        ProtectedViewWindows = hints.normal_property(_get_ProtectedViewWindows)
        def _get_ActiveProtectedViewWindow(self) -> 'ProtectedViewWindow': ...
        ActiveProtectedViewWindow = hints.normal_property(_get_ActiveProtectedViewWindow)
        def _get_IsSandboxed(self) -> hints.Incomplete: ...
        IsSandboxed = hints.normal_property(_get_IsSandboxed)
        def _get_ResampleMediaTasks(self) -> 'ResampleMediaTasks': ...
        ResampleMediaTasks = hints.normal_property(_get_ResampleMediaTasks)
        def StartNewUndoEntry(self) -> hints.Hresult: ...
        def _get_FileValidation(self) -> hints.Incomplete: ...
        def _set_FileValidation(self, FileValidation: hints.Incomplete) -> hints.Hresult: ...
        FileValidation = hints.normal_property(_get_FileValidation, _set_FileValidation)
        def OpenThemeFile(self, themeFileName: hints.Incomplete) -> 'Theme': ...
        def _get_ChartDataPointTrack(self) -> hints.Incomplete: ...
        def _set_ChartDataPointTrack(self, pfChartDataPointTrack: hints.Incomplete) -> hints.Hresult: ...
        ChartDataPointTrack = hints.normal_property(_get_ChartDataPointTrack, _set_ChartDataPointTrack)
        def _get_DisplayGuides(self) -> hints.Incomplete: ...
        def _set_DisplayGuides(self, DisplayGridLines: hints.Incomplete) -> hints.Hresult: ...
        DisplayGuides = hints.normal_property(_get_DisplayGuides, _set_DisplayGuides)
        def _get_DataPrivacyOptions(self) -> hints.Incomplete: ...
        DataPrivacyOptions = hints.normal_property(_get_DataPrivacyOptions)
        def _get_SensitivityLabelPolicy(self) -> hints.Incomplete: ...
        SensitivityLabelPolicy = hints.normal_property(_get_SensitivityLabelPolicy)


class EApplication(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934C2-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = []

    if TYPE_CHECKING:  # commembers
        def WindowSelectionChange(self, Sel: hints.Incomplete) -> hints.Hresult: ...
        def WindowBeforeRightClick(self, Sel: hints.Incomplete, Cancel: hints.Incomplete) -> hints.Incomplete: ...
        def WindowBeforeDoubleClick(self, Sel: hints.Incomplete, Cancel: hints.Incomplete) -> hints.Incomplete: ...
        def PresentationClose(self, Pres: hints.Incomplete) -> hints.Hresult: ...
        def PresentationSave(self, Pres: hints.Incomplete) -> hints.Hresult: ...
        def PresentationOpen(self, Pres: hints.Incomplete) -> hints.Hresult: ...
        def NewPresentation(self, Pres: hints.Incomplete) -> hints.Hresult: ...
        def PresentationNewSlide(self, Sld: hints.Incomplete) -> hints.Hresult: ...
        def WindowActivate(self, Pres: hints.Incomplete, Wn: hints.Incomplete) -> hints.Hresult: ...
        def WindowDeactivate(self, Pres: hints.Incomplete, Wn: hints.Incomplete) -> hints.Hresult: ...
        def SlideShowBegin(self, Wn: hints.Incomplete) -> hints.Hresult: ...
        def SlideShowNextBuild(self, Wn: hints.Incomplete) -> hints.Hresult: ...
        def SlideShowNextSlide(self, Wn: hints.Incomplete) -> hints.Hresult: ...
        def SlideShowEnd(self, Pres: hints.Incomplete) -> hints.Hresult: ...
        def PresentationPrint(self, Pres: hints.Incomplete) -> hints.Hresult: ...
        def SlideSelectionChanged(self, SldRange: hints.Incomplete) -> hints.Hresult: ...
        def ColorSchemeChanged(self, SldRange: hints.Incomplete) -> hints.Hresult: ...
        def PresentationBeforeSave(self, Pres: hints.Incomplete, Cancel: hints.Incomplete) -> hints.Incomplete: ...
        def SlideShowNextClick(self, Wn: hints.Incomplete, nEffect: hints.Incomplete) -> hints.Hresult: ...
        def AfterNewPresentation(self, Pres: hints.Incomplete) -> hints.Hresult: ...
        def AfterPresentationOpen(self, Pres: hints.Incomplete) -> hints.Hresult: ...
        def PresentationSync(self, Pres: hints.Incomplete, SyncEventType: hints.Incomplete) -> hints.Hresult: ...
        def SlideShowOnNext(self, Wn: hints.Incomplete) -> hints.Hresult: ...
        def SlideShowOnPrevious(self, Wn: hints.Incomplete) -> hints.Hresult: ...
        def PresentationBeforeClose(self, Pres: hints.Incomplete, Cancel: hints.Incomplete) -> hints.Incomplete: ...
        def ProtectedViewWindowOpen(self, ProtViewWindow: hints.Incomplete) -> hints.Hresult: ...
        def ProtectedViewWindowBeforeEdit(self, ProtViewWindow: hints.Incomplete, Cancel: hints.Incomplete) -> hints.Incomplete: ...
        def ProtectedViewWindowBeforeClose(self, ProtViewWindow: hints.Incomplete, ProtectedViewCloseReason: hints.Incomplete, Cancel: hints.Incomplete) -> hints.Incomplete: ...
        def ProtectedViewWindowActivate(self, ProtViewWindow: hints.Incomplete) -> hints.Hresult: ...
        def ProtectedViewWindowDeactivate(self, ProtViewWindow: hints.Incomplete) -> hints.Hresult: ...
        def PresentationCloseFinal(self, Pres: hints.Incomplete) -> hints.Hresult: ...
        def AfterDragDropOnSlide(self, Sld: hints.Incomplete, X: hints.Incomplete, Y: hints.Incomplete) -> hints.Hresult: ...
        def AfterShapeSizeChange(self, shp: hints.Incomplete) -> hints.Hresult: ...


Application._com_interfaces_ = [_Application]
Application._outgoing_interfaces_ = [EApplication]


class Adjustments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{9149347C-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get_Item(self, Index: hints.Incomplete) -> hints.Incomplete: ...
        def _set_Item(self, Index: hints.Incomplete, Val: hints.Incomplete) -> hints.Hresult: ...
        Item = hints.named_property('Item', _get_Item, _set_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)


ChartFormat._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Fill',
        (['out', 'retval'], POINTER(POINTER(FillFormat)), 'ppFill')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Glow',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.GlowFormat)),
            'ppGlow',
        )
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Line',
        (['out', 'retval'], POINTER(POINTER(LineFormat)), 'ppLine')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppparent')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'PictureFormat',
        (['out', 'retval'], POINTER(POINTER(PictureFormat)), 'ppPictureFormat')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'Shadow',
        (['out', 'retval'], POINTER(POINTER(ShadowFormat)), 'ppShadow')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'SoftEdge',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.SoftEdgeFormat)),
            'ppSoftEdge',
        )
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'TextFrame2',
        (['out', 'retval'], POINTER(POINTER(TextFrame2)), 'ppTextFrame')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'ThreeD',
        (['out', 'retval'], POINTER(POINTER(ThreeDFormat)), 'ppThreeD')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2011), 'propget'],
        HRESULT,
        'Adjustments',
        (['out', 'retval'], POINTER(POINTER(Adjustments)), 'ppAdjustments')
    ),
    COMMETHOD(
        [dispid(2012), 'propget'],
        HRESULT,
        'AutoShapeType',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoAutoShapeType),
            'AutoShapeType',
        )
    ),
    COMMETHOD(
        [dispid(2012), 'propput'],
        HRESULT,
        'AutoShapeType',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoAutoShapeType,
            'AutoShapeType',
        )
    ),
]

################################################################
# code template for ChartFormat implementation
# class ChartFormat_Impl(object):
#     @property
#     def Fill(self):
#         '-no docstring-'
#         #return ppFill
#
#     @property
#     def Glow(self):
#         '-no docstring-'
#         #return ppGlow
#
#     @property
#     def Line(self):
#         '-no docstring-'
#         #return ppLine
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppparent
#
#     @property
#     def PictureFormat(self):
#         '-no docstring-'
#         #return ppPictureFormat
#
#     @property
#     def Shadow(self):
#         '-no docstring-'
#         #return ppShadow
#
#     @property
#     def SoftEdge(self):
#         '-no docstring-'
#         #return ppSoftEdge
#
#     @property
#     def TextFrame2(self):
#         '-no docstring-'
#         #return ppTextFrame
#
#     @property
#     def ThreeD(self):
#         '-no docstring-'
#         #return ppThreeD
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Adjustments(self):
#         '-no docstring-'
#         #return ppAdjustments
#
#     def _get(self):
#         '-no docstring-'
#         #return AutoShapeType
#     def _set(self, AutoShapeType):
#         '-no docstring-'
#     AutoShapeType = property(_get, _set, doc = _set.__doc__)
#

PictureFormat._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'plCreator')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'IncrementBrightness',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'IncrementContrast',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'Brightness',
        (['out', 'retval'], POINTER(c_float), 'Brightness')
    ),
    COMMETHOD(
        [dispid(100), 'propput'],
        HRESULT,
        'Brightness',
        (['in'], c_float, 'Brightness')
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'ColorType',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPictureColorType),
            'ColorType',
        )
    ),
    COMMETHOD(
        [dispid(101), 'propput'],
        HRESULT,
        'ColorType',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPictureColorType,
            'ColorType',
        )
    ),
    COMMETHOD(
        [dispid(102), 'propget'],
        HRESULT,
        'Contrast',
        (['out', 'retval'], POINTER(c_float), 'Contrast')
    ),
    COMMETHOD(
        [dispid(102), 'propput'],
        HRESULT,
        'Contrast',
        (['in'], c_float, 'Contrast')
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'CropBottom',
        (['out', 'retval'], POINTER(c_float), 'CropBottom')
    ),
    COMMETHOD(
        [dispid(103), 'propput'],
        HRESULT,
        'CropBottom',
        (['in'], c_float, 'CropBottom')
    ),
    COMMETHOD(
        [dispid(104), 'propget'],
        HRESULT,
        'CropLeft',
        (['out', 'retval'], POINTER(c_float), 'CropLeft')
    ),
    COMMETHOD(
        [dispid(104), 'propput'],
        HRESULT,
        'CropLeft',
        (['in'], c_float, 'CropLeft')
    ),
    COMMETHOD(
        [dispid(105), 'propget'],
        HRESULT,
        'CropRight',
        (['out', 'retval'], POINTER(c_float), 'CropRight')
    ),
    COMMETHOD(
        [dispid(105), 'propput'],
        HRESULT,
        'CropRight',
        (['in'], c_float, 'CropRight')
    ),
    COMMETHOD(
        [dispid(106), 'propget'],
        HRESULT,
        'CropTop',
        (['out', 'retval'], POINTER(c_float), 'CropTop')
    ),
    COMMETHOD(
        [dispid(106), 'propput'],
        HRESULT,
        'CropTop',
        (['in'], c_float, 'CropTop')
    ),
    COMMETHOD(
        [dispid(107), 'propget'],
        HRESULT,
        'TransparencyColor',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoRGBType),
            'TransparencyColor',
        )
    ),
    COMMETHOD(
        [dispid(107), 'propput'],
        HRESULT,
        'TransparencyColor',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoRGBType,
            'TransparencyColor',
        )
    ),
    COMMETHOD(
        [dispid(108), 'propget'],
        HRESULT,
        'TransparentBackground',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'TransparentBackground',
        )
    ),
    COMMETHOD(
        [dispid(108), 'propput'],
        HRESULT,
        'TransparentBackground',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'TransparentBackground',
        )
    ),
    COMMETHOD(
        [dispid(109), 'propget'],
        HRESULT,
        'Crop',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.Crop)),
            'Crop',
        )
    ),
]

################################################################
# code template for PictureFormat implementation
# class PictureFormat_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return plCreator
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def IncrementBrightness(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def IncrementContrast(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return Brightness
#     def _set(self, Brightness):
#         '-no docstring-'
#     Brightness = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ColorType
#     def _set(self, ColorType):
#         '-no docstring-'
#     ColorType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Contrast
#     def _set(self, Contrast):
#         '-no docstring-'
#     Contrast = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return CropBottom
#     def _set(self, CropBottom):
#         '-no docstring-'
#     CropBottom = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return CropLeft
#     def _set(self, CropLeft):
#         '-no docstring-'
#     CropLeft = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return CropRight
#     def _set(self, CropRight):
#         '-no docstring-'
#     CropRight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return CropTop
#     def _set(self, CropTop):
#         '-no docstring-'
#     CropTop = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return TransparencyColor
#     def _set(self, TransparencyColor):
#         '-no docstring-'
#     TransparencyColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return TransparentBackground
#     def _set(self, TransparentBackground):
#         '-no docstring-'
#     TransparentBackground = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Crop(self):
#         '-no docstring-'
#         #return Crop
#


class MediaFormat(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{BA72E550-4FF5-48F4-8215-5505F990966F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Volume(self) -> hints.Incomplete: ...
        def _set_Volume(self, Volume: hints.Incomplete) -> hints.Hresult: ...
        Volume = hints.normal_property(_get_Volume, _set_Volume)
        def _get_Muted(self) -> hints.Incomplete: ...
        def _set_Muted(self, Muted: hints.Incomplete) -> hints.Hresult: ...
        Muted = hints.normal_property(_get_Muted, _set_Muted)
        def _get_Length(self) -> hints.Incomplete: ...
        Length = hints.normal_property(_get_Length)
        def _get_StartPoint(self) -> hints.Incomplete: ...
        def _set_StartPoint(self, StartPoint: hints.Incomplete) -> hints.Hresult: ...
        StartPoint = hints.normal_property(_get_StartPoint, _set_StartPoint)
        def _get_EndPoint(self) -> hints.Incomplete: ...
        def _set_EndPoint(self, EndPoint: hints.Incomplete) -> hints.Hresult: ...
        EndPoint = hints.normal_property(_get_EndPoint, _set_EndPoint)
        def _get_FadeInDuration(self) -> hints.Incomplete: ...
        def _set_FadeInDuration(self, FadeInDuration: hints.Incomplete) -> hints.Hresult: ...
        FadeInDuration = hints.normal_property(_get_FadeInDuration, _set_FadeInDuration)
        def _get_FadeOutDuration(self) -> hints.Incomplete: ...
        def _set_FadeOutDuration(self, FadeOutDuration: hints.Incomplete) -> hints.Hresult: ...
        FadeOutDuration = hints.normal_property(_get_FadeOutDuration, _set_FadeOutDuration)
        def _get_MediaBookmarks(self) -> 'MediaBookmarks': ...
        MediaBookmarks = hints.normal_property(_get_MediaBookmarks)
        def SetDisplayPicture(self, Position: hints.Incomplete) -> hints.Hresult: ...
        def SetDisplayPictureFromFile(self, FilePath: hints.Incomplete) -> hints.Hresult: ...
        def Resample(self, Trim: hints.Incomplete = ..., SampleHeight: hints.Incomplete = ..., SampleWidth: hints.Incomplete = ..., VideoFrameRate: hints.Incomplete = ..., AudioSamplingRate: hints.Incomplete = ..., VideoBitRate: hints.Incomplete = ...) -> hints.Hresult: ...
        def ResampleFromProfile(self, profile: hints.Incomplete = ...) -> hints.Hresult: ...
        def _get_ResamplingStatus(self) -> hints.Incomplete: ...
        ResamplingStatus = hints.normal_property(_get_ResamplingStatus)
        def _get_IsLinked(self) -> hints.Incomplete: ...
        IsLinked = hints.normal_property(_get_IsLinked)
        def _get_IsEmbedded(self) -> hints.Incomplete: ...
        IsEmbedded = hints.normal_property(_get_IsEmbedded)
        def _get_AudioSamplingRate(self) -> hints.Incomplete: ...
        AudioSamplingRate = hints.normal_property(_get_AudioSamplingRate)
        def _get_VideoFrameRate(self) -> hints.Incomplete: ...
        VideoFrameRate = hints.normal_property(_get_VideoFrameRate)
        def _get_SampleHeight(self) -> hints.Incomplete: ...
        SampleHeight = hints.normal_property(_get_SampleHeight)
        def _get_SampleWidth(self) -> hints.Incomplete: ...
        SampleWidth = hints.normal_property(_get_SampleWidth)
        def _get_VideoCompressionType(self) -> hints.Incomplete: ...
        VideoCompressionType = hints.normal_property(_get_VideoCompressionType)
        def _get_AudioCompressionType(self) -> hints.Incomplete: ...
        AudioCompressionType = hints.normal_property(_get_AudioCompressionType)


class Collection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493450-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['hidden', 'dual', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def _Index(self, Index: hints.Incomplete) -> hints.Incomplete: ...
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)


class MediaBookmarks(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{BA72E556-4FF5-48F4-8215-5505F990966F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def Item(self, Index: hints.Incomplete) -> 'MediaBookmark': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def Add(self, Position: hints.Incomplete, Name: hints.Incomplete) -> 'MediaBookmark': ...



MediaFormat._methods_ = [
    COMMETHOD(
        [dispid(2000), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Volume',
        (['out', 'retval'], POINTER(c_float), 'Volume')
    ),
    COMMETHOD(
        [dispid(2002), 'propput'],
        HRESULT,
        'Volume',
        (['in'], c_float, 'Volume')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Muted',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Muted')
    ),
    COMMETHOD(
        [dispid(2003), 'propput'],
        HRESULT,
        'Muted',
        (['in'], VARIANT_BOOL, 'Muted')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Length',
        (['out', 'retval'], POINTER(c_int), 'Length')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'StartPoint',
        (['out', 'retval'], POINTER(c_int), 'StartPoint')
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'StartPoint',
        (['in'], c_int, 'StartPoint')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'EndPoint',
        (['out', 'retval'], POINTER(c_int), 'EndPoint')
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'EndPoint',
        (['in'], c_int, 'EndPoint')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'FadeInDuration',
        (['out', 'retval'], POINTER(c_int), 'FadeInDuration')
    ),
    COMMETHOD(
        [dispid(2007), 'propput'],
        HRESULT,
        'FadeInDuration',
        (['in'], c_int, 'FadeInDuration')
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'FadeOutDuration',
        (['out', 'retval'], POINTER(c_int), 'FadeOutDuration')
    ),
    COMMETHOD(
        [dispid(2008), 'propput'],
        HRESULT,
        'FadeOutDuration',
        (['in'], c_int, 'FadeOutDuration')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'MediaBookmarks',
        (['out', 'retval'], POINTER(POINTER(MediaBookmarks)), 'MediaBookmarks')
    ),
    COMMETHOD(
        [dispid(2010)],
        HRESULT,
        'SetDisplayPicture',
        (['in'], c_int, 'Position')
    ),
    COMMETHOD(
        [dispid(2011)],
        HRESULT,
        'SetDisplayPictureFromFile',
        (['in'], BSTR, 'FilePath')
    ),
    COMMETHOD(
        [dispid(2012)],
        HRESULT,
        'Resample',
        (['in', 'optional'], VARIANT_BOOL, 'Trim', False),
        (['in', 'optional'], c_int, 'SampleHeight', 1080),
        (['in', 'optional'], c_int, 'SampleWidth', 1920),
        (['in', 'optional'], c_int, 'VideoFrameRate', 24),
        (['in', 'optional'], c_int, 'AudioSamplingRate', 48000),
        (['in', 'optional'], c_int, 'VideoBitRate', 7000000)
    ),
    COMMETHOD(
        [dispid(2013)],
        HRESULT,
        'ResampleFromProfile',
        (['in', 'optional'], PpResampleMediaProfile, 'profile', 2)
    ),
    COMMETHOD(
        [dispid(2014), 'propget'],
        HRESULT,
        'ResamplingStatus',
        (['out', 'retval'], POINTER(PpMediaTaskStatus), 'ResamplingStatus')
    ),
    COMMETHOD(
        [dispid(2015), 'propget'],
        HRESULT,
        'IsLinked',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'IsLinked')
    ),
    COMMETHOD(
        [dispid(2016), 'propget'],
        HRESULT,
        'IsEmbedded',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'IsEmbedded')
    ),
    COMMETHOD(
        [dispid(2017), 'propget'],
        HRESULT,
        'AudioSamplingRate',
        (['out', 'retval'], POINTER(c_int), 'AudioSamplingRate')
    ),
    COMMETHOD(
        [dispid(2018), 'propget'],
        HRESULT,
        'VideoFrameRate',
        (['out', 'retval'], POINTER(c_int), 'VideoFrameRate')
    ),
    COMMETHOD(
        [dispid(2019), 'propget'],
        HRESULT,
        'SampleHeight',
        (['out', 'retval'], POINTER(c_int), 'SampleHeight')
    ),
    COMMETHOD(
        [dispid(2020), 'propget'],
        HRESULT,
        'SampleWidth',
        (['out', 'retval'], POINTER(c_int), 'SampleWidth')
    ),
    COMMETHOD(
        [dispid(2021), 'propget'],
        HRESULT,
        'VideoCompressionType',
        (['out', 'retval'], POINTER(BSTR), 'VideoCompressionType')
    ),
    COMMETHOD(
        [dispid(2022), 'propget'],
        HRESULT,
        'AudioCompressionType',
        (['out', 'retval'], POINTER(BSTR), 'AudioCompressionType')
    ),
]

################################################################
# code template for MediaFormat implementation
# class MediaFormat_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return Volume
#     def _set(self, Volume):
#         '-no docstring-'
#     Volume = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Muted
#     def _set(self, Muted):
#         '-no docstring-'
#     Muted = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Length(self):
#         '-no docstring-'
#         #return Length
#
#     def _get(self):
#         '-no docstring-'
#         #return StartPoint
#     def _set(self, StartPoint):
#         '-no docstring-'
#     StartPoint = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return EndPoint
#     def _set(self, EndPoint):
#         '-no docstring-'
#     EndPoint = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return FadeInDuration
#     def _set(self, FadeInDuration):
#         '-no docstring-'
#     FadeInDuration = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return FadeOutDuration
#     def _set(self, FadeOutDuration):
#         '-no docstring-'
#     FadeOutDuration = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def MediaBookmarks(self):
#         '-no docstring-'
#         #return MediaBookmarks
#
#     def SetDisplayPicture(self, Position):
#         '-no docstring-'
#         #return 
#
#     def SetDisplayPictureFromFile(self, FilePath):
#         '-no docstring-'
#         #return 
#
#     def Resample(self, Trim, SampleHeight, SampleWidth, VideoFrameRate, AudioSamplingRate, VideoBitRate):
#         '-no docstring-'
#         #return 
#
#     def ResampleFromProfile(self, profile):
#         '-no docstring-'
#         #return 
#
#     @property
#     def ResamplingStatus(self):
#         '-no docstring-'
#         #return ResamplingStatus
#
#     @property
#     def IsLinked(self):
#         '-no docstring-'
#         #return IsLinked
#
#     @property
#     def IsEmbedded(self):
#         '-no docstring-'
#         #return IsEmbedded
#
#     @property
#     def AudioSamplingRate(self):
#         '-no docstring-'
#         #return AudioSamplingRate
#
#     @property
#     def VideoFrameRate(self):
#         '-no docstring-'
#         #return VideoFrameRate
#
#     @property
#     def SampleHeight(self):
#         '-no docstring-'
#         #return SampleHeight
#
#     @property
#     def SampleWidth(self):
#         '-no docstring-'
#         #return SampleWidth
#
#     @property
#     def VideoCompressionType(self):
#         '-no docstring-'
#         #return VideoCompressionType
#
#     @property
#     def AudioCompressionType(self):
#         '-no docstring-'
#         #return AudioCompressionType
#


class Row(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934C7-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Cells(self) -> 'CellRange': ...
        Cells = hints.normal_property(_get_Cells)
        def Select(self) -> hints.Hresult: ...
        def Delete(self) -> hints.Hresult: ...
        def _get_Height(self) -> hints.Incomplete: ...
        def _set_Height(self, Height: hints.Incomplete) -> hints.Hresult: ...
        Height = hints.normal_property(_get_Height, _set_Height)


class CellRange(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{914934C8-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Item(self, Index: hints.Incomplete) -> 'Cell': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Borders(self) -> 'Borders': ...
        Borders = hints.normal_property(_get_Borders)


Row._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Cells',
        (['out', 'retval'], POINTER(POINTER(CellRange)), 'Cells')
    ),
    COMMETHOD([dispid(2004)], HRESULT, 'Select'),
    COMMETHOD([dispid(2005)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_float), 'Height')
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_float, 'Height')
    ),
]

################################################################
# code template for Row implementation
# class Row_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Cells(self):
#         '-no docstring-'
#         #return Cells
#
#     def Select(self):
#         '-no docstring-'
#         #return 
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return Height
#     def _set(self, Height):
#         '-no docstring-'
#     Height = property(_get, _set, doc = _set.__doc__)
#

Adjustments._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'plCreator')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(c_float), 'Val')
    ),
    COMMETHOD(
        [dispid(0), 'propput'],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['in'], c_float, 'Val')
    ),
]

################################################################
# code template for Adjustments implementation
# class Adjustments_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return plCreator
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return Count
#
#     def _get(self, Index):
#         '-no docstring-'
#         #return Val
#     def _set(self, Index, Val):
#         '-no docstring-'
#     Item = property(_get, _set, doc = _set.__doc__)
#


class Tags(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{914934B9-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Item(self, Name: hints.Incomplete) -> hints.Incomplete: ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def Add(self, Name: hints.Incomplete, Value: hints.Incomplete) -> hints.Hresult: ...
        def Delete(self, Name: hints.Incomplete) -> hints.Hresult: ...
        def AddBinary(self, Name: hints.Incomplete, FilePath: hints.Incomplete) -> hints.Hresult: ...
        def BinaryValue(self, Name: hints.Incomplete) -> hints.Incomplete: ...
        def Name(self, Index: hints.Incomplete) -> hints.Incomplete: ...
        def Value(self, Index: hints.Incomplete) -> hints.Incomplete: ...


Collection._methods_ = [
    COMMETHOD(
        [dispid(-4), 'restricted', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), '_NewEnum')
    ),
    COMMETHOD(
        [dispid(10), 'restricted'],
        HRESULT,
        '_Index',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(VARIANT), '_Index')
    ),
    COMMETHOD(
        [dispid(11), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
]

################################################################
# code template for Collection implementation
# class Collection_Impl(object):
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return _NewEnum
#
#     def _Index(self, Index):
#         '-no docstring-'
#         #return _Index
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return Count
#

Tags._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(BSTR), 'Item')
    ),
    COMMETHOD(
        [dispid(2003)],
        HRESULT,
        'Add',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'Value')
    ),
    COMMETHOD(
        [dispid(2004)],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'Name')
    ),
    COMMETHOD(
        [dispid(2005), 'hidden'],
        HRESULT,
        'AddBinary',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'FilePath')
    ),
    COMMETHOD(
        [dispid(2006), 'hidden'],
        HRESULT,
        'BinaryValue',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'BinaryValue')
    ),
    COMMETHOD(
        [dispid(2007)],
        HRESULT,
        'Name',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(2008)],
        HRESULT,
        'Value',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(BSTR), 'Value')
    ),
]

################################################################
# code template for Tags implementation
# class Tags_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Item(self, Name):
#         '-no docstring-'
#         #return Item
#
#     def Add(self, Name, Value):
#         '-no docstring-'
#         #return 
#
#     def Delete(self, Name):
#         '-no docstring-'
#         #return 
#
#     def AddBinary(self, Name, FilePath):
#         '-no docstring-'
#         #return 
#
#     def BinaryValue(self, Name):
#         '-no docstring-'
#         #return BinaryValue
#
#     def Name(self, Index):
#         '-no docstring-'
#         #return Name
#
#     def Value(self, Index):
#         '-no docstring-'
#         #return Value
#


class FullSeriesCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{288B25A9-98EF-41E5-BEBA-F547D7169BF2}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Item(self, Index: hints.Incomplete) -> 'Series': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _NewEnum(self) -> hints.Incomplete: ...
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _Default(self, Index: hints.Incomplete) -> 'Series': ...


class Series(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A75-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_AxisGroup(self) -> hints.Incomplete: ...
        def _set_AxisGroup(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        AxisGroup = hints.normal_property(_get_AxisGroup, _set_AxisGroup)
        def _get_Border(self) -> 'ChartBorder': ...
        Border = hints.normal_property(_get_Border)
        def ClearFormats(self) -> hints.Incomplete: ...
        def Copy(self) -> hints.Incomplete: ...
        def DataLabels(self, Index: hints.Incomplete = ...) -> hints.Incomplete: ...
        def Delete(self) -> hints.Incomplete: ...
        def ErrorBar(self, Direction: hints.Incomplete, Include: hints.Incomplete, Type: hints.Incomplete, Amount: hints.Incomplete = ..., MinusValues: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _get_ErrorBars(self) -> 'ErrorBars': ...
        ErrorBars = hints.normal_property(_get_ErrorBars)
        def _get_Explosion(self) -> hints.Incomplete: ...
        def _set_Explosion(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Explosion = hints.normal_property(_get_Explosion, _set_Explosion)
        def _get_Formula(self) -> hints.Incomplete: ...
        def _set_Formula(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Formula = hints.normal_property(_get_Formula, _set_Formula)
        def _get_FormulaLocal(self) -> hints.Incomplete: ...
        def _set_FormulaLocal(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        FormulaLocal = hints.normal_property(_get_FormulaLocal, _set_FormulaLocal)
        def _get_FormulaR1C1(self) -> hints.Incomplete: ...
        def _set_FormulaR1C1(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        FormulaR1C1 = hints.normal_property(_get_FormulaR1C1, _set_FormulaR1C1)
        def _get_FormulaR1C1Local(self) -> hints.Incomplete: ...
        def _set_FormulaR1C1Local(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        FormulaR1C1Local = hints.normal_property(_get_FormulaR1C1Local, _set_FormulaR1C1Local)
        def _get_HasDataLabels(self) -> hints.Incomplete: ...
        def _set_HasDataLabels(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        HasDataLabels = hints.normal_property(_get_HasDataLabels, _set_HasDataLabels)
        def _get_HasErrorBars(self) -> hints.Incomplete: ...
        def _set_HasErrorBars(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        HasErrorBars = hints.normal_property(_get_HasErrorBars, _set_HasErrorBars)
        def _get_Interior(self) -> 'Interior': ...
        Interior = hints.normal_property(_get_Interior)
        def _get_Fill(self) -> 'ChartFillFormat': ...
        Fill = hints.normal_property(_get_Fill)
        def _get_InvertIfNegative(self) -> hints.Incomplete: ...
        def _set_InvertIfNegative(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        InvertIfNegative = hints.normal_property(_get_InvertIfNegative, _set_InvertIfNegative)
        def _get_MarkerBackgroundColor(self) -> hints.Incomplete: ...
        def _set_MarkerBackgroundColor(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MarkerBackgroundColor = hints.normal_property(_get_MarkerBackgroundColor, _set_MarkerBackgroundColor)
        def _get_MarkerBackgroundColorIndex(self) -> hints.Incomplete: ...
        def _set_MarkerBackgroundColorIndex(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MarkerBackgroundColorIndex = hints.normal_property(_get_MarkerBackgroundColorIndex, _set_MarkerBackgroundColorIndex)
        def _get_MarkerForegroundColor(self) -> hints.Incomplete: ...
        def _set_MarkerForegroundColor(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MarkerForegroundColor = hints.normal_property(_get_MarkerForegroundColor, _set_MarkerForegroundColor)
        def _get_MarkerForegroundColorIndex(self) -> hints.Incomplete: ...
        def _set_MarkerForegroundColorIndex(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MarkerForegroundColorIndex = hints.normal_property(_get_MarkerForegroundColorIndex, _set_MarkerForegroundColorIndex)
        def _get_MarkerSize(self) -> hints.Incomplete: ...
        def _set_MarkerSize(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MarkerSize = hints.normal_property(_get_MarkerSize, _set_MarkerSize)
        def _get_MarkerStyle(self) -> hints.Incomplete: ...
        def _set_MarkerStyle(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MarkerStyle = hints.normal_property(_get_MarkerStyle, _set_MarkerStyle)
        def _get_Name(self) -> hints.Incomplete: ...
        def _set_Name(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def Paste(self) -> hints.Incomplete: ...
        def _get_PictureType(self) -> hints.Incomplete: ...
        def _set_PictureType(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        PictureType = hints.normal_property(_get_PictureType, _set_PictureType)
        def _get_PlotOrder(self) -> hints.Incomplete: ...
        def _set_PlotOrder(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        PlotOrder = hints.normal_property(_get_PlotOrder, _set_PlotOrder)
        def Points(self, Index: hints.Incomplete = ...) -> hints.Incomplete: ...
        def Select(self) -> hints.Incomplete: ...
        def _get_Smooth(self) -> hints.Incomplete: ...
        def _set_Smooth(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Smooth = hints.normal_property(_get_Smooth, _set_Smooth)
        def Trendlines(self, Index: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _get_Type(self) -> hints.Incomplete: ...
        def _set_Type(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Type = hints.normal_property(_get_Type, _set_Type)
        def _get_ChartType(self) -> hints.Incomplete: ...
        def _set_ChartType(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ChartType = hints.normal_property(_get_ChartType, _set_ChartType)
        def ApplyCustomType(self, ChartType: hints.Incomplete) -> hints.Hresult: ...
        def _get_Values(self) -> hints.Incomplete: ...
        def _set_Values(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Values = hints.normal_property(_get_Values, _set_Values)
        def _get_XValues(self) -> hints.Incomplete: ...
        def _set_XValues(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        XValues = hints.normal_property(_get_XValues, _set_XValues)
        def _get_BubbleSizes(self) -> hints.Incomplete: ...
        def _set_BubbleSizes(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        BubbleSizes = hints.normal_property(_get_BubbleSizes, _set_BubbleSizes)
        def _get_BarShape(self) -> hints.Incomplete: ...
        def _set_BarShape(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        BarShape = hints.normal_property(_get_BarShape, _set_BarShape)
        def _get_ApplyPictToSides(self) -> hints.Incomplete: ...
        def _set_ApplyPictToSides(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ApplyPictToSides = hints.normal_property(_get_ApplyPictToSides, _set_ApplyPictToSides)
        def _get_ApplyPictToFront(self) -> hints.Incomplete: ...
        def _set_ApplyPictToFront(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ApplyPictToFront = hints.normal_property(_get_ApplyPictToFront, _set_ApplyPictToFront)
        def _get_ApplyPictToEnd(self) -> hints.Incomplete: ...
        def _set_ApplyPictToEnd(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ApplyPictToEnd = hints.normal_property(_get_ApplyPictToEnd, _set_ApplyPictToEnd)
        def _get_Has3DEffect(self) -> hints.Incomplete: ...
        def _set_Has3DEffect(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Has3DEffect = hints.normal_property(_get_Has3DEffect, _set_Has3DEffect)
        def _get_Shadow(self) -> hints.Incomplete: ...
        def _set_Shadow(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Shadow = hints.normal_property(_get_Shadow, _set_Shadow)
        def _get_HasLeaderLines(self) -> hints.Incomplete: ...
        def _set_HasLeaderLines(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        HasLeaderLines = hints.normal_property(_get_HasLeaderLines, _set_HasLeaderLines)
        def _get_LeaderLines(self) -> 'LeaderLines': ...
        LeaderLines = hints.normal_property(_get_LeaderLines)
        def _get_Format(self) -> 'ChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_PictureUnit2(self) -> hints.Incomplete: ...
        def _set_PictureUnit2(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        PictureUnit2 = hints.normal_property(_get_PictureUnit2, _set_PictureUnit2)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _ApplyDataLabels(self, Type: hints.Incomplete = ..., LegendKey: hints.Incomplete = ..., AutoText: hints.Incomplete = ..., HasLeaderLines: hints.Incomplete = ...) -> hints.Incomplete: ...
        def ApplyDataLabels(self, Type: hints.Incomplete = ..., LegendKey: hints.Incomplete = ..., AutoText: hints.Incomplete = ..., HasLeaderLines: hints.Incomplete = ..., ShowSeriesName: hints.Incomplete = ..., ShowCategoryName: hints.Incomplete = ..., ShowValue: hints.Incomplete = ..., ShowPercentage: hints.Incomplete = ..., ShowBubbleSize: hints.Incomplete = ..., Separator: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _get_PictureUnit(self) -> hints.Incomplete: ...
        def _set_PictureUnit(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        PictureUnit = hints.normal_property(_get_PictureUnit, _set_PictureUnit)
        def _get_PlotColorIndex(self) -> hints.Incomplete: ...
        PlotColorIndex = hints.normal_property(_get_PlotColorIndex)
        def _get_InvertColor(self) -> hints.Incomplete: ...
        def _set_InvertColor(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        InvertColor = hints.normal_property(_get_InvertColor, _set_InvertColor)
        def _get_InvertColorIndex(self) -> hints.Incomplete: ...
        def _set_InvertColorIndex(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        InvertColorIndex = hints.normal_property(_get_InvertColorIndex, _set_InvertColorIndex)
        def _get_IsFiltered(self) -> hints.Incomplete: ...
        def _set_IsFiltered(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        IsFiltered = hints.normal_property(_get_IsFiltered, _set_IsFiltered)
        def _get_ParentDataLabelOption(self) -> hints.Incomplete: ...
        def _set_ParentDataLabelOption(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ParentDataLabelOption = hints.normal_property(_get_ParentDataLabelOption, _set_ParentDataLabelOption)
        def _get_QuartileCalculationInclusiveMedian(self) -> hints.Incomplete: ...
        def _set_QuartileCalculationInclusiveMedian(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        QuartileCalculationInclusiveMedian = hints.normal_property(_get_QuartileCalculationInclusiveMedian, _set_QuartileCalculationInclusiveMedian)
        def _get_ValueSortOrder(self) -> hints.Incomplete: ...
        def _set_ValueSortOrder(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ValueSortOrder = hints.normal_property(_get_ValueSortOrder, _set_ValueSortOrder)
        def _get_GeoProjectionType(self) -> hints.Incomplete: ...
        def _set_GeoProjectionType(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        GeoProjectionType = hints.normal_property(_get_GeoProjectionType, _set_GeoProjectionType)
        def _get_GeoMappingLevel(self) -> hints.Incomplete: ...
        def _set_GeoMappingLevel(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        GeoMappingLevel = hints.normal_property(_get_GeoMappingLevel, _set_GeoMappingLevel)
        def _get_RegionLabelOption(self) -> hints.Incomplete: ...
        def _set_RegionLabelOption(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        RegionLabelOption = hints.normal_property(_get_RegionLabelOption, _set_RegionLabelOption)
        def _get_SeriesColorGradientStyle(self) -> hints.Incomplete: ...
        def _set_SeriesColorGradientStyle(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        SeriesColorGradientStyle = hints.normal_property(_get_SeriesColorGradientStyle, _set_SeriesColorGradientStyle)
        def GetProperty(self, Id: hints.Incomplete) -> hints.Incomplete: ...
        def SetProperty(self, Id: hints.Incomplete, Value: hints.Incomplete) -> hints.Hresult: ...


FullSeriesCollection._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(170)],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(Series)), 'RHS')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'ppval')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(0), 'nonbrowsable'],
        HRESULT,
        '_Default',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(Series)), 'RHS')
    ),
]

################################################################
# code template for FullSeriesCollection implementation
# class FullSeriesCollection_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return RHS
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return RHS
#
#     def _NewEnum(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     def _Default(self, Index):
#         '-no docstring-'
#         #return RHS
#


class ColorScheme(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{9149346F-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Colors(self, SchemeColor: hints.Incomplete) -> 'RGBColor': ...
        def Delete(self) -> hints.Hresult: ...




class RGBColor(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493470-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_RGB(self) -> hints.Incomplete: ...
        def _set_RGB(self, RGB: hints.Incomplete) -> hints.Hresult: ...
        RGB = hints.normal_property(_get_RGB, _set_RGB)


ColorScheme._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Colors',
        (['in'], PpColorSchemeIndex, 'SchemeColor'),
        (['out', 'retval'], POINTER(POINTER(RGBColor)), 'Colors')
    ),
    COMMETHOD([dispid(2003)], HRESULT, 'Delete'),
]

################################################################
# code template for ColorScheme implementation
# class ColorScheme_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Colors(self, SchemeColor):
#         '-no docstring-'
#         #return Colors
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#


class AddIns(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{91493460-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Item(self, Index: hints.Incomplete) -> 'AddIn': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def Add(self, FileName: hints.Incomplete) -> 'AddIn': ...
        def Remove(self, Index: hints.Incomplete) -> hints.Hresult: ...


class AddIn(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493461-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_FullName(self) -> hints.Incomplete: ...
        FullName = hints.normal_property(_get_FullName)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Path(self) -> hints.Incomplete: ...
        Path = hints.normal_property(_get_Path)
        def _get_Registered(self) -> hints.Incomplete: ...
        def _set_Registered(self, Registered: hints.Incomplete) -> hints.Hresult: ...
        Registered = hints.normal_property(_get_Registered, _set_Registered)
        def _get_AutoLoad(self) -> hints.Incomplete: ...
        def _set_AutoLoad(self, AutoLoad: hints.Incomplete) -> hints.Hresult: ...
        AutoLoad = hints.normal_property(_get_AutoLoad, _set_AutoLoad)
        def _get_Loaded(self) -> hints.Incomplete: ...
        def _set_Loaded(self, Loaded: hints.Incomplete) -> hints.Hresult: ...
        Loaded = hints.normal_property(_get_Loaded, _set_Loaded)
        def _get_DisplayAlerts(self) -> hints.Incomplete: ...
        def _set_DisplayAlerts(self, DisplayAlerts: hints.Incomplete) -> hints.Hresult: ...
        DisplayAlerts = hints.normal_property(_get_DisplayAlerts, _set_DisplayAlerts)
        def _get_RegisteredInHKLM(self) -> hints.Incomplete: ...
        RegisteredInHKLM = hints.normal_property(_get_RegisteredInHKLM)


AddIns._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], POINTER(VARIANT), 'Index'),
        (['out', 'retval'], POINTER(POINTER(AddIn)), 'Item')
    ),
    COMMETHOD(
        [dispid(2003)],
        HRESULT,
        'Add',
        (['in'], BSTR, 'FileName'),
        (['out', 'retval'], POINTER(POINTER(AddIn)), 'Add')
    ),
    COMMETHOD(
        [dispid(2004)],
        HRESULT,
        'Remove',
        (['in'], POINTER(VARIANT), 'Index')
    ),
]

################################################################
# code template for AddIns implementation
# class AddIns_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     def Add(self, FileName):
#         '-no docstring-'
#         #return Add
#
#     def Remove(self, Index):
#         '-no docstring-'
#         #return 
#


class ChartCategory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{AF028401-4619-4271-AFDD-F480FA925186}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_IsFiltered(self) -> hints.Incomplete: ...
        def _set_IsFiltered(self, pfIsFiltered: hints.Incomplete) -> hints.Hresult: ...
        IsFiltered = hints.normal_property(_get_IsFiltered, _set_IsFiltered)


ChartCategory._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'IsFiltered',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pfIsFiltered')
    ),
    COMMETHOD(
        [dispid(2003), 'propput'],
        HRESULT,
        'IsFiltered',
        (['in'], VARIANT_BOOL, 'pfIsFiltered')
    ),
]

################################################################
# code template for ChartCategory implementation
# class ChartCategory_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return pbstr
#
#     def _get(self):
#         '-no docstring-'
#         #return pfIsFiltered
#     def _set(self, pfIsFiltered):
#         '-no docstring-'
#     IsFiltered = property(_get, _set, doc = _set.__doc__)
#


class CalloutFormat(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493485-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def AutomaticLength(self) -> hints.Hresult: ...
        def CustomDrop(self, Drop: hints.Incomplete) -> hints.Hresult: ...
        def CustomLength(self, Length: hints.Incomplete) -> hints.Hresult: ...
        def PresetDrop(self, DropType: hints.Incomplete) -> hints.Hresult: ...
        def _get_Accent(self) -> hints.Incomplete: ...
        def _set_Accent(self, Accent: hints.Incomplete) -> hints.Hresult: ...
        Accent = hints.normal_property(_get_Accent, _set_Accent)
        def _get_Angle(self) -> hints.Incomplete: ...
        def _set_Angle(self, Angle: hints.Incomplete) -> hints.Hresult: ...
        Angle = hints.normal_property(_get_Angle, _set_Angle)
        def _get_AutoAttach(self) -> hints.Incomplete: ...
        def _set_AutoAttach(self, AutoAttach: hints.Incomplete) -> hints.Hresult: ...
        AutoAttach = hints.normal_property(_get_AutoAttach, _set_AutoAttach)
        def _get_AutoLength(self) -> hints.Incomplete: ...
        AutoLength = hints.normal_property(_get_AutoLength)
        def _get_Border(self) -> hints.Incomplete: ...
        def _set_Border(self, Border: hints.Incomplete) -> hints.Hresult: ...
        Border = hints.normal_property(_get_Border, _set_Border)
        def _get_Drop(self) -> hints.Incomplete: ...
        Drop = hints.normal_property(_get_Drop)
        def _get_DropType(self) -> hints.Incomplete: ...
        DropType = hints.normal_property(_get_DropType)
        def _get_Gap(self) -> hints.Incomplete: ...
        def _set_Gap(self, Gap: hints.Incomplete) -> hints.Hresult: ...
        Gap = hints.normal_property(_get_Gap, _set_Gap)
        def _get_Length(self) -> hints.Incomplete: ...
        Length = hints.normal_property(_get_Length)
        def _get_Type(self) -> hints.Incomplete: ...
        def _set_Type(self, Type: hints.Incomplete) -> hints.Hresult: ...
        Type = hints.normal_property(_get_Type, _set_Type)


CalloutFormat._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'plCreator')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD([dispid(10)], HRESULT, 'AutomaticLength'),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'CustomDrop',
        (['in'], c_float, 'Drop')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'CustomLength',
        (['in'], c_float, 'Length')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'PresetDrop',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoCalloutDropType,
            'DropType',
        )
    ),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'Accent',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Accent',
        )
    ),
    COMMETHOD(
        [dispid(100), 'propput'],
        HRESULT,
        'Accent',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Accent',
        )
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'Angle',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoCalloutAngleType),
            'Angle',
        )
    ),
    COMMETHOD(
        [dispid(101), 'propput'],
        HRESULT,
        'Angle',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoCalloutAngleType,
            'Angle',
        )
    ),
    COMMETHOD(
        [dispid(102), 'propget'],
        HRESULT,
        'AutoAttach',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'AutoAttach',
        )
    ),
    COMMETHOD(
        [dispid(102), 'propput'],
        HRESULT,
        'AutoAttach',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'AutoAttach',
        )
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'AutoLength',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'AutoLength',
        )
    ),
    COMMETHOD(
        [dispid(104), 'propget'],
        HRESULT,
        'Border',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Border',
        )
    ),
    COMMETHOD(
        [dispid(104), 'propput'],
        HRESULT,
        'Border',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Border',
        )
    ),
    COMMETHOD(
        [dispid(105), 'propget'],
        HRESULT,
        'Drop',
        (['out', 'retval'], POINTER(c_float), 'Drop')
    ),
    COMMETHOD(
        [dispid(106), 'propget'],
        HRESULT,
        'DropType',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoCalloutDropType),
            'DropType',
        )
    ),
    COMMETHOD(
        [dispid(107), 'propget'],
        HRESULT,
        'Gap',
        (['out', 'retval'], POINTER(c_float), 'Gap')
    ),
    COMMETHOD(
        [dispid(107), 'propput'],
        HRESULT,
        'Gap',
        (['in'], c_float, 'Gap')
    ),
    COMMETHOD(
        [dispid(108), 'propget'],
        HRESULT,
        'Length',
        (['out', 'retval'], POINTER(c_float), 'Length')
    ),
    COMMETHOD(
        [dispid(109), 'propget'],
        HRESULT,
        'Type',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoCalloutType),
            'Type',
        )
    ),
    COMMETHOD(
        [dispid(109), 'propput'],
        HRESULT,
        'Type',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoCalloutType,
            'Type',
        )
    ),
]

################################################################
# code template for CalloutFormat implementation
# class CalloutFormat_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return plCreator
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def AutomaticLength(self):
#         '-no docstring-'
#         #return 
#
#     def CustomDrop(self, Drop):
#         '-no docstring-'
#         #return 
#
#     def CustomLength(self, Length):
#         '-no docstring-'
#         #return 
#
#     def PresetDrop(self, DropType):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return Accent
#     def _set(self, Accent):
#         '-no docstring-'
#     Accent = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Angle
#     def _set(self, Angle):
#         '-no docstring-'
#     Angle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return AutoAttach
#     def _set(self, AutoAttach):
#         '-no docstring-'
#     AutoAttach = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def AutoLength(self):
#         '-no docstring-'
#         #return AutoLength
#
#     def _get(self):
#         '-no docstring-'
#         #return Border
#     def _set(self, Border):
#         '-no docstring-'
#     Border = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Drop(self):
#         '-no docstring-'
#         #return Drop
#
#     @property
#     def DropType(self):
#         '-no docstring-'
#         #return DropType
#
#     def _get(self):
#         '-no docstring-'
#         #return Gap
#     def _set(self, Gap):
#         '-no docstring-'
#     Gap = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Length(self):
#         '-no docstring-'
#         #return Length
#
#     def _get(self):
#         '-no docstring-'
#         #return Type
#     def _set(self, Type):
#         '-no docstring-'
#     Type = property(_get, _set, doc = _set.__doc__)
#


class Ruler(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493490-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_TabStops(self) -> 'TabStops': ...
        TabStops = hints.normal_property(_get_TabStops)
        def _get_Levels(self) -> 'RulerLevels': ...
        Levels = hints.normal_property(_get_Levels)


class TabStops(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{91493493-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Item(self, Index: hints.Incomplete) -> 'TabStop': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_DefaultSpacing(self) -> hints.Incomplete: ...
        def _set_DefaultSpacing(self, DefaultSpacing: hints.Incomplete) -> hints.Hresult: ...
        DefaultSpacing = hints.normal_property(_get_DefaultSpacing, _set_DefaultSpacing)
        def Add(self, Type: hints.Incomplete, Position: hints.Incomplete) -> 'TabStop': ...


class RulerLevels(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{91493491-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Item(self, Index: hints.Incomplete) -> 'RulerLevel': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)


Ruler._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'TabStops',
        (['out', 'retval'], POINTER(POINTER(TabStops)), 'TabStops')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Levels',
        (['out', 'retval'], POINTER(POINTER(RulerLevels)), 'Levels')
    ),
]

################################################################
# code template for Ruler implementation
# class Ruler_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def TabStops(self):
#         '-no docstring-'
#         #return TabStops
#
#     @property
#     def Levels(self):
#         '-no docstring-'
#         #return Levels
#


class TickLabels(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A78-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Delete(self) -> hints.Incomplete: ...
        def _get_Font(self) -> 'ChartFont': ...
        Font = hints.normal_property(_get_Font)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_NumberFormat(self) -> hints.Incomplete: ...
        def _set_NumberFormat(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        NumberFormat = hints.normal_property(_get_NumberFormat, _set_NumberFormat)
        def _get_NumberFormatLinked(self) -> hints.Incomplete: ...
        def _set_NumberFormatLinked(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        NumberFormatLinked = hints.normal_property(_get_NumberFormatLinked, _set_NumberFormatLinked)
        def _get_NumberFormatLocal(self) -> hints.Incomplete: ...
        def _set_NumberFormatLocal(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        NumberFormatLocal = hints.normal_property(_get_NumberFormatLocal, _set_NumberFormatLocal)
        def _get_Orientation(self) -> hints.Incomplete: ...
        def _set_Orientation(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Orientation = hints.normal_property(_get_Orientation, _set_Orientation)
        def Select(self) -> hints.Incomplete: ...
        def _get_AutoScaleFont(self) -> hints.Incomplete: ...
        def _set_AutoScaleFont(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        AutoScaleFont = hints.normal_property(_get_AutoScaleFont, _set_AutoScaleFont)
        def _get_Depth(self) -> hints.Incomplete: ...
        Depth = hints.normal_property(_get_Depth)
        def _get_Offset(self) -> hints.Incomplete: ...
        def _set_Offset(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Offset = hints.normal_property(_get_Offset, _set_Offset)
        def _get_MultiLevel(self) -> hints.Incomplete: ...
        def _set_MultiLevel(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MultiLevel = hints.normal_property(_get_MultiLevel, _set_MultiLevel)
        def _get_Format(self) -> 'ChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Alignment(self) -> hints.Incomplete: ...
        def _set_Alignment(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Alignment = hints.normal_property(_get_Alignment, _set_Alignment)
        def _get_ReadingOrder(self) -> hints.Incomplete: ...
        def _set_ReadingOrder(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ReadingOrder = hints.normal_property(_get_ReadingOrder, _set_ReadingOrder)


class ChartFont(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A69-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Background(self) -> hints.Incomplete: ...
        def _set_Background(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Background = hints.normal_property(_get_Background, _set_Background)
        def _get_Bold(self) -> hints.Incomplete: ...
        def _set_Bold(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Bold = hints.normal_property(_get_Bold, _set_Bold)
        def _get_Color(self) -> hints.Incomplete: ...
        def _set_Color(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Color = hints.normal_property(_get_Color, _set_Color)
        def _get_ColorIndex(self) -> hints.Incomplete: ...
        def _set_ColorIndex(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ColorIndex = hints.normal_property(_get_ColorIndex, _set_ColorIndex)
        def _get_FontStyle(self) -> hints.Incomplete: ...
        def _set_FontStyle(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        FontStyle = hints.normal_property(_get_FontStyle, _set_FontStyle)
        def _get_Italic(self) -> hints.Incomplete: ...
        def _set_Italic(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Italic = hints.normal_property(_get_Italic, _set_Italic)
        def _get_Name(self) -> hints.Incomplete: ...
        def _set_Name(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def _get_OutlineFont(self) -> hints.Incomplete: ...
        def _set_OutlineFont(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        OutlineFont = hints.normal_property(_get_OutlineFont, _set_OutlineFont)
        def _get_Shadow(self) -> hints.Incomplete: ...
        def _set_Shadow(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Shadow = hints.normal_property(_get_Shadow, _set_Shadow)
        def _get_Size(self) -> hints.Incomplete: ...
        def _set_Size(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Size = hints.normal_property(_get_Size, _set_Size)
        def _get_Strikethrough(self) -> hints.Incomplete: ...
        def _set_Strikethrough(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Strikethrough = hints.normal_property(_get_Strikethrough, _set_Strikethrough)
        def _get_Subscript(self) -> hints.Incomplete: ...
        def _set_Subscript(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Subscript = hints.normal_property(_get_Subscript, _set_Subscript)
        def _get_Superscript(self) -> hints.Incomplete: ...
        def _set_Superscript(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Superscript = hints.normal_property(_get_Superscript, _set_Superscript)
        def _get_Underline(self) -> hints.Incomplete: ...
        def _set_Underline(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Underline = hints.normal_property(_get_Underline, _set_Underline)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)



TickLabels._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        [dispid(2002)],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Font',
        (['out', 'retval'], POINTER(POINTER(ChartFont)), 'ppval')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'NumberFormat',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'NumberFormat',
        (['in'], BSTR, 'RHS')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'NumberFormatLinked',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'NumberFormatLinked',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'NumberFormatLocal',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2007), 'propput'],
        HRESULT,
        'NumberFormatLocal',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'Orientation',
        (['out', 'retval'], POINTER(XlTickLabelOrientation), 'RHS')
    ),
    COMMETHOD(
        [dispid(2008), 'propput'],
        HRESULT,
        'Orientation',
        (['in'], XlTickLabelOrientation, 'RHS')
    ),
    COMMETHOD(
        [dispid(2009)],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2010), 'hidden', 'propget'],
        HRESULT,
        'AutoScaleFont',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2010), 'hidden', 'propput'],
        HRESULT,
        'AutoScaleFont',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2011), 'propget'],
        HRESULT,
        'Depth',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2012), 'propget'],
        HRESULT,
        'Offset',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2012), 'propput'],
        HRESULT,
        'Offset',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(2013), 'propget'],
        HRESULT,
        'MultiLevel',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2013), 'propput'],
        HRESULT,
        'MultiLevel',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2014), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(ChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2015), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2016), 'propget'],
        HRESULT,
        'Alignment',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2016), 'propput'],
        HRESULT,
        'Alignment',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(2017), 'propget'],
        HRESULT,
        'ReadingOrder',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2017), 'propput'],
        HRESULT,
        'ReadingOrder',
        (['in'], c_int, 'RHS')
    ),
]

################################################################
# code template for TickLabels implementation
# class TickLabels_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppval
#
#     def Delete(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Font(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     NumberFormat = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     NumberFormatLinked = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     NumberFormatLocal = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Orientation = property(_get, _set, doc = _set.__doc__)
#
#     def Select(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     AutoScaleFont = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Depth(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Offset = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MultiLevel = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Alignment = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ReadingOrder = property(_get, _set, doc = _set.__doc__)
#


class MediaBookmark(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{BA72E555-4FF5-48F4-8215-5505F990966F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Index(self) -> hints.Incomplete: ...
        Index = hints.normal_property(_get_Index)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Position(self) -> hints.Incomplete: ...
        Position = hints.normal_property(_get_Position)
        def Delete(self) -> hints.Hresult: ...


MediaBookmarks._methods_ = [
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(MediaBookmark)), 'Item')
    ),
    COMMETHOD(
        [dispid(2001)],
        HRESULT,
        'Add',
        (['in'], c_int, 'Position'),
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(POINTER(MediaBookmark)), 'Add')
    ),
]

################################################################
# code template for MediaBookmarks implementation
# class MediaBookmarks_Impl(object):
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     def Add(self, Position, Name):
#         '-no docstring-'
#         #return Add
#


class CanvasShapes(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934EC-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Item(self, Index: hints.Incomplete) -> 'Shape': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def AddCallout(self, Type: hints.Incomplete, Left: hints.Incomplete, Top: hints.Incomplete, Width: hints.Incomplete, Height: hints.Incomplete) -> 'Shape': ...
        def AddConnector(self, Type: hints.Incomplete, BeginX: hints.Incomplete, BeginY: hints.Incomplete, EndX: hints.Incomplete, EndY: hints.Incomplete) -> 'Shape': ...
        def AddCurve(self, SafeArrayOfPoints: hints.Incomplete) -> 'Shape': ...
        def AddLabel(self, Orientation: hints.Incomplete, Left: hints.Incomplete, Top: hints.Incomplete, Width: hints.Incomplete, Height: hints.Incomplete) -> 'Shape': ...
        def AddLine(self, BeginX: hints.Incomplete, BeginY: hints.Incomplete, EndX: hints.Incomplete, EndY: hints.Incomplete) -> 'Shape': ...
        def AddPicture(self, FileName: hints.Incomplete, LinkToFile: hints.Incomplete, SaveWithDocument: hints.Incomplete, Left: hints.Incomplete, Top: hints.Incomplete, Width: hints.Incomplete = ..., Height: hints.Incomplete = ...) -> 'Shape': ...
        def AddPolyline(self, SafeArrayOfPoints: hints.Incomplete) -> 'Shape': ...
        def AddShape(self, Type: hints.Incomplete, Left: hints.Incomplete, Top: hints.Incomplete, Width: hints.Incomplete, Height: hints.Incomplete) -> 'Shape': ...
        def AddTextEffect(self, PresetTextEffect: hints.Incomplete, Text: hints.Incomplete, FontName: hints.Incomplete, FontSize: hints.Incomplete, FontBold: hints.Incomplete, FontItalic: hints.Incomplete, Left: hints.Incomplete, Top: hints.Incomplete) -> 'Shape': ...
        def AddTextbox(self, Orientation: hints.Incomplete, Left: hints.Incomplete, Top: hints.Incomplete, Width: hints.Incomplete, Height: hints.Incomplete) -> 'Shape': ...
        def BuildFreeform(self, EditingType: hints.Incomplete, X1: hints.Incomplete, Y1: hints.Incomplete) -> 'FreeformBuilder': ...
        def Range(self, Index: hints.Incomplete) -> 'ShapeRange': ...
        def SelectAll(self) -> hints.Hresult: ...
        def _get_Background(self) -> 'Shape': ...
        Background = hints.normal_property(_get_Background)


class Shape(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493479-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Apply(self) -> hints.Hresult: ...
        def Delete(self) -> hints.Hresult: ...
        def Flip(self, FlipCmd: hints.Incomplete) -> hints.Hresult: ...
        def IncrementLeft(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def IncrementRotation(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def IncrementTop(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def PickUp(self) -> hints.Hresult: ...
        def RerouteConnections(self) -> hints.Hresult: ...
        def ScaleHeight(self, Factor: hints.Incomplete, RelativeToOriginalSize: hints.Incomplete, fScale: hints.Incomplete = ...) -> hints.Hresult: ...
        def ScaleWidth(self, Factor: hints.Incomplete, RelativeToOriginalSize: hints.Incomplete, fScale: hints.Incomplete = ...) -> hints.Hresult: ...
        def SetShapesDefaultProperties(self) -> hints.Hresult: ...
        def Ungroup(self) -> 'ShapeRange': ...
        def ZOrder(self, ZOrderCmd: hints.Incomplete) -> hints.Hresult: ...
        def _get_Adjustments(self) -> 'Adjustments': ...
        Adjustments = hints.normal_property(_get_Adjustments)
        def _get_AutoShapeType(self) -> hints.Incomplete: ...
        def _set_AutoShapeType(self, AutoShapeType: hints.Incomplete) -> hints.Hresult: ...
        AutoShapeType = hints.normal_property(_get_AutoShapeType, _set_AutoShapeType)
        def _get_BlackWhiteMode(self) -> hints.Incomplete: ...
        def _set_BlackWhiteMode(self, BlackWhiteMode: hints.Incomplete) -> hints.Hresult: ...
        BlackWhiteMode = hints.normal_property(_get_BlackWhiteMode, _set_BlackWhiteMode)
        def _get_Callout(self) -> 'CalloutFormat': ...
        Callout = hints.normal_property(_get_Callout)
        def _get_ConnectionSiteCount(self) -> hints.Incomplete: ...
        ConnectionSiteCount = hints.normal_property(_get_ConnectionSiteCount)
        def _get_Connector(self) -> hints.Incomplete: ...
        Connector = hints.normal_property(_get_Connector)
        def _get_ConnectorFormat(self) -> 'ConnectorFormat': ...
        ConnectorFormat = hints.normal_property(_get_ConnectorFormat)
        def _get_Fill(self) -> 'FillFormat': ...
        Fill = hints.normal_property(_get_Fill)
        def _get_GroupItems(self) -> 'GroupShapes': ...
        GroupItems = hints.normal_property(_get_GroupItems)
        def _get_Height(self) -> hints.Incomplete: ...
        def _set_Height(self, Height: hints.Incomplete) -> hints.Hresult: ...
        Height = hints.normal_property(_get_Height, _set_Height)
        def _get_HorizontalFlip(self) -> hints.Incomplete: ...
        HorizontalFlip = hints.normal_property(_get_HorizontalFlip)
        def _get_Left(self) -> hints.Incomplete: ...
        def _set_Left(self, Left: hints.Incomplete) -> hints.Hresult: ...
        Left = hints.normal_property(_get_Left, _set_Left)
        def _get_Line(self) -> 'LineFormat': ...
        Line = hints.normal_property(_get_Line)
        def _get_LockAspectRatio(self) -> hints.Incomplete: ...
        def _set_LockAspectRatio(self, LockAspectRatio: hints.Incomplete) -> hints.Hresult: ...
        LockAspectRatio = hints.normal_property(_get_LockAspectRatio, _set_LockAspectRatio)
        def _get_Name(self) -> hints.Incomplete: ...
        def _set_Name(self, Name: hints.Incomplete) -> hints.Hresult: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def _get_Nodes(self) -> 'ShapeNodes': ...
        Nodes = hints.normal_property(_get_Nodes)
        def _get_Rotation(self) -> hints.Incomplete: ...
        def _set_Rotation(self, Rotation: hints.Incomplete) -> hints.Hresult: ...
        Rotation = hints.normal_property(_get_Rotation, _set_Rotation)
        def _get_PictureFormat(self) -> 'PictureFormat': ...
        PictureFormat = hints.normal_property(_get_PictureFormat)
        def _get_Shadow(self) -> 'ShadowFormat': ...
        Shadow = hints.normal_property(_get_Shadow)
        def _get_TextEffect(self) -> 'TextEffectFormat': ...
        TextEffect = hints.normal_property(_get_TextEffect)
        def _get_TextFrame(self) -> 'TextFrame': ...
        TextFrame = hints.normal_property(_get_TextFrame)
        def _get_ThreeD(self) -> 'ThreeDFormat': ...
        ThreeD = hints.normal_property(_get_ThreeD)
        def _get_Top(self) -> hints.Incomplete: ...
        def _set_Top(self, Top: hints.Incomplete) -> hints.Hresult: ...
        Top = hints.normal_property(_get_Top, _set_Top)
        def _get_Type(self) -> hints.Incomplete: ...
        Type = hints.normal_property(_get_Type)
        def _get_VerticalFlip(self) -> hints.Incomplete: ...
        VerticalFlip = hints.normal_property(_get_VerticalFlip)
        def _get_Vertices(self) -> hints.Incomplete: ...
        Vertices = hints.normal_property(_get_Vertices)
        def _get_Visible(self) -> hints.Incomplete: ...
        def _set_Visible(self, Visible: hints.Incomplete) -> hints.Hresult: ...
        Visible = hints.normal_property(_get_Visible, _set_Visible)
        def _get_Width(self) -> hints.Incomplete: ...
        def _set_Width(self, Width: hints.Incomplete) -> hints.Hresult: ...
        Width = hints.normal_property(_get_Width, _set_Width)
        def _get_ZOrderPosition(self) -> hints.Incomplete: ...
        ZOrderPosition = hints.normal_property(_get_ZOrderPosition)
        def _get_OLEFormat(self) -> 'OLEFormat': ...
        OLEFormat = hints.normal_property(_get_OLEFormat)
        def _get_LinkFormat(self) -> 'LinkFormat': ...
        LinkFormat = hints.normal_property(_get_LinkFormat)
        def _get_PlaceholderFormat(self) -> 'PlaceholderFormat': ...
        PlaceholderFormat = hints.normal_property(_get_PlaceholderFormat)
        def _get_AnimationSettings(self) -> 'AnimationSettings': ...
        AnimationSettings = hints.normal_property(_get_AnimationSettings)
        def _get_ActionSettings(self) -> 'ActionSettings': ...
        ActionSettings = hints.normal_property(_get_ActionSettings)
        def _get_Tags(self) -> 'Tags': ...
        Tags = hints.normal_property(_get_Tags)
        def Cut(self) -> hints.Hresult: ...
        def Copy(self) -> hints.Hresult: ...
        def Select(self, Replace: hints.Incomplete = ...) -> hints.Hresult: ...
        def Duplicate(self) -> 'ShapeRange': ...
        def _get_MediaType(self) -> hints.Incomplete: ...
        MediaType = hints.normal_property(_get_MediaType)
        def _get_HasTextFrame(self) -> hints.Incomplete: ...
        HasTextFrame = hints.normal_property(_get_HasTextFrame)
        def _get_SoundFormat(self) -> 'SoundFormat': ...
        SoundFormat = hints.normal_property(_get_SoundFormat)
        def _get_Script(self) -> hints.Incomplete: ...
        Script = hints.normal_property(_get_Script)
        def _get_AlternativeText(self) -> hints.Incomplete: ...
        def _set_AlternativeText(self, AlternativeText: hints.Incomplete) -> hints.Hresult: ...
        AlternativeText = hints.normal_property(_get_AlternativeText, _set_AlternativeText)
        def _get_HasTable(self) -> hints.Incomplete: ...
        HasTable = hints.normal_property(_get_HasTable)
        def _get_Table(self) -> 'Table': ...
        Table = hints.normal_property(_get_Table)
        def Export(self, PathName: hints.Incomplete, Filter: hints.Incomplete, ScaleWidth: hints.Incomplete = ..., ScaleHeight: hints.Incomplete = ..., ExportMode: hints.Incomplete = ...) -> hints.Hresult: ...
        def _get_HasDiagram(self) -> hints.Incomplete: ...
        HasDiagram = hints.normal_property(_get_HasDiagram)
        def _get_Diagram(self) -> 'Diagram': ...
        Diagram = hints.normal_property(_get_Diagram)
        def _get_HasDiagramNode(self) -> hints.Incomplete: ...
        HasDiagramNode = hints.normal_property(_get_HasDiagramNode)
        def _get_DiagramNode(self) -> 'DiagramNode': ...
        DiagramNode = hints.normal_property(_get_DiagramNode)
        def _get_Child(self) -> hints.Incomplete: ...
        Child = hints.normal_property(_get_Child)
        def _get_ParentGroup(self) -> 'Shape': ...
        ParentGroup = hints.normal_property(_get_ParentGroup)
        def _get_CanvasItems(self) -> 'CanvasShapes': ...
        CanvasItems = hints.normal_property(_get_CanvasItems)
        def _get_Id(self) -> hints.Incomplete: ...
        Id = hints.normal_property(_get_Id)
        def CanvasCropLeft(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def CanvasCropTop(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def CanvasCropRight(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def CanvasCropBottom(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def _set_RTF(self, rhs: hints.Incomplete) -> hints.Hresult: ...
        RTF = hints.normal_property(fset=_set_RTF)
        def _get_CustomerData(self) -> 'CustomerData': ...
        CustomerData = hints.normal_property(_get_CustomerData)
        def _get_TextFrame2(self) -> 'TextFrame2': ...
        TextFrame2 = hints.normal_property(_get_TextFrame2)
        def _get_HasChart(self) -> hints.Incomplete: ...
        HasChart = hints.normal_property(_get_HasChart)
        def _get_ShapeStyle(self) -> hints.Incomplete: ...
        def _set_ShapeStyle(self, ShapeStyle: hints.Incomplete) -> hints.Hresult: ...
        ShapeStyle = hints.normal_property(_get_ShapeStyle, _set_ShapeStyle)
        def _get_BackgroundStyle(self) -> hints.Incomplete: ...
        def _set_BackgroundStyle(self, BackgroundStyle: hints.Incomplete) -> hints.Hresult: ...
        BackgroundStyle = hints.normal_property(_get_BackgroundStyle, _set_BackgroundStyle)
        def _get_SoftEdge(self) -> hints.Incomplete: ...
        SoftEdge = hints.normal_property(_get_SoftEdge)
        def _get_Glow(self) -> hints.Incomplete: ...
        Glow = hints.normal_property(_get_Glow)
        def _get_Reflection(self) -> hints.Incomplete: ...
        Reflection = hints.normal_property(_get_Reflection)
        def _get_Chart(self) -> 'Chart': ...
        Chart = hints.normal_property(_get_Chart)
        def _get_HasSmartArt(self) -> hints.Incomplete: ...
        HasSmartArt = hints.normal_property(_get_HasSmartArt)
        def _get_SmartArt(self) -> hints.Incomplete: ...
        SmartArt = hints.normal_property(_get_SmartArt)
        def ConvertTextToSmartArt(self, Layout: hints.Incomplete) -> hints.Hresult: ...
        def _get_Title(self) -> hints.Incomplete: ...
        def _set_Title(self, Title: hints.Incomplete) -> hints.Hresult: ...
        Title = hints.normal_property(_get_Title, _set_Title)
        def _get_MediaFormat(self) -> 'MediaFormat': ...
        MediaFormat = hints.normal_property(_get_MediaFormat)
        def PickupAnimation(self) -> hints.Hresult: ...
        def ApplyAnimation(self) -> hints.Hresult: ...
        def UpgradeMedia(self) -> hints.Hresult: ...
        def _get_IsNarration(self) -> hints.Incomplete: ...
        def _set_IsNarration(self, IsNarration: hints.Incomplete) -> hints.Hresult: ...
        IsNarration = hints.normal_property(_get_IsNarration, _set_IsNarration)
        def _get_InkXML(self) -> hints.Incomplete: ...
        InkXML = hints.normal_property(_get_InkXML)
        def _get_HasInkXML(self) -> hints.Incomplete: ...
        HasInkXML = hints.normal_property(_get_HasInkXML)
        def _get_HasSectionZoom(self) -> hints.Incomplete: ...
        HasSectionZoom = hints.normal_property(_get_HasSectionZoom)
        def _get_GraphicStyle(self) -> hints.Incomplete: ...
        def _set_GraphicStyle(self, GraphicStyle: hints.Incomplete) -> hints.Hresult: ...
        GraphicStyle = hints.normal_property(_get_GraphicStyle, _set_GraphicStyle)
        def _get_Model3D(self) -> 'Model3DFormat': ...
        Model3D = hints.normal_property(_get_Model3D)
        def _get_Decorative(self) -> hints.Incomplete: ...
        def _set_Decorative(self, fDecorative: hints.Incomplete) -> hints.Hresult: ...
        Decorative = hints.normal_property(_get_Decorative, _set_Decorative)
        def ConvertInkToText(self) -> hints.Incomplete: ...
        def _get_Locked(self) -> hints.Incomplete: ...
        def _set_Locked(self, pLocked: hints.Incomplete) -> hints.Hresult: ...
        Locked = hints.normal_property(_get_Locked, _set_Locked)


class FreeformBuilder(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493478-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def AddNodes(self, SegmentType: hints.Incomplete, EditingType: hints.Incomplete, X1: hints.Incomplete, Y1: hints.Incomplete, X2: hints.Incomplete = ..., Y2: hints.Incomplete = ..., X3: hints.Incomplete = ..., Y3: hints.Incomplete = ...) -> hints.Hresult: ...
        def ConvertToShape(self) -> 'Shape': ...


class ShapeRange(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{9149347A-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Apply(self) -> hints.Hresult: ...
        def Delete(self) -> hints.Hresult: ...
        def Flip(self, FlipCmd: hints.Incomplete) -> hints.Hresult: ...
        def IncrementLeft(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def IncrementRotation(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def IncrementTop(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def PickUp(self) -> hints.Hresult: ...
        def RerouteConnections(self) -> hints.Hresult: ...
        def ScaleHeight(self, Factor: hints.Incomplete, RelativeToOriginalSize: hints.Incomplete, fScale: hints.Incomplete = ...) -> hints.Hresult: ...
        def ScaleWidth(self, Factor: hints.Incomplete, RelativeToOriginalSize: hints.Incomplete, fScale: hints.Incomplete = ...) -> hints.Hresult: ...
        def SetShapesDefaultProperties(self) -> hints.Hresult: ...
        def Ungroup(self) -> 'ShapeRange': ...
        def ZOrder(self, ZOrderCmd: hints.Incomplete) -> hints.Hresult: ...
        def _get_Adjustments(self) -> 'Adjustments': ...
        Adjustments = hints.normal_property(_get_Adjustments)
        def _get_AutoShapeType(self) -> hints.Incomplete: ...
        def _set_AutoShapeType(self, AutoShapeType: hints.Incomplete) -> hints.Hresult: ...
        AutoShapeType = hints.normal_property(_get_AutoShapeType, _set_AutoShapeType)
        def _get_BlackWhiteMode(self) -> hints.Incomplete: ...
        def _set_BlackWhiteMode(self, BlackWhiteMode: hints.Incomplete) -> hints.Hresult: ...
        BlackWhiteMode = hints.normal_property(_get_BlackWhiteMode, _set_BlackWhiteMode)
        def _get_Callout(self) -> 'CalloutFormat': ...
        Callout = hints.normal_property(_get_Callout)
        def _get_ConnectionSiteCount(self) -> hints.Incomplete: ...
        ConnectionSiteCount = hints.normal_property(_get_ConnectionSiteCount)
        def _get_Connector(self) -> hints.Incomplete: ...
        Connector = hints.normal_property(_get_Connector)
        def _get_ConnectorFormat(self) -> 'ConnectorFormat': ...
        ConnectorFormat = hints.normal_property(_get_ConnectorFormat)
        def _get_Fill(self) -> 'FillFormat': ...
        Fill = hints.normal_property(_get_Fill)
        def _get_GroupItems(self) -> 'GroupShapes': ...
        GroupItems = hints.normal_property(_get_GroupItems)
        def _get_Height(self) -> hints.Incomplete: ...
        def _set_Height(self, Height: hints.Incomplete) -> hints.Hresult: ...
        Height = hints.normal_property(_get_Height, _set_Height)
        def _get_HorizontalFlip(self) -> hints.Incomplete: ...
        HorizontalFlip = hints.normal_property(_get_HorizontalFlip)
        def _get_Left(self) -> hints.Incomplete: ...
        def _set_Left(self, Left: hints.Incomplete) -> hints.Hresult: ...
        Left = hints.normal_property(_get_Left, _set_Left)
        def _get_Line(self) -> 'LineFormat': ...
        Line = hints.normal_property(_get_Line)
        def _get_LockAspectRatio(self) -> hints.Incomplete: ...
        def _set_LockAspectRatio(self, LockAspectRatio: hints.Incomplete) -> hints.Hresult: ...
        LockAspectRatio = hints.normal_property(_get_LockAspectRatio, _set_LockAspectRatio)
        def _get_Name(self) -> hints.Incomplete: ...
        def _set_Name(self, Name: hints.Incomplete) -> hints.Hresult: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def _get_Nodes(self) -> 'ShapeNodes': ...
        Nodes = hints.normal_property(_get_Nodes)
        def _get_Rotation(self) -> hints.Incomplete: ...
        def _set_Rotation(self, Rotation: hints.Incomplete) -> hints.Hresult: ...
        Rotation = hints.normal_property(_get_Rotation, _set_Rotation)
        def _get_PictureFormat(self) -> 'PictureFormat': ...
        PictureFormat = hints.normal_property(_get_PictureFormat)
        def _get_Shadow(self) -> 'ShadowFormat': ...
        Shadow = hints.normal_property(_get_Shadow)
        def _get_TextEffect(self) -> 'TextEffectFormat': ...
        TextEffect = hints.normal_property(_get_TextEffect)
        def _get_TextFrame(self) -> 'TextFrame': ...
        TextFrame = hints.normal_property(_get_TextFrame)
        def _get_ThreeD(self) -> 'ThreeDFormat': ...
        ThreeD = hints.normal_property(_get_ThreeD)
        def _get_Top(self) -> hints.Incomplete: ...
        def _set_Top(self, Top: hints.Incomplete) -> hints.Hresult: ...
        Top = hints.normal_property(_get_Top, _set_Top)
        def _get_Type(self) -> hints.Incomplete: ...
        Type = hints.normal_property(_get_Type)
        def _get_VerticalFlip(self) -> hints.Incomplete: ...
        VerticalFlip = hints.normal_property(_get_VerticalFlip)
        def _get_Vertices(self) -> hints.Incomplete: ...
        Vertices = hints.normal_property(_get_Vertices)
        def _get_Visible(self) -> hints.Incomplete: ...
        def _set_Visible(self, Visible: hints.Incomplete) -> hints.Hresult: ...
        Visible = hints.normal_property(_get_Visible, _set_Visible)
        def _get_Width(self) -> hints.Incomplete: ...
        def _set_Width(self, Width: hints.Incomplete) -> hints.Hresult: ...
        Width = hints.normal_property(_get_Width, _set_Width)
        def _get_ZOrderPosition(self) -> hints.Incomplete: ...
        ZOrderPosition = hints.normal_property(_get_ZOrderPosition)
        def _get_OLEFormat(self) -> 'OLEFormat': ...
        OLEFormat = hints.normal_property(_get_OLEFormat)
        def _get_LinkFormat(self) -> 'LinkFormat': ...
        LinkFormat = hints.normal_property(_get_LinkFormat)
        def _get_PlaceholderFormat(self) -> 'PlaceholderFormat': ...
        PlaceholderFormat = hints.normal_property(_get_PlaceholderFormat)
        def _get_AnimationSettings(self) -> 'AnimationSettings': ...
        AnimationSettings = hints.normal_property(_get_AnimationSettings)
        def _get_ActionSettings(self) -> 'ActionSettings': ...
        ActionSettings = hints.normal_property(_get_ActionSettings)
        def _get_Tags(self) -> 'Tags': ...
        Tags = hints.normal_property(_get_Tags)
        def Cut(self) -> hints.Hresult: ...
        def Copy(self) -> hints.Hresult: ...
        def Select(self, Replace: hints.Incomplete = ...) -> hints.Hresult: ...
        def Duplicate(self) -> 'ShapeRange': ...
        def _get_MediaType(self) -> hints.Incomplete: ...
        MediaType = hints.normal_property(_get_MediaType)
        def _get_HasTextFrame(self) -> hints.Incomplete: ...
        HasTextFrame = hints.normal_property(_get_HasTextFrame)
        def _get_SoundFormat(self) -> 'SoundFormat': ...
        SoundFormat = hints.normal_property(_get_SoundFormat)
        def Item(self, Index: hints.Incomplete) -> 'Shape': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def _Index(self, Index: hints.Incomplete) -> hints.Incomplete: ...
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Group(self) -> 'Shape': ...
        def Regroup(self) -> 'Shape': ...
        def Align(self, AlignCmd: hints.Incomplete, RelativeTo: hints.Incomplete) -> hints.Hresult: ...
        def Distribute(self, DistributeCmd: hints.Incomplete, RelativeTo: hints.Incomplete) -> hints.Hresult: ...
        def GetPolygonalRepresentation(self, maxPointsInBuffer: hints.Incomplete, pPoints: hints.Incomplete) -> hints.Tuple[hints.Incomplete, hints.Incomplete]: ...
        def _get_Script(self) -> hints.Incomplete: ...
        Script = hints.normal_property(_get_Script)
        def _get_AlternativeText(self) -> hints.Incomplete: ...
        def _set_AlternativeText(self, AlternativeText: hints.Incomplete) -> hints.Hresult: ...
        AlternativeText = hints.normal_property(_get_AlternativeText, _set_AlternativeText)
        def _get_HasTable(self) -> hints.Incomplete: ...
        HasTable = hints.normal_property(_get_HasTable)
        def _get_Table(self) -> 'Table': ...
        Table = hints.normal_property(_get_Table)
        def Export(self, PathName: hints.Incomplete, Filter: hints.Incomplete, ScaleWidth: hints.Incomplete = ..., ScaleHeight: hints.Incomplete = ..., ExportMode: hints.Incomplete = ...) -> hints.Hresult: ...
        def _get_HasDiagram(self) -> hints.Incomplete: ...
        HasDiagram = hints.normal_property(_get_HasDiagram)
        def _get_Diagram(self) -> 'Diagram': ...
        Diagram = hints.normal_property(_get_Diagram)
        def _get_HasDiagramNode(self) -> hints.Incomplete: ...
        HasDiagramNode = hints.normal_property(_get_HasDiagramNode)
        def _get_DiagramNode(self) -> 'DiagramNode': ...
        DiagramNode = hints.normal_property(_get_DiagramNode)
        def _get_Child(self) -> hints.Incomplete: ...
        Child = hints.normal_property(_get_Child)
        def _get_ParentGroup(self) -> 'Shape': ...
        ParentGroup = hints.normal_property(_get_ParentGroup)
        def _get_CanvasItems(self) -> 'CanvasShapes': ...
        CanvasItems = hints.normal_property(_get_CanvasItems)
        def _get_Id(self) -> hints.Incomplete: ...
        Id = hints.normal_property(_get_Id)
        def CanvasCropLeft(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def CanvasCropTop(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def CanvasCropRight(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def CanvasCropBottom(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def _set_RTF(self, rhs: hints.Incomplete) -> hints.Hresult: ...
        RTF = hints.normal_property(fset=_set_RTF)
        def _get_CustomerData(self) -> 'CustomerData': ...
        CustomerData = hints.normal_property(_get_CustomerData)
        def _get_TextFrame2(self) -> 'TextFrame2': ...
        TextFrame2 = hints.normal_property(_get_TextFrame2)
        def _get_HasChart(self) -> hints.Incomplete: ...
        HasChart = hints.normal_property(_get_HasChart)
        def _get_ShapeStyle(self) -> hints.Incomplete: ...
        def _set_ShapeStyle(self, ShapeStyle: hints.Incomplete) -> hints.Hresult: ...
        ShapeStyle = hints.normal_property(_get_ShapeStyle, _set_ShapeStyle)
        def _get_BackgroundStyle(self) -> hints.Incomplete: ...
        def _set_BackgroundStyle(self, BackgroundStyle: hints.Incomplete) -> hints.Hresult: ...
        BackgroundStyle = hints.normal_property(_get_BackgroundStyle, _set_BackgroundStyle)
        def _get_SoftEdge(self) -> hints.Incomplete: ...
        SoftEdge = hints.normal_property(_get_SoftEdge)
        def _get_Glow(self) -> hints.Incomplete: ...
        Glow = hints.normal_property(_get_Glow)
        def _get_Reflection(self) -> hints.Incomplete: ...
        Reflection = hints.normal_property(_get_Reflection)
        def _get_Chart(self) -> 'Chart': ...
        Chart = hints.normal_property(_get_Chart)
        def _get_HasSmartArt(self) -> hints.Incomplete: ...
        HasSmartArt = hints.normal_property(_get_HasSmartArt)
        def _get_SmartArt(self) -> hints.Incomplete: ...
        SmartArt = hints.normal_property(_get_SmartArt)
        def ConvertTextToSmartArt(self, Layout: hints.Incomplete) -> hints.Hresult: ...
        def _get_Title(self) -> hints.Incomplete: ...
        def _set_Title(self, Title: hints.Incomplete) -> hints.Hresult: ...
        Title = hints.normal_property(_get_Title, _set_Title)
        def _get_MediaFormat(self) -> 'MediaFormat': ...
        MediaFormat = hints.normal_property(_get_MediaFormat)
        def PickupAnimation(self) -> hints.Hresult: ...
        def ApplyAnimation(self) -> hints.Hresult: ...
        def UpgradeMedia(self) -> hints.Hresult: ...
        def MergeShapes(self, MergeCmd: hints.Incomplete, PrimaryShape: hints.Incomplete = ...) -> hints.Hresult: ...
        def _get_IsNarration(self) -> hints.Incomplete: ...
        def _set_IsNarration(self, IsNarration: hints.Incomplete) -> hints.Hresult: ...
        IsNarration = hints.normal_property(_get_IsNarration, _set_IsNarration)
        def _get_InkXML(self) -> hints.Incomplete: ...
        InkXML = hints.normal_property(_get_InkXML)
        def _get_HasInkXML(self) -> hints.Incomplete: ...
        HasInkXML = hints.normal_property(_get_HasInkXML)
        def _get_HasSectionZoom(self) -> hints.Incomplete: ...
        HasSectionZoom = hints.normal_property(_get_HasSectionZoom)
        def _get_GraphicStyle(self) -> hints.Incomplete: ...
        def _set_GraphicStyle(self, GraphicStyle: hints.Incomplete) -> hints.Hresult: ...
        GraphicStyle = hints.normal_property(_get_GraphicStyle, _set_GraphicStyle)
        def _get_Model3D(self) -> 'Model3DFormat': ...
        Model3D = hints.normal_property(_get_Model3D)
        def _get_Decorative(self) -> hints.Incomplete: ...
        def _set_Decorative(self, fDecorative: hints.Incomplete) -> hints.Hresult: ...
        Decorative = hints.normal_property(_get_Decorative, _set_Decorative)
        def ConvertInkToText(self) -> hints.Incomplete: ...
        def _get_Locked(self) -> hints.Incomplete: ...
        def _set_Locked(self, pLocked: hints.Incomplete) -> hints.Hresult: ...
        Locked = hints.normal_property(_get_Locked, _set_Locked)


CanvasShapes._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'plCreator')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Item')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), '_NewEnum')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'AddCallout',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoCalloutType,
            'Type',
        ),
        (['in'], c_float, 'Left'),
        (['in'], c_float, 'Top'),
        (['in'], c_float, 'Width'),
        (['in'], c_float, 'Height'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Callout')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'AddConnector',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoConnectorType,
            'Type',
        ),
        (['in'], c_float, 'BeginX'),
        (['in'], c_float, 'BeginY'),
        (['in'], c_float, 'EndX'),
        (['in'], c_float, 'EndY'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Connector')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'AddCurve',
        (['in'], VARIANT, 'SafeArrayOfPoints'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Curve')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'AddLabel',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTextOrientation,
            'Orientation',
        ),
        (['in'], c_float, 'Left'),
        (['in'], c_float, 'Top'),
        (['in'], c_float, 'Width'),
        (['in'], c_float, 'Height'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Label')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'AddLine',
        (['in'], c_float, 'BeginX'),
        (['in'], c_float, 'BeginY'),
        (['in'], c_float, 'EndX'),
        (['in'], c_float, 'EndY'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Line')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'AddPicture',
        (['in'], BSTR, 'FileName'),
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'LinkToFile',
        ),
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'SaveWithDocument',
        ),
        (['in'], c_float, 'Left'),
        (['in'], c_float, 'Top'),
        (['in', 'optional'], c_float, 'Width', -1.0),
        (['in', 'optional'], c_float, 'Height', -1.0),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Picture')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'AddPolyline',
        (['in'], VARIANT, 'SafeArrayOfPoints'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Polyline')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'AddShape',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoAutoShapeType,
            'Type',
        ),
        (['in'], c_float, 'Left'),
        (['in'], c_float, 'Top'),
        (['in'], c_float, 'Width'),
        (['in'], c_float, 'Height'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Shape')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'AddTextEffect',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPresetTextEffect,
            'PresetTextEffect',
        ),
        (['in'], BSTR, 'Text'),
        (['in'], BSTR, 'FontName'),
        (['in'], c_float, 'FontSize'),
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'FontBold',
        ),
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'FontItalic',
        ),
        (['in'], c_float, 'Left'),
        (['in'], c_float, 'Top'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'TextEffect')
    ),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'AddTextbox',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTextOrientation,
            'Orientation',
        ),
        (['in'], c_float, 'Left'),
        (['in'], c_float, 'Top'),
        (['in'], c_float, 'Width'),
        (['in'], c_float, 'Height'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Textbox')
    ),
    COMMETHOD(
        [dispid(20)],
        HRESULT,
        'BuildFreeform',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoEditingType,
            'EditingType',
        ),
        (['in'], c_float, 'X1'),
        (['in'], c_float, 'Y1'),
        (
            ['out', 'retval'],
            POINTER(POINTER(FreeformBuilder)),
            'FreeformBuilder',
        )
    ),
    COMMETHOD(
        [dispid(21)],
        HRESULT,
        'Range',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(ShapeRange)), 'Range')
    ),
    COMMETHOD([dispid(22)], HRESULT, 'SelectAll'),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'Background',
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Background')
    ),
]

################################################################
# code template for CanvasShapes implementation
# class CanvasShapes_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return plCreator
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return Count
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return _NewEnum
#
#     def AddCallout(self, Type, Left, Top, Width, Height):
#         '-no docstring-'
#         #return Callout
#
#     def AddConnector(self, Type, BeginX, BeginY, EndX, EndY):
#         '-no docstring-'
#         #return Connector
#
#     def AddCurve(self, SafeArrayOfPoints):
#         '-no docstring-'
#         #return Curve
#
#     def AddLabel(self, Orientation, Left, Top, Width, Height):
#         '-no docstring-'
#         #return Label
#
#     def AddLine(self, BeginX, BeginY, EndX, EndY):
#         '-no docstring-'
#         #return Line
#
#     def AddPicture(self, FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height):
#         '-no docstring-'
#         #return Picture
#
#     def AddPolyline(self, SafeArrayOfPoints):
#         '-no docstring-'
#         #return Polyline
#
#     def AddShape(self, Type, Left, Top, Width, Height):
#         '-no docstring-'
#         #return Shape
#
#     def AddTextEffect(self, PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, Left, Top):
#         '-no docstring-'
#         #return TextEffect
#
#     def AddTextbox(self, Orientation, Left, Top, Width, Height):
#         '-no docstring-'
#         #return Textbox
#
#     def BuildFreeform(self, EditingType, X1, Y1):
#         '-no docstring-'
#         #return FreeformBuilder
#
#     def Range(self, Index):
#         '-no docstring-'
#         #return Range
#
#     def SelectAll(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Background(self):
#         '-no docstring-'
#         #return Background
#

RGBColor._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'RGB',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoRGBType),
            'RGB',
        )
    ),
    COMMETHOD(
        [dispid(0), 'propput'],
        HRESULT,
        'RGB',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoRGBType,
            'RGB',
        )
    ),
]

################################################################
# code template for RGBColor implementation
# class RGBColor_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return RGB
#     def _set(self, RGB):
#         '-no docstring-'
#     RGB = property(_get, _set, doc = _set.__doc__)
#


class SoundFormat(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493473-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def Play(self) -> hints.Hresult: ...
        def Import(self, FileName: hints.Incomplete) -> hints.Hresult: ...
        def Export(self, FileName: hints.Incomplete) -> hints.Incomplete: ...
        def _get_Type(self) -> hints.Incomplete: ...
        Type = hints.normal_property(_get_Type)
        def _get_SourceFullName(self) -> hints.Incomplete: ...
        SourceFullName = hints.normal_property(_get_SourceFullName)


SoundFormat._methods_ = [
    COMMETHOD([dispid(2000)], HRESULT, 'Play'),
    COMMETHOD(
        [dispid(2001)],
        HRESULT,
        'Import',
        (['in'], BSTR, 'FileName')
    ),
    COMMETHOD(
        [dispid(2002)],
        HRESULT,
        'Export',
        (['in'], BSTR, 'FileName'),
        (['out', 'retval'], POINTER(PpSoundFormatType), 'Export')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(PpSoundFormatType), 'Type')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'SourceFullName',
        (['out', 'retval'], POINTER(BSTR), 'SourceFullName')
    ),
]

################################################################
# code template for SoundFormat implementation
# class SoundFormat_Impl(object):
#     def Play(self):
#         '-no docstring-'
#         #return 
#
#     def Import(self, FileName):
#         '-no docstring-'
#         #return 
#
#     def Export(self, FileName):
#         '-no docstring-'
#         #return Export
#
#     @property
#     def Type(self):
#         '-no docstring-'
#         #return Type
#
#     @property
#     def SourceFullName(self):
#         '-no docstring-'
#         #return SourceFullName
#


class TableStyle(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934F5-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Id(self) -> hints.Incomplete: ...
        Id = hints.normal_property(_get_Id)


TableStyle._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Id',
        (['out', 'retval'], POINTER(BSTR), 'Id')
    ),
]

################################################################
# code template for TableStyle implementation
# class TableStyle_Impl(object):
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return Name
#
#     @property
#     def Id(self):
#         '-no docstring-'
#         #return Id
#


class ColorFormat(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493452-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_RGB(self) -> hints.Incomplete: ...
        def _set_RGB(self, RGB: hints.Incomplete) -> hints.Hresult: ...
        RGB = hints.normal_property(_get_RGB, _set_RGB)
        def _get_Type(self) -> hints.Incomplete: ...
        Type = hints.normal_property(_get_Type)
        def _get_SchemeColor(self) -> hints.Incomplete: ...
        def _set_SchemeColor(self, SchemeColor: hints.Incomplete) -> hints.Hresult: ...
        SchemeColor = hints.normal_property(_get_SchemeColor, _set_SchemeColor)
        def _get_TintAndShade(self) -> hints.Incomplete: ...
        def _set_TintAndShade(self, pValue: hints.Incomplete) -> hints.Hresult: ...
        TintAndShade = hints.normal_property(_get_TintAndShade, _set_TintAndShade)
        def _get_ObjectThemeColor(self) -> hints.Incomplete: ...
        def _set_ObjectThemeColor(self, ObjectThemeColor: hints.Incomplete) -> hints.Hresult: ...
        ObjectThemeColor = hints.normal_property(_get_ObjectThemeColor, _set_ObjectThemeColor)
        def _get_Brightness(self) -> hints.Incomplete: ...
        def _set_Brightness(self, Brightness: hints.Incomplete) -> hints.Hresult: ...
        Brightness = hints.normal_property(_get_Brightness, _set_Brightness)


ShadowFormat._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'plCreator')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'IncrementOffsetX',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'IncrementOffsetY',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'ForeColor',
        (['out', 'retval'], POINTER(POINTER(ColorFormat)), 'ForeColor')
    ),
    COMMETHOD(
        [dispid(100), 'propput'],
        HRESULT,
        'ForeColor',
        (['in'], POINTER(ColorFormat), 'ForeColor')
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'Obscured',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Obscured',
        )
    ),
    COMMETHOD(
        [dispid(101), 'propput'],
        HRESULT,
        'Obscured',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Obscured',
        )
    ),
    COMMETHOD(
        [dispid(102), 'propget'],
        HRESULT,
        'OffsetX',
        (['out', 'retval'], POINTER(c_float), 'OffsetX')
    ),
    COMMETHOD(
        [dispid(102), 'propput'],
        HRESULT,
        'OffsetX',
        (['in'], c_float, 'OffsetX')
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'OffsetY',
        (['out', 'retval'], POINTER(c_float), 'OffsetY')
    ),
    COMMETHOD(
        [dispid(103), 'propput'],
        HRESULT,
        'OffsetY',
        (['in'], c_float, 'OffsetY')
    ),
    COMMETHOD(
        [dispid(104), 'propget'],
        HRESULT,
        'Transparency',
        (['out', 'retval'], POINTER(c_float), 'Transparency')
    ),
    COMMETHOD(
        [dispid(104), 'propput'],
        HRESULT,
        'Transparency',
        (['in'], c_float, 'Transparency')
    ),
    COMMETHOD(
        [dispid(105), 'propget'],
        HRESULT,
        'Type',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoShadowType),
            'Type',
        )
    ),
    COMMETHOD(
        [dispid(105), 'propput'],
        HRESULT,
        'Type',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoShadowType,
            'Type',
        )
    ),
    COMMETHOD(
        [dispid(106), 'propget'],
        HRESULT,
        'Visible',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Visible',
        )
    ),
    COMMETHOD(
        [dispid(106), 'propput'],
        HRESULT,
        'Visible',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Visible',
        )
    ),
    COMMETHOD(
        [dispid(107), 'propget'],
        HRESULT,
        'Style',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoShadowStyle),
            'ShadowStyle',
        )
    ),
    COMMETHOD(
        [dispid(107), 'propput'],
        HRESULT,
        'Style',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoShadowStyle,
            'ShadowStyle',
        )
    ),
    COMMETHOD(
        [dispid(108), 'propget'],
        HRESULT,
        'Blur',
        (['out', 'retval'], POINTER(c_float), 'Blur')
    ),
    COMMETHOD(
        [dispid(108), 'propput'],
        HRESULT,
        'Blur',
        (['in'], c_float, 'Blur')
    ),
    COMMETHOD(
        [dispid(109), 'propget'],
        HRESULT,
        'Size',
        (['out', 'retval'], POINTER(c_float), 'Size')
    ),
    COMMETHOD(
        [dispid(109), 'propput'],
        HRESULT,
        'Size',
        (['in'], c_float, 'Size')
    ),
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'RotateWithShape',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'RotateWithShape',
        )
    ),
    COMMETHOD(
        [dispid(110), 'propput'],
        HRESULT,
        'RotateWithShape',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'RotateWithShape',
        )
    ),
]

################################################################
# code template for ShadowFormat implementation
# class ShadowFormat_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return plCreator
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def IncrementOffsetX(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def IncrementOffsetY(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return ForeColor
#     def _set(self, ForeColor):
#         '-no docstring-'
#     ForeColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Obscured
#     def _set(self, Obscured):
#         '-no docstring-'
#     Obscured = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return OffsetX
#     def _set(self, OffsetX):
#         '-no docstring-'
#     OffsetX = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return OffsetY
#     def _set(self, OffsetY):
#         '-no docstring-'
#     OffsetY = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Transparency
#     def _set(self, Transparency):
#         '-no docstring-'
#     Transparency = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Type
#     def _set(self, Type):
#         '-no docstring-'
#     Type = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Visible
#     def _set(self, Visible):
#         '-no docstring-'
#     Visible = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ShadowStyle
#     def _set(self, ShadowStyle):
#         '-no docstring-'
#     Style = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Blur
#     def _set(self, Blur):
#         '-no docstring-'
#     Blur = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Size
#     def _set(self, Size):
#         '-no docstring-'
#     Size = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RotateWithShape
#     def _set(self, RotateWithShape):
#         '-no docstring-'
#     RotateWithShape = property(_get, _set, doc = _set.__doc__)
#

AddIn._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'FullName',
        (['out', 'retval'], POINTER(BSTR), 'FullName')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'Path',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'Registered',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Registered',
        )
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'Registered',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Registered',
        )
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'AutoLoad',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'AutoLoad',
        )
    ),
    COMMETHOD(
        [dispid(2007), 'propput'],
        HRESULT,
        'AutoLoad',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'AutoLoad',
        )
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'Loaded',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Loaded',
        )
    ),
    COMMETHOD(
        [dispid(2008), 'propput'],
        HRESULT,
        'Loaded',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Loaded',
        )
    ),
    COMMETHOD(
        [dispid(2009), 'hidden', 'propget'],
        HRESULT,
        'DisplayAlerts',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'DisplayAlerts',
        )
    ),
    COMMETHOD(
        [dispid(2009), 'hidden', 'propput'],
        HRESULT,
        'DisplayAlerts',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'DisplayAlerts',
        )
    ),
    COMMETHOD(
        [dispid(2010), 'hidden', 'propget'],
        HRESULT,
        'RegisteredInHKLM',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'RegisteredInHKLM',
        )
    ),
]

################################################################
# code template for AddIn implementation
# class AddIn_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def FullName(self):
#         '-no docstring-'
#         #return FullName
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return Name
#
#     @property
#     def Path(self):
#         '-no docstring-'
#         #return Path
#
#     def _get(self):
#         '-no docstring-'
#         #return Registered
#     def _set(self, Registered):
#         '-no docstring-'
#     Registered = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return AutoLoad
#     def _set(self, AutoLoad):
#         '-no docstring-'
#     AutoLoad = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Loaded
#     def _set(self, Loaded):
#         '-no docstring-'
#     Loaded = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return DisplayAlerts
#     def _set(self, DisplayAlerts):
#         '-no docstring-'
#     DisplayAlerts = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def RegisteredInHKLM(self):
#         '-no docstring-'
#         #return RegisteredInHKLM
#

MediaBookmark._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Index',
        (['out', 'retval'], POINTER(c_int), 'Index')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Position',
        (['out', 'retval'], POINTER(c_int), 'Position')
    ),
    COMMETHOD([dispid(2004)], HRESULT, 'Delete'),
]

################################################################
# code template for MediaBookmark implementation
# class MediaBookmark_Impl(object):
#     @property
#     def Index(self):
#         '-no docstring-'
#         #return Index
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return Name
#
#     @property
#     def Position(self):
#         '-no docstring-'
#         #return Position
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#


class Guides(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{1641E775-2277-46DE-A06D-8C49C3C5D5E7}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Item(self, Index: hints.Incomplete) -> 'Guide': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def Add(self, Orientation: hints.Incomplete, Position: hints.Incomplete) -> 'Guide': ...


class Guide(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{3D2F865B-E2DB-4896-BC35-6A006DF896DC}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Delete(self) -> hints.Hresult: ...
        def _get_Orientation(self) -> hints.Incomplete: ...
        Orientation = hints.normal_property(_get_Orientation)
        def _get_Position(self) -> hints.Incomplete: ...
        def _set_Position(self, Position: hints.Incomplete) -> hints.Hresult: ...
        Position = hints.normal_property(_get_Position, _set_Position)
        def _get_Color(self) -> 'ColorFormat': ...
        Color = hints.normal_property(_get_Color)



Guides._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(Guide)), 'Item')
    ),
    COMMETHOD(
        [dispid(2003)],
        HRESULT,
        'Add',
        (['in'], PpGuideOrientation, 'Orientation'),
        (['in'], c_float, 'Position'),
        (['out', 'retval'], POINTER(POINTER(Guide)), 'Add')
    ),
]

################################################################
# code template for Guides implementation
# class Guides_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     def Add(self, Orientation, Position):
#         '-no docstring-'
#         #return Add
#


class TabStop(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493494-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Type(self) -> hints.Incomplete: ...
        def _set_Type(self, Type: hints.Incomplete) -> hints.Hresult: ...
        Type = hints.normal_property(_get_Type, _set_Type)
        def _get_Position(self) -> hints.Incomplete: ...
        def _set_Position(self, Position: hints.Incomplete) -> hints.Hresult: ...
        Position = hints.normal_property(_get_Position, _set_Position)
        def Clear(self) -> hints.Hresult: ...


TabStops._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(TabStop)), 'Item')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'DefaultSpacing',
        (['out', 'retval'], POINTER(c_float), 'DefaultSpacing')
    ),
    COMMETHOD(
        [dispid(2003), 'propput'],
        HRESULT,
        'DefaultSpacing',
        (['in'], c_float, 'DefaultSpacing')
    ),
    COMMETHOD(
        [dispid(2004)],
        HRESULT,
        'Add',
        (['in'], PpTabStopType, 'Type'),
        (['in'], c_float, 'Position'),
        (['out', 'retval'], POINTER(POINTER(TabStop)), 'Add')
    ),
]

################################################################
# code template for TabStops implementation
# class TabStops_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     def _get(self):
#         '-no docstring-'
#         #return DefaultSpacing
#     def _set(self, DefaultSpacing):
#         '-no docstring-'
#     DefaultSpacing = property(_get, _set, doc = _set.__doc__)
#
#     def Add(self, Type, Position):
#         '-no docstring-'
#         #return Add
#


class Presentations(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{91493462-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Item(self, Index: hints.Incomplete) -> hints.Annotated['_Presentation', hints.FirstComItfOf['Presentation']]: ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def Add(self, WithWindow: hints.Incomplete = ...) -> hints.Annotated['_Presentation', hints.FirstComItfOf['Presentation']]: ...
        def OpenOld(self, FileName: hints.Incomplete, ReadOnly: hints.Incomplete = ..., Untitled: hints.Incomplete = ..., WithWindow: hints.Incomplete = ...) -> hints.Annotated['_Presentation', hints.FirstComItfOf['Presentation']]: ...
        def Open(self, FileName: hints.Incomplete, ReadOnly: hints.Incomplete = ..., Untitled: hints.Incomplete = ..., WithWindow: hints.Incomplete = ...) -> hints.Annotated['_Presentation', hints.FirstComItfOf['Presentation']]: ...
        def CheckOut(self, FileName: hints.Incomplete) -> hints.Hresult: ...
        def CanCheckOut(self, FileName: hints.Incomplete) -> hints.Incomplete: ...
        def Open2007(self, FileName: hints.Incomplete, ReadOnly: hints.Incomplete = ..., Untitled: hints.Incomplete = ..., WithWindow: hints.Incomplete = ..., OpenAndRepair: hints.Incomplete = ...) -> hints.Annotated['_Presentation', hints.FirstComItfOf['Presentation']]: ...


class DocumentWindows(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{91493455-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Item(self, Index: hints.Incomplete) -> 'DocumentWindow': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def Arrange(self, arrangeStyle: hints.Incomplete = ...) -> hints.Hresult: ...


class DocumentWindow(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493457-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Selection(self) -> 'Selection': ...
        Selection = hints.normal_property(_get_Selection)
        def _get_View(self) -> 'View': ...
        View = hints.normal_property(_get_View)
        def _get_Presentation(self) -> hints.Annotated['_Presentation', hints.FirstComItfOf['Presentation']]: ...
        Presentation = hints.normal_property(_get_Presentation)
        def _get_ViewType(self) -> hints.Incomplete: ...
        def _set_ViewType(self, ViewType: hints.Incomplete) -> hints.Hresult: ...
        ViewType = hints.normal_property(_get_ViewType, _set_ViewType)
        def _get_BlackAndWhite(self) -> hints.Incomplete: ...
        def _set_BlackAndWhite(self, BlackAndWhite: hints.Incomplete) -> hints.Hresult: ...
        BlackAndWhite = hints.normal_property(_get_BlackAndWhite, _set_BlackAndWhite)
        def _get_Active(self) -> hints.Incomplete: ...
        Active = hints.normal_property(_get_Active)
        def _get_WindowState(self) -> hints.Incomplete: ...
        def _set_WindowState(self, WindowState: hints.Incomplete) -> hints.Hresult: ...
        WindowState = hints.normal_property(_get_WindowState, _set_WindowState)
        def _get_Caption(self) -> hints.Incomplete: ...
        Caption = hints.normal_property(_get_Caption)
        def _get_Left(self) -> hints.Incomplete: ...
        def _set_Left(self, Left: hints.Incomplete) -> hints.Hresult: ...
        Left = hints.normal_property(_get_Left, _set_Left)
        def _get_Top(self) -> hints.Incomplete: ...
        def _set_Top(self, Top: hints.Incomplete) -> hints.Hresult: ...
        Top = hints.normal_property(_get_Top, _set_Top)
        def _get_Width(self) -> hints.Incomplete: ...
        def _set_Width(self, Width: hints.Incomplete) -> hints.Hresult: ...
        Width = hints.normal_property(_get_Width, _set_Width)
        def _get_Height(self) -> hints.Incomplete: ...
        def _set_Height(self, Height: hints.Incomplete) -> hints.Hresult: ...
        Height = hints.normal_property(_get_Height, _set_Height)
        def FitToPage(self) -> hints.Hresult: ...
        def Activate(self) -> hints.Hresult: ...
        def LargeScroll(self, Down: hints.Incomplete = ..., Up: hints.Incomplete = ..., ToRight: hints.Incomplete = ..., ToLeft: hints.Incomplete = ...) -> hints.Hresult: ...
        def SmallScroll(self, Down: hints.Incomplete = ..., Up: hints.Incomplete = ..., ToRight: hints.Incomplete = ..., ToLeft: hints.Incomplete = ...) -> hints.Hresult: ...
        def NewWindow(self) -> 'DocumentWindow': ...
        def Close(self) -> hints.Hresult: ...
        def _get_HWND(self) -> hints.Incomplete: ...
        HWND = hints.normal_property(_get_HWND)
        def _get_ActivePane(self) -> 'Pane': ...
        ActivePane = hints.normal_property(_get_ActivePane)
        def _get_Panes(self) -> 'Panes': ...
        Panes = hints.normal_property(_get_Panes)
        def _get_SplitVertical(self) -> hints.Incomplete: ...
        def _set_SplitVertical(self, SplitVertical: hints.Incomplete) -> hints.Hresult: ...
        SplitVertical = hints.normal_property(_get_SplitVertical, _set_SplitVertical)
        def _get_SplitHorizontal(self) -> hints.Incomplete: ...
        def _set_SplitHorizontal(self, SplitHorizontal: hints.Incomplete) -> hints.Hresult: ...
        SplitHorizontal = hints.normal_property(_get_SplitHorizontal, _set_SplitHorizontal)
        def RangeFromPoint(self, X: hints.Incomplete, Y: hints.Incomplete) -> hints.Incomplete: ...
        def PointsToScreenPixelsX(self, Points: hints.Incomplete) -> hints.Incomplete: ...
        def PointsToScreenPixelsY(self, Points: hints.Incomplete) -> hints.Incomplete: ...
        def ScrollIntoView(self, Left: hints.Incomplete, Top: hints.Incomplete, Width: hints.Incomplete, Height: hints.Incomplete, Start: hints.Incomplete = ...) -> hints.Hresult: ...
        def IsSectionExpanded(self, sectionIndex: hints.Incomplete) -> hints.Incomplete: ...
        def ExpandSection(self, sectionIndex: hints.Incomplete, Expand: hints.Incomplete) -> hints.Hresult: ...
        def ShowInsertAppDialog(self, Filter: hints.Incomplete) -> hints.Hresult: ...


class Presentation(CoClass):
    _reg_clsid_ = GUID('{91493444-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{91493440-5A91-11CF-8700-00AA0060263B}', 2, 12)


class _Presentation(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{9149349D-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_SlideMaster(self) -> '_Master': ...
        SlideMaster = hints.normal_property(_get_SlideMaster)
        def _get_TitleMaster(self) -> '_Master': ...
        TitleMaster = hints.normal_property(_get_TitleMaster)
        def _get_HasTitleMaster(self) -> hints.Incomplete: ...
        HasTitleMaster = hints.normal_property(_get_HasTitleMaster)
        def AddTitleMaster(self) -> '_Master': ...
        def ApplyTemplate(self, FileName: hints.Incomplete) -> hints.Hresult: ...
        def _get_TemplateName(self) -> hints.Incomplete: ...
        TemplateName = hints.normal_property(_get_TemplateName)
        def _get_NotesMaster(self) -> '_Master': ...
        NotesMaster = hints.normal_property(_get_NotesMaster)
        def _get_HandoutMaster(self) -> '_Master': ...
        HandoutMaster = hints.normal_property(_get_HandoutMaster)
        def _get_Slides(self) -> 'Slides': ...
        Slides = hints.normal_property(_get_Slides)
        def _get_PageSetup(self) -> 'PageSetup': ...
        PageSetup = hints.normal_property(_get_PageSetup)
        def _get_ColorSchemes(self) -> 'ColorSchemes': ...
        ColorSchemes = hints.normal_property(_get_ColorSchemes)
        def _get_ExtraColors(self) -> 'ExtraColors': ...
        ExtraColors = hints.normal_property(_get_ExtraColors)
        def _get_SlideShowSettings(self) -> 'SlideShowSettings': ...
        SlideShowSettings = hints.normal_property(_get_SlideShowSettings)
        def _get_Fonts(self) -> 'Fonts': ...
        Fonts = hints.normal_property(_get_Fonts)
        def _get_Windows(self) -> 'DocumentWindows': ...
        Windows = hints.normal_property(_get_Windows)
        def _get_Tags(self) -> 'Tags': ...
        Tags = hints.normal_property(_get_Tags)
        def _get_DefaultShape(self) -> 'Shape': ...
        DefaultShape = hints.normal_property(_get_DefaultShape)
        def _get_BuiltInDocumentProperties(self) -> hints.Incomplete: ...
        BuiltInDocumentProperties = hints.normal_property(_get_BuiltInDocumentProperties)
        def _get_CustomDocumentProperties(self) -> hints.Incomplete: ...
        CustomDocumentProperties = hints.normal_property(_get_CustomDocumentProperties)
        def _get_VBProject(self) -> hints.Incomplete: ...
        VBProject = hints.normal_property(_get_VBProject)
        def _get_ReadOnly(self) -> hints.Incomplete: ...
        ReadOnly = hints.normal_property(_get_ReadOnly)
        def _get_FullName(self) -> hints.Incomplete: ...
        FullName = hints.normal_property(_get_FullName)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Path(self) -> hints.Incomplete: ...
        Path = hints.normal_property(_get_Path)
        def _get_Saved(self) -> hints.Incomplete: ...
        def _set_Saved(self, Saved: hints.Incomplete) -> hints.Hresult: ...
        Saved = hints.normal_property(_get_Saved, _set_Saved)
        def _get_LayoutDirection(self) -> hints.Incomplete: ...
        def _set_LayoutDirection(self, LayoutDirection: hints.Incomplete) -> hints.Hresult: ...
        LayoutDirection = hints.normal_property(_get_LayoutDirection, _set_LayoutDirection)
        def NewWindow(self) -> 'DocumentWindow': ...
        def FollowHyperlink(self, Address: hints.Incomplete, SubAddress: hints.Incomplete = ..., NewWindow: hints.Incomplete = ..., AddHistory: hints.Incomplete = ..., ExtraInfo: hints.Incomplete = ..., Method: hints.Incomplete = ..., HeaderInfo: hints.Incomplete = ...) -> hints.Hresult: ...
        def AddToFavorites(self) -> hints.Hresult: ...
        def Unused(self) -> hints.Hresult: ...
        def _get_PrintOptions(self) -> 'PrintOptions': ...
        PrintOptions = hints.normal_property(_get_PrintOptions)
        def PrintOut(self, From: hints.Incomplete = ..., To: hints.Incomplete = ..., PrintToFile: hints.Incomplete = ..., Copies: hints.Incomplete = ..., Collate: hints.Incomplete = ...) -> hints.Hresult: ...
        def Save(self) -> hints.Hresult: ...
        def SaveAs(self, FileName: hints.Incomplete, FileFormat: hints.Incomplete = ..., EmbedTrueTypeFonts: hints.Incomplete = ...) -> hints.Hresult: ...
        def SaveCopyAs(self, FileName: hints.Incomplete, FileFormat: hints.Incomplete = ..., EmbedTrueTypeFonts: hints.Incomplete = ...) -> hints.Hresult: ...
        def Export(self, Path: hints.Incomplete, FilterName: hints.Incomplete, ScaleWidth: hints.Incomplete = ..., ScaleHeight: hints.Incomplete = ...) -> hints.Hresult: ...
        def Close(self) -> hints.Hresult: ...
        def SetUndoText(self, Text: hints.Incomplete) -> hints.Hresult: ...
        def _get_Container(self) -> hints.Incomplete: ...
        Container = hints.normal_property(_get_Container)
        def _get_DisplayComments(self) -> hints.Incomplete: ...
        def _set_DisplayComments(self, DisplayComments: hints.Incomplete) -> hints.Hresult: ...
        DisplayComments = hints.normal_property(_get_DisplayComments, _set_DisplayComments)
        def _get_FarEastLineBreakLevel(self) -> hints.Incomplete: ...
        def _set_FarEastLineBreakLevel(self, FarEastLineBreakLevel: hints.Incomplete) -> hints.Hresult: ...
        FarEastLineBreakLevel = hints.normal_property(_get_FarEastLineBreakLevel, _set_FarEastLineBreakLevel)
        def _get_NoLineBreakBefore(self) -> hints.Incomplete: ...
        def _set_NoLineBreakBefore(self, NoLineBreakBefore: hints.Incomplete) -> hints.Hresult: ...
        NoLineBreakBefore = hints.normal_property(_get_NoLineBreakBefore, _set_NoLineBreakBefore)
        def _get_NoLineBreakAfter(self) -> hints.Incomplete: ...
        def _set_NoLineBreakAfter(self, NoLineBreakAfter: hints.Incomplete) -> hints.Hresult: ...
        NoLineBreakAfter = hints.normal_property(_get_NoLineBreakAfter, _set_NoLineBreakAfter)
        def UpdateLinks(self) -> hints.Hresult: ...
        def _get_SlideShowWindow(self) -> 'SlideShowWindow': ...
        SlideShowWindow = hints.normal_property(_get_SlideShowWindow)
        def _get_FarEastLineBreakLanguage(self) -> hints.Incomplete: ...
        def _set_FarEastLineBreakLanguage(self, FarEastLineBreakLanguage: hints.Incomplete) -> hints.Hresult: ...
        FarEastLineBreakLanguage = hints.normal_property(_get_FarEastLineBreakLanguage, _set_FarEastLineBreakLanguage)
        def WebPagePreview(self) -> hints.Hresult: ...
        def _get_DefaultLanguageID(self) -> hints.Incomplete: ...
        def _set_DefaultLanguageID(self, DefaultLanguageID: hints.Incomplete) -> hints.Hresult: ...
        DefaultLanguageID = hints.normal_property(_get_DefaultLanguageID, _set_DefaultLanguageID)
        def _get_CommandBars(self) -> hints.Incomplete: ...
        CommandBars = hints.normal_property(_get_CommandBars)
        def _get_PublishObjects(self) -> 'PublishObjects': ...
        PublishObjects = hints.normal_property(_get_PublishObjects)
        def _get_WebOptions(self) -> 'WebOptions': ...
        WebOptions = hints.normal_property(_get_WebOptions)
        def _get_HTMLProject(self) -> hints.Incomplete: ...
        HTMLProject = hints.normal_property(_get_HTMLProject)
        def ReloadAs(self, cp: hints.Incomplete) -> hints.Hresult: ...
        def MakeIntoTemplate(self, IsDesignTemplate: hints.Incomplete) -> hints.Hresult: ...
        def _get_EnvelopeVisible(self) -> hints.Incomplete: ...
        def _set_EnvelopeVisible(self, EnvelopeVisible: hints.Incomplete) -> hints.Hresult: ...
        EnvelopeVisible = hints.normal_property(_get_EnvelopeVisible, _set_EnvelopeVisible)
        def sblt(self, s: hints.Incomplete) -> hints.Hresult: ...
        def _get_VBASigned(self) -> hints.Incomplete: ...
        VBASigned = hints.normal_property(_get_VBASigned)
        def _get_SnapToGrid(self) -> hints.Incomplete: ...
        def _set_SnapToGrid(self, SnapToGrid: hints.Incomplete) -> hints.Hresult: ...
        SnapToGrid = hints.normal_property(_get_SnapToGrid, _set_SnapToGrid)
        def _get_GridDistance(self) -> hints.Incomplete: ...
        def _set_GridDistance(self, GridDistance: hints.Incomplete) -> hints.Hresult: ...
        GridDistance = hints.normal_property(_get_GridDistance, _set_GridDistance)
        def _get_Designs(self) -> 'Designs': ...
        Designs = hints.normal_property(_get_Designs)
        def Merge(self, Path: hints.Incomplete) -> hints.Hresult: ...
        def CheckIn(self, SaveChanges: hints.Incomplete = ..., Comments: hints.Incomplete = ..., MakePublic: hints.Incomplete = ...) -> hints.Hresult: ...
        def CanCheckIn(self) -> hints.Incomplete: ...
        def _get_Signatures(self) -> hints.Incomplete: ...
        Signatures = hints.normal_property(_get_Signatures)
        def _get_RemovePersonalInformation(self) -> hints.Incomplete: ...
        def _set_RemovePersonalInformation(self, RemovePersonalInformation: hints.Incomplete) -> hints.Hresult: ...
        RemovePersonalInformation = hints.normal_property(_get_RemovePersonalInformation, _set_RemovePersonalInformation)
        def SendForReview(self, Recipients: hints.Incomplete = ..., Subject: hints.Incomplete = ..., ShowMessage: hints.Incomplete = ..., IncludeAttachment: hints.Incomplete = ...) -> hints.Hresult: ...
        def ReplyWithChanges(self, ShowMessage: hints.Incomplete = ...) -> hints.Hresult: ...
        def EndReview(self) -> hints.Hresult: ...
        def _get_HasRevisionInfo(self) -> hints.Incomplete: ...
        HasRevisionInfo = hints.normal_property(_get_HasRevisionInfo)
        def AddBaseline(self, FileName: hints.Incomplete = ...) -> hints.Hresult: ...
        def RemoveBaseline(self) -> hints.Hresult: ...
        def _get_PasswordEncryptionProvider(self) -> hints.Incomplete: ...
        PasswordEncryptionProvider = hints.normal_property(_get_PasswordEncryptionProvider)
        def _get_PasswordEncryptionAlgorithm(self) -> hints.Incomplete: ...
        PasswordEncryptionAlgorithm = hints.normal_property(_get_PasswordEncryptionAlgorithm)
        def _get_PasswordEncryptionKeyLength(self) -> hints.Incomplete: ...
        PasswordEncryptionKeyLength = hints.normal_property(_get_PasswordEncryptionKeyLength)
        def _get_PasswordEncryptionFileProperties(self) -> hints.Incomplete: ...
        PasswordEncryptionFileProperties = hints.normal_property(_get_PasswordEncryptionFileProperties)
        def SetPasswordEncryptionOptions(self, PasswordEncryptionProvider: hints.Incomplete, PasswordEncryptionAlgorithm: hints.Incomplete, PasswordEncryptionKeyLength: hints.Incomplete, PasswordEncryptionFileProperties: hints.Incomplete) -> hints.Hresult: ...
        def _get_Password(self) -> hints.Incomplete: ...
        def _set_Password(self, Password: hints.Incomplete) -> hints.Hresult: ...
        Password = hints.normal_property(_get_Password, _set_Password)
        def _get_WritePassword(self) -> hints.Incomplete: ...
        def _set_WritePassword(self, WritePassword: hints.Incomplete) -> hints.Hresult: ...
        WritePassword = hints.normal_property(_get_WritePassword, _set_WritePassword)
        def _get_Permission(self) -> hints.Incomplete: ...
        Permission = hints.normal_property(_get_Permission)
        def _get_SharedWorkspace(self) -> hints.Incomplete: ...
        SharedWorkspace = hints.normal_property(_get_SharedWorkspace)
        def _get_Sync(self) -> hints.Incomplete: ...
        Sync = hints.normal_property(_get_Sync)
        def SendFaxOverInternet(self, Recipients: hints.Incomplete = ..., Subject: hints.Incomplete = ..., ShowMessage: hints.Incomplete = ...) -> hints.Hresult: ...
        def _get_DocumentLibraryVersions(self) -> hints.Incomplete: ...
        DocumentLibraryVersions = hints.normal_property(_get_DocumentLibraryVersions)
        def _get_ContentTypeProperties(self) -> hints.Incomplete: ...
        ContentTypeProperties = hints.normal_property(_get_ContentTypeProperties)
        def _get_SectionCount(self) -> hints.Incomplete: ...
        SectionCount = hints.normal_property(_get_SectionCount)
        def _get_HasSections(self) -> hints.Incomplete: ...
        HasSections = hints.normal_property(_get_HasSections)
        def NewSectionAfter(self, Index: hints.Incomplete, AfterSlide: hints.Incomplete, sectionTitle: hints.Incomplete) -> hints.Incomplete: ...
        def DeleteSection(self, Index: hints.Incomplete) -> hints.Hresult: ...
        def DisableSections(self) -> hints.Hresult: ...
        def sectionTitle(self, Index: hints.Incomplete) -> hints.Incomplete: ...
        def RemoveDocumentInformation(self, Type: hints.Incomplete) -> hints.Hresult: ...
        def CheckInWithVersion(self, SaveChanges: hints.Incomplete = ..., Comments: hints.Incomplete = ..., MakePublic: hints.Incomplete = ..., VersionType: hints.Incomplete = ...) -> hints.Hresult: ...
        def ExportAsFixedFormat(self, Path: hints.Incomplete, FixedFormatType: hints.Incomplete, Intent: hints.Incomplete = ..., FrameSlides: hints.Incomplete = ..., HandoutOrder: hints.Incomplete = ..., OutputType: hints.Incomplete = ..., PrintHiddenSlides: hints.Incomplete = ..., PrintRange: hints.Incomplete = ..., RangeType: hints.Incomplete = ..., SlideShowName: hints.Incomplete = ..., IncludeDocProperties: hints.Incomplete = ..., KeepIRMSettings: hints.Incomplete = ..., DocStructureTags: hints.Incomplete = ..., BitmapMissingFonts: hints.Incomplete = ..., UseISO19005_1: hints.Incomplete = ..., ExternalExporter: hints.Incomplete = ...) -> hints.Hresult: ...
        def _get_ServerPolicy(self) -> hints.Incomplete: ...
        ServerPolicy = hints.normal_property(_get_ServerPolicy)
        def GetWorkflowTasks(self) -> hints.Incomplete: ...
        def GetWorkflowTemplates(self) -> hints.Incomplete: ...
        def LockServerFile(self) -> hints.Hresult: ...
        def _get_DocumentInspectors(self) -> hints.Incomplete: ...
        DocumentInspectors = hints.normal_property(_get_DocumentInspectors)
        def _get_HasVBProject(self) -> hints.Incomplete: ...
        HasVBProject = hints.normal_property(_get_HasVBProject)
        def _get_CustomXMLParts(self) -> hints.Incomplete: ...
        CustomXMLParts = hints.normal_property(_get_CustomXMLParts)
        def _get_Final(self) -> hints.Incomplete: ...
        def _set_Final(self, Final: hints.Incomplete) -> hints.Hresult: ...
        Final = hints.normal_property(_get_Final, _set_Final)
        def ApplyTheme(self, themeName: hints.Incomplete) -> hints.Hresult: ...
        def _get_CustomerData(self) -> 'CustomerData': ...
        CustomerData = hints.normal_property(_get_CustomerData)
        def _get_Research(self) -> 'Research': ...
        Research = hints.normal_property(_get_Research)
        def PublishSlides(self, SlideLibraryUrl: hints.Incomplete, Overwrite: hints.Incomplete = ..., UseSlideOrder: hints.Incomplete = ...) -> hints.Hresult: ...
        def _get_EncryptionProvider(self) -> hints.Incomplete: ...
        def _set_EncryptionProvider(self, EncryptionProvider: hints.Incomplete) -> hints.Hresult: ...
        EncryptionProvider = hints.normal_property(_get_EncryptionProvider, _set_EncryptionProvider)
        def Convert(self) -> hints.Hresult: ...
        def _get_SectionProperties(self) -> 'SectionProperties': ...
        SectionProperties = hints.normal_property(_get_SectionProperties)
        def _get_Coauthoring(self) -> 'Coauthoring': ...
        Coauthoring = hints.normal_property(_get_Coauthoring)
        def MergeWithBaseline(self, withPresentation: hints.Incomplete, baselinePresentation: hints.Incomplete) -> hints.Hresult: ...
        def _get_InMergeMode(self) -> hints.Incomplete: ...
        InMergeMode = hints.normal_property(_get_InMergeMode)
        def AcceptAll(self) -> hints.Hresult: ...
        def RejectAll(self) -> hints.Hresult: ...
        def EnsureAllMediaUpgraded(self) -> hints.Hresult: ...
        def _get_Broadcast(self) -> 'Broadcast': ...
        Broadcast = hints.normal_property(_get_Broadcast)
        def _get_HasNotesMaster(self) -> hints.Incomplete: ...
        HasNotesMaster = hints.normal_property(_get_HasNotesMaster)
        def _get_HasHandoutMaster(self) -> hints.Incomplete: ...
        HasHandoutMaster = hints.normal_property(_get_HasHandoutMaster)
        def Convert2(self, FileName: hints.Incomplete) -> hints.Hresult: ...
        def _get_CreateVideoStatus(self) -> hints.Incomplete: ...
        CreateVideoStatus = hints.normal_property(_get_CreateVideoStatus)
        def CreateVideo(self, FileName: hints.Incomplete, UseTimingsAndNarrations: hints.Incomplete = ..., DefaultSlideDuration: hints.Incomplete = ..., VertResolution: hints.Incomplete = ..., FramesPerSecond: hints.Incomplete = ..., Quality: hints.Incomplete = ...) -> hints.Hresult: ...
        def ApplyTemplate2(self, FileName: hints.Incomplete, VariantGUID: hints.Incomplete) -> hints.Hresult: ...
        def _get_ChartDataPointTrack(self) -> hints.Incomplete: ...
        def _set_ChartDataPointTrack(self, pfChartDataPointTrack: hints.Incomplete) -> hints.Hresult: ...
        ChartDataPointTrack = hints.normal_property(_get_ChartDataPointTrack, _set_ChartDataPointTrack)
        def ExportAsFixedFormat2(self, Path: hints.Incomplete, FixedFormatType: hints.Incomplete, Intent: hints.Incomplete = ..., FrameSlides: hints.Incomplete = ..., HandoutOrder: hints.Incomplete = ..., OutputType: hints.Incomplete = ..., PrintHiddenSlides: hints.Incomplete = ..., PrintRange: hints.Incomplete = ..., RangeType: hints.Incomplete = ..., SlideShowName: hints.Incomplete = ..., IncludeDocProperties: hints.Incomplete = ..., KeepIRMSettings: hints.Incomplete = ..., DocStructureTags: hints.Incomplete = ..., BitmapMissingFonts: hints.Incomplete = ..., UseISO19005_1: hints.Incomplete = ..., IncludeMarkup: hints.Incomplete = ..., ExternalExporter: hints.Incomplete = ...) -> hints.Hresult: ...
        def _get_Guides(self) -> 'Guides': ...
        Guides = hints.normal_property(_get_Guides)
        def _get_WorkIdentity(self) -> hints.Incomplete: ...
        def _set_WorkIdentity(self, WorkIdentity: hints.Incomplete) -> hints.Hresult: ...
        WorkIdentity = hints.normal_property(_get_WorkIdentity, _set_WorkIdentity)
        def _get_AutoSaveOn(self) -> hints.Incomplete: ...
        def _set_AutoSaveOn(self, pfAutoSaveOn: hints.Incomplete) -> hints.Hresult: ...
        AutoSaveOn = hints.normal_property(_get_AutoSaveOn, _set_AutoSaveOn)
        def SaveCopyAs2(self, FileName: hints.Incomplete, FileFormat: hints.Incomplete = ..., EmbedTrueTypeFonts: hints.Incomplete = ..., ReadOnlyRecommended: hints.Incomplete = ...) -> hints.Hresult: ...
        def _get_ReadOnlyRecommended(self) -> hints.Incomplete: ...
        ReadOnlyRecommended = hints.normal_property(_get_ReadOnlyRecommended)
        def _get_SensitivityLabel(self) -> hints.Incomplete: ...
        SensitivityLabel = hints.normal_property(_get_SensitivityLabel)
        def _get_IsFullyDownloaded(self) -> hints.Incomplete: ...
        IsFullyDownloaded = hints.normal_property(_get_IsFullyDownloaded)
        def ExportAsFixedFormat3(self, Path: hints.Incomplete, FixedFormatType: hints.Incomplete, Intent: hints.Incomplete = ..., FrameSlides: hints.Incomplete = ..., HandoutOrder: hints.Incomplete = ..., OutputType: hints.Incomplete = ..., PrintHiddenSlides: hints.Incomplete = ..., PrintRange: hints.Incomplete = ..., RangeType: hints.Incomplete = ..., SlideShowName: hints.Incomplete = ..., IncludeDocProperties: hints.Incomplete = ..., KeepIRMSettings: hints.Incomplete = ..., DocStructureTags: hints.Incomplete = ..., BitmapMissingFonts: hints.Incomplete = ..., UseISO19005_1: hints.Incomplete = ..., IncludeMarkup: hints.Incomplete = ..., Bookmarks: hints.Incomplete = ..., DocumentMarkup: hints.Incomplete = ..., PromotedHyperlinkShape: hints.Incomplete = ..., ExternalExporter: hints.Incomplete = ...) -> hints.Hresult: ...


class PresEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{91493463-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['hidden']


Presentation._com_interfaces_ = [_Presentation]
Presentation._outgoing_interfaces_ = [PresEvents]


class SlideShowWindows(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{91493456-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Item(self, Index: hints.Incomplete) -> 'SlideShowWindow': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)




class DefaultWebOptions(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934CD-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_IncludeNavigation(self) -> hints.Incomplete: ...
        def _set_IncludeNavigation(self, IncludeNavigation: hints.Incomplete) -> hints.Hresult: ...
        IncludeNavigation = hints.normal_property(_get_IncludeNavigation, _set_IncludeNavigation)
        def _get_FrameColors(self) -> hints.Incomplete: ...
        def _set_FrameColors(self, FrameColors: hints.Incomplete) -> hints.Hresult: ...
        FrameColors = hints.normal_property(_get_FrameColors, _set_FrameColors)
        def _get_ResizeGraphics(self) -> hints.Incomplete: ...
        def _set_ResizeGraphics(self, ResizeGraphics: hints.Incomplete) -> hints.Hresult: ...
        ResizeGraphics = hints.normal_property(_get_ResizeGraphics, _set_ResizeGraphics)
        def _get_ShowSlideAnimation(self) -> hints.Incomplete: ...
        def _set_ShowSlideAnimation(self, ShowSlideAnimation: hints.Incomplete) -> hints.Hresult: ...
        ShowSlideAnimation = hints.normal_property(_get_ShowSlideAnimation, _set_ShowSlideAnimation)
        def _get_OrganizeInFolder(self) -> hints.Incomplete: ...
        def _set_OrganizeInFolder(self, OrganizeInFolder: hints.Incomplete) -> hints.Hresult: ...
        OrganizeInFolder = hints.normal_property(_get_OrganizeInFolder, _set_OrganizeInFolder)
        def _get_UseLongFileNames(self) -> hints.Incomplete: ...
        def _set_UseLongFileNames(self, UseLongFileNames: hints.Incomplete) -> hints.Hresult: ...
        UseLongFileNames = hints.normal_property(_get_UseLongFileNames, _set_UseLongFileNames)
        def _get_RelyOnVML(self) -> hints.Incomplete: ...
        def _set_RelyOnVML(self, RelyOnVML: hints.Incomplete) -> hints.Hresult: ...
        RelyOnVML = hints.normal_property(_get_RelyOnVML, _set_RelyOnVML)
        def _get_AllowPNG(self) -> hints.Incomplete: ...
        def _set_AllowPNG(self, AllowPNG: hints.Incomplete) -> hints.Hresult: ...
        AllowPNG = hints.normal_property(_get_AllowPNG, _set_AllowPNG)
        def _get_ScreenSize(self) -> hints.Incomplete: ...
        def _set_ScreenSize(self, ScreenSize: hints.Incomplete) -> hints.Hresult: ...
        ScreenSize = hints.normal_property(_get_ScreenSize, _set_ScreenSize)
        def _get_Encoding(self) -> hints.Incomplete: ...
        def _set_Encoding(self, Encoding: hints.Incomplete) -> hints.Hresult: ...
        Encoding = hints.normal_property(_get_Encoding, _set_Encoding)
        def _get_UpdateLinksOnSave(self) -> hints.Incomplete: ...
        def _set_UpdateLinksOnSave(self, UpdateLinksOnSave: hints.Incomplete) -> hints.Hresult: ...
        UpdateLinksOnSave = hints.normal_property(_get_UpdateLinksOnSave, _set_UpdateLinksOnSave)
        def _get_CheckIfOfficeIsHTMLEditor(self) -> hints.Incomplete: ...
        def _set_CheckIfOfficeIsHTMLEditor(self, CheckIfOfficeIsHTMLEditor: hints.Incomplete) -> hints.Hresult: ...
        CheckIfOfficeIsHTMLEditor = hints.normal_property(_get_CheckIfOfficeIsHTMLEditor, _set_CheckIfOfficeIsHTMLEditor)
        def _get_AlwaysSaveInDefaultEncoding(self) -> hints.Incomplete: ...
        def _set_AlwaysSaveInDefaultEncoding(self, AlwaysSaveInDefaultEncoding: hints.Incomplete) -> hints.Hresult: ...
        AlwaysSaveInDefaultEncoding = hints.normal_property(_get_AlwaysSaveInDefaultEncoding, _set_AlwaysSaveInDefaultEncoding)
        def _get_Fonts(self) -> hints.Incomplete: ...
        Fonts = hints.normal_property(_get_Fonts)
        def _get_FolderSuffix(self) -> hints.Incomplete: ...
        FolderSuffix = hints.normal_property(_get_FolderSuffix)
        def _get_TargetBrowser(self) -> hints.Incomplete: ...
        def _set_TargetBrowser(self, TargetBrowser: hints.Incomplete) -> hints.Hresult: ...
        TargetBrowser = hints.normal_property(_get_TargetBrowser, _set_TargetBrowser)
        def _get_SaveNewWebPagesAsWebArchives(self) -> hints.Incomplete: ...
        def _set_SaveNewWebPagesAsWebArchives(self, SaveNewWebPagesAsWebArchives: hints.Incomplete) -> hints.Hresult: ...
        SaveNewWebPagesAsWebArchives = hints.normal_property(_get_SaveNewWebPagesAsWebArchives, _set_SaveNewWebPagesAsWebArchives)
        def _get_HTMLVersion(self) -> hints.Incomplete: ...
        def _set_HTMLVersion(self, HTMLVersion: hints.Incomplete) -> hints.Hresult: ...
        HTMLVersion = hints.normal_property(_get_HTMLVersion, _set_HTMLVersion)




class AutoCorrect(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934ED-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_DisplayAutoCorrectOptions(self) -> hints.Incomplete: ...
        def _set_DisplayAutoCorrectOptions(self, DisplayAutoCorrectOptions: hints.Incomplete) -> hints.Hresult: ...
        DisplayAutoCorrectOptions = hints.normal_property(_get_DisplayAutoCorrectOptions, _set_DisplayAutoCorrectOptions)
        def _get_DisplayAutoLayoutOptions(self) -> hints.Incomplete: ...
        def _set_DisplayAutoLayoutOptions(self, DisplayAutoLayoutOptions: hints.Incomplete) -> hints.Hresult: ...
        DisplayAutoLayoutOptions = hints.normal_property(_get_DisplayAutoLayoutOptions, _set_DisplayAutoLayoutOptions)


class Options(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934EE-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_DisplayPasteOptions(self) -> hints.Incomplete: ...
        def _set_DisplayPasteOptions(self, DisplayPasteOptions: hints.Incomplete) -> hints.Hresult: ...
        DisplayPasteOptions = hints.normal_property(_get_DisplayPasteOptions, _set_DisplayPasteOptions)
        def _get_DoNotPromptForConvert(self) -> hints.Incomplete: ...
        def _set_DoNotPromptForConvert(self, DoNotPromptForConvert: hints.Incomplete) -> hints.Hresult: ...
        DoNotPromptForConvert = hints.normal_property(_get_DoNotPromptForConvert, _set_DoNotPromptForConvert)
        def _get_ShowCoauthoringMergeChanges(self) -> hints.Incomplete: ...
        def _set_ShowCoauthoringMergeChanges(self, ShowCoauthoringMergeChanges: hints.Incomplete) -> hints.Hresult: ...
        ShowCoauthoringMergeChanges = hints.normal_property(_get_ShowCoauthoringMergeChanges, _set_ShowCoauthoringMergeChanges)


class FileConverters(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A50-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def Item(self, Index: hints.Incomplete) -> 'FileConverter': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)


class ProtectedViewWindows(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{BA72E559-4FF5-48F4-8215-5505F990966F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Item(self, Index: hints.Incomplete) -> 'ProtectedViewWindow': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def Open(self, FileName: hints.Incomplete, ReadPassword: hints.Incomplete = ..., OpenAndRepair: hints.Incomplete = ...) -> 'ProtectedViewWindow': ...


class ProtectedViewWindow(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{BA72E55A-4FF5-48F4-8215-5505F990966F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Presentation(self) -> hints.Annotated['_Presentation', hints.FirstComItfOf['Presentation']]: ...
        Presentation = hints.normal_property(_get_Presentation)
        def _get_Active(self) -> hints.Incomplete: ...
        Active = hints.normal_property(_get_Active)
        def _get_WindowState(self) -> hints.Incomplete: ...
        def _set_WindowState(self, WindowState: hints.Incomplete) -> hints.Hresult: ...
        WindowState = hints.normal_property(_get_WindowState, _set_WindowState)
        def _get_Caption(self) -> hints.Incomplete: ...
        Caption = hints.normal_property(_get_Caption)
        def _get_SourcePath(self) -> hints.Incomplete: ...
        SourcePath = hints.normal_property(_get_SourcePath)
        def _get_SourceName(self) -> hints.Incomplete: ...
        SourceName = hints.normal_property(_get_SourceName)
        def _get_Left(self) -> hints.Incomplete: ...
        def _set_Left(self, Left: hints.Incomplete) -> hints.Hresult: ...
        Left = hints.normal_property(_get_Left, _set_Left)
        def _get_Top(self) -> hints.Incomplete: ...
        def _set_Top(self, Top: hints.Incomplete) -> hints.Hresult: ...
        Top = hints.normal_property(_get_Top, _set_Top)
        def _get_Width(self) -> hints.Incomplete: ...
        def _set_Width(self, Width: hints.Incomplete) -> hints.Hresult: ...
        Width = hints.normal_property(_get_Width, _set_Width)
        def _get_Height(self) -> hints.Incomplete: ...
        def _set_Height(self, Height: hints.Incomplete) -> hints.Hresult: ...
        Height = hints.normal_property(_get_Height, _set_Height)
        def Activate(self) -> hints.Hresult: ...
        def Close(self) -> hints.Hresult: ...
        def Edit(self, ModifyPassword: hints.Incomplete = ...) -> hints.Annotated['_Presentation', hints.FirstComItfOf['Presentation']]: ...
        def _get_HWND(self) -> hints.Incomplete: ...
        HWND = hints.normal_property(_get_HWND)


class ResampleMediaTasks(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{BA72E554-4FF5-48F4-8215-5505F990966F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def Item(self, Index: hints.Incomplete) -> 'ResampleMediaTask': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def Pause(self) -> hints.Hresult: ...
        def Cancel(self) -> hints.Hresult: ...
        def Resume(self) -> hints.Hresult: ...
        def _get_PercentComplete(self) -> hints.Incomplete: ...
        PercentComplete = hints.normal_property(_get_PercentComplete)


class Theme(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{D9D60EB3-D4B4-4991-9C16-75585B3346BB}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_ThemeVariants(self) -> 'ThemeVariants': ...
        ThemeVariants = hints.normal_property(_get_ThemeVariants)


_Application._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Presentations',
        (['out', 'retval'], POINTER(POINTER(Presentations)), 'Presentations')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Windows',
        (['out', 'retval'], POINTER(POINTER(DocumentWindows)), 'Windows')
    ),
    COMMETHOD(
        [dispid(2003), 'hidden', 'propget'],
        HRESULT,
        'Dialogs',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'Dialogs')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'ActiveWindow',
        (['out', 'retval'], POINTER(POINTER(DocumentWindow)), 'ActiveWindow')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'ActivePresentation',
        (
            ['out', 'retval'],
            POINTER(POINTER(Presentation)),
            'ActivePresentation',
        )
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'SlideShowWindows',
        (
            ['out', 'retval'],
            POINTER(POINTER(SlideShowWindows)),
            'SlideShowWindows',
        )
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'CommandBars',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.CommandBars)),
            'CommandBars',
        )
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'Path',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'Caption',
        (['out', 'retval'], POINTER(BSTR), 'Caption')
    ),
    COMMETHOD(
        [dispid(2009), 'propput'],
        HRESULT,
        'Caption',
        (['in'], BSTR, 'Caption')
    ),
    COMMETHOD(
        [dispid(2010), 'hidden', 'propget'],
        HRESULT,
        'Assistant',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.Assistant)),
            'Assistant',
        )
    ),
    COMMETHOD(
        [dispid(2011), 'hidden', 'propget'],
        HRESULT,
        'FileSearch',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.FileSearch)),
            'FileSearch',
        )
    ),
    COMMETHOD(
        [dispid(2012), 'hidden', 'propget'],
        HRESULT,
        'FileFind',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.IFind)),
            'FileFind',
        )
    ),
    COMMETHOD(
        [dispid(2013), 'propget'],
        HRESULT,
        'Build',
        (['out', 'retval'], POINTER(BSTR), 'Build')
    ),
    COMMETHOD(
        [dispid(2014), 'propget'],
        HRESULT,
        'Version',
        (['out', 'retval'], POINTER(BSTR), 'Version')
    ),
    COMMETHOD(
        [dispid(2015), 'propget'],
        HRESULT,
        'OperatingSystem',
        (['out', 'retval'], POINTER(BSTR), 'OperatingSystem')
    ),
    COMMETHOD(
        [dispid(2016), 'propget'],
        HRESULT,
        'ActivePrinter',
        (['out', 'retval'], POINTER(BSTR), 'ActivePrinter')
    ),
    COMMETHOD(
        [dispid(2017), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'Creator')
    ),
    COMMETHOD(
        [dispid(2018), 'propget'],
        HRESULT,
        'AddIns',
        (['out', 'retval'], POINTER(POINTER(AddIns)), 'AddIns')
    ),
    COMMETHOD(
        [dispid(2019), 'propget'],
        HRESULT,
        'VBE',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._0002E157_0000_0000_C000_000000000046_0_5_3.VBE)),
            'VBE',
        )
    ),
    COMMETHOD(
        [dispid(2020)],
        HRESULT,
        'Help',
        (['in', 'optional'], BSTR, 'HelpFile', 'vbapp10.chm'),
        (['in', 'optional'], c_int, 'ContextID', 0)
    ),
    COMMETHOD([dispid(2021)], HRESULT, 'Quit'),
    COMMETHOD(
        [dispid(2022)],
        HRESULT,
        'Run',
        (['in'], BSTR, 'MacroName'),
        (['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'safeArrayOfParams'),
        (['out', 'retval'], POINTER(VARIANT), 'Run')
    ),
    COMMETHOD(
        [dispid(2023), 'hidden'],
        HRESULT,
        'PPFileDialog',
        (['in'], PpFileDialogType, 'Type'),
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'PPFileDialog')
    ),
    COMMETHOD(
        [dispid(2024), 'restricted'],
        HRESULT,
        'LaunchSpelling',
        (['in'], POINTER(DocumentWindow), 'pWindow')
    ),
    COMMETHOD(
        [dispid(2025), 'propget'],
        HRESULT,
        'Left',
        (['out', 'retval'], POINTER(c_float), 'Left')
    ),
    COMMETHOD(
        [dispid(2025), 'propput'],
        HRESULT,
        'Left',
        (['in'], c_float, 'Left')
    ),
    COMMETHOD(
        [dispid(2026), 'propget'],
        HRESULT,
        'Top',
        (['out', 'retval'], POINTER(c_float), 'Top')
    ),
    COMMETHOD(
        [dispid(2026), 'propput'],
        HRESULT,
        'Top',
        (['in'], c_float, 'Top')
    ),
    COMMETHOD(
        [dispid(2027), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_float), 'Width')
    ),
    COMMETHOD(
        [dispid(2027), 'propput'],
        HRESULT,
        'Width',
        (['in'], c_float, 'Width')
    ),
    COMMETHOD(
        [dispid(2028), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_float), 'Height')
    ),
    COMMETHOD(
        [dispid(2028), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_float, 'Height')
    ),
    COMMETHOD(
        [dispid(2029), 'propget'],
        HRESULT,
        'WindowState',
        (['out', 'retval'], POINTER(PpWindowState), 'WindowState')
    ),
    COMMETHOD(
        [dispid(2029), 'propput'],
        HRESULT,
        'WindowState',
        (['in'], PpWindowState, 'WindowState')
    ),
    COMMETHOD(
        [dispid(2030), 'propget'],
        HRESULT,
        'Visible',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Visible',
        )
    ),
    COMMETHOD(
        [dispid(2030), 'propput'],
        HRESULT,
        'Visible',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Visible',
        )
    ),
    COMMETHOD(
        [dispid(2031), 'restricted', 'propget'],
        HRESULT,
        'HWND',
        (['out', 'retval'], POINTER(c_int), 'HWND')
    ),
    COMMETHOD(
        [dispid(2032), 'propget'],
        HRESULT,
        'Active',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Active',
        )
    ),
    COMMETHOD([dispid(2033)], HRESULT, 'Activate'),
    COMMETHOD(
        [dispid(2034), 'hidden', 'propget'],
        HRESULT,
        'AnswerWizard',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.AnswerWizard)),
            'AnswerWizard',
        )
    ),
    COMMETHOD(
        [dispid(2035), 'propget'],
        HRESULT,
        'COMAddIns',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.COMAddIns)),
            'COMAddIns',
        )
    ),
    COMMETHOD(
        [dispid(2036), 'propget'],
        HRESULT,
        'ProductCode',
        (['out', 'retval'], POINTER(BSTR), 'ProductCode')
    ),
    COMMETHOD(
        [dispid(2037), 'hidden', 'propget'],
        HRESULT,
        'DefaultWebOptions',
        (
            ['out', 'retval'],
            POINTER(POINTER(DefaultWebOptions)),
            'DefaultWebOptions',
        )
    ),
    COMMETHOD(
        [dispid(2038), 'propget'],
        HRESULT,
        'LanguageSettings',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.LanguageSettings)),
            'LanguageSettings',
        )
    ),
    COMMETHOD(
        [dispid(2039), 'hidden', 'propget'],
        HRESULT,
        'MsoDebugOptions',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoDebugOptions)),
            'MsoDebugOptions',
        )
    ),
    COMMETHOD(
        [dispid(2040), 'propget'],
        HRESULT,
        'ShowWindowsInTaskbar',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'ShowWindowsInTaskbar',
        )
    ),
    COMMETHOD(
        [dispid(2040), 'propput'],
        HRESULT,
        'ShowWindowsInTaskbar',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'ShowWindowsInTaskbar',
        )
    ),
    COMMETHOD(
        [dispid(2041), 'hidden', 'propget'],
        HRESULT,
        'Marker',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'Marker')
    ),
    COMMETHOD(
        [dispid(2042), 'propget'],
        HRESULT,
        'FeatureInstall',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoFeatureInstall),
            'FeatureInstall',
        )
    ),
    COMMETHOD(
        [dispid(2042), 'propput'],
        HRESULT,
        'FeatureInstall',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoFeatureInstall,
            'FeatureInstall',
        )
    ),
    COMMETHOD(
        [dispid(2043), 'hidden'],
        HRESULT,
        'GetOptionFlag',
        (['in'], c_int, 'Option'),
        (['in', 'optional'], VARIANT_BOOL, 'Persist', False),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'GetOptionFlag')
    ),
    COMMETHOD(
        [dispid(2044), 'hidden'],
        HRESULT,
        'SetOptionFlag',
        (['in'], c_int, 'Option'),
        (['in'], VARIANT_BOOL, 'State'),
        (['in', 'optional'], VARIANT_BOOL, 'Persist', False)
    ),
    COMMETHOD(
        [dispid(2045), 'propget'],
        HRESULT,
        'FileDialog',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoFileDialogType,
            'Type',
        ),
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.FileDialog)),
            'FileDialog',
        )
    ),
    COMMETHOD(
        [dispid(2046), 'propget'],
        HRESULT,
        'DisplayGridLines',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'DisplayGridLines',
        )
    ),
    COMMETHOD(
        [dispid(2046), 'propput'],
        HRESULT,
        'DisplayGridLines',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'DisplayGridLines',
        )
    ),
    COMMETHOD(
        [dispid(2047), 'propget'],
        HRESULT,
        'AutomationSecurity',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoAutomationSecurity),
            'AutomationSecurity',
        )
    ),
    COMMETHOD(
        [dispid(2047), 'propput'],
        HRESULT,
        'AutomationSecurity',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoAutomationSecurity,
            'AutomationSecurity',
        )
    ),
    COMMETHOD(
        [dispid(2048), 'propget'],
        HRESULT,
        'NewPresentation',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.NewFile)),
            'NewPresentation',
        )
    ),
    COMMETHOD(
        [dispid(2049), 'propget'],
        HRESULT,
        'DisplayAlerts',
        (['out', 'retval'], POINTER(PpAlertLevel), 'DisplayAlerts')
    ),
    COMMETHOD(
        [dispid(2049), 'propput'],
        HRESULT,
        'DisplayAlerts',
        (['in'], PpAlertLevel, 'DisplayAlerts')
    ),
    COMMETHOD(
        [dispid(2050), 'propget'],
        HRESULT,
        'ShowStartupDialog',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'ShowStartupDialog',
        )
    ),
    COMMETHOD(
        [dispid(2050), 'propput'],
        HRESULT,
        'ShowStartupDialog',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'ShowStartupDialog',
        )
    ),
    COMMETHOD(
        [dispid(2051), 'hidden'],
        HRESULT,
        'SetPerfMarker',
        (['in'], c_int, 'Marker')
    ),
    COMMETHOD(
        [dispid(2052), 'propget'],
        HRESULT,
        'AutoCorrect',
        (['out', 'retval'], POINTER(POINTER(AutoCorrect)), 'AutoCorrect')
    ),
    COMMETHOD(
        [dispid(2053), 'propget'],
        HRESULT,
        'Options',
        (['out', 'retval'], POINTER(POINTER(Options)), 'Options')
    ),
    COMMETHOD(
        [dispid(2054), 'hidden'],
        HRESULT,
        'LaunchPublishSlidesDialog',
        (['in'], BSTR, 'SlideLibraryUrl')
    ),
    COMMETHOD(
        [dispid(2055), 'hidden'],
        HRESULT,
        'LaunchSendToPPTDialog',
        (['in'], POINTER(VARIANT), 'SlideUrls')
    ),
    COMMETHOD(
        [dispid(2056), 'propget'],
        HRESULT,
        'DisplayDocumentInformationPanel',
        (
            ['out', 'retval'],
            POINTER(VARIANT_BOOL),
            'DisplayDocumentInformationPanel',
        )
    ),
    COMMETHOD(
        [dispid(2056), 'propput'],
        HRESULT,
        'DisplayDocumentInformationPanel',
        (['in'], VARIANT_BOOL, 'DisplayDocumentInformationPanel')
    ),
    COMMETHOD(
        [dispid(2057), 'propget'],
        HRESULT,
        'Assistance',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.IAssistance)),
            'Assistance',
        )
    ),
    COMMETHOD(
        [dispid(2058), 'propget'],
        HRESULT,
        'ActiveEncryptionSession',
        (['out', 'retval'], POINTER(c_int), 'ActiveEncryptionSession')
    ),
    COMMETHOD(
        [dispid(2059), 'propget'],
        HRESULT,
        'FileConverters',
        (['out', 'retval'], POINTER(POINTER(FileConverters)), 'FileConverters')
    ),
    COMMETHOD(
        [dispid(2060), 'propget'],
        HRESULT,
        'SmartArtLayouts',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.SmartArtLayouts)),
            'SmartArtLayouts',
        )
    ),
    COMMETHOD(
        [dispid(2061), 'propget'],
        HRESULT,
        'SmartArtQuickStyles',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.SmartArtQuickStyles)),
            'SmartArtQuickStyles',
        )
    ),
    COMMETHOD(
        [dispid(2062), 'propget'],
        HRESULT,
        'SmartArtColors',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.SmartArtColors)),
            'SmartArtColors',
        )
    ),
    COMMETHOD(
        [dispid(2063), 'propget'],
        HRESULT,
        'ProtectedViewWindows',
        (
            ['out', 'retval'],
            POINTER(POINTER(ProtectedViewWindows)),
            'ProtectedViewWindows',
        )
    ),
    COMMETHOD(
        [dispid(2064), 'propget'],
        HRESULT,
        'ActiveProtectedViewWindow',
        (
            ['out', 'retval'],
            POINTER(POINTER(ProtectedViewWindow)),
            'ActiveProtectedViewWindow',
        )
    ),
    COMMETHOD(
        [dispid(2065), 'propget'],
        HRESULT,
        'IsSandboxed',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'IsSandboxed')
    ),
    COMMETHOD(
        [dispid(2066), 'hidden', 'propget'],
        HRESULT,
        'ResampleMediaTasks',
        (
            ['out', 'retval'],
            POINTER(POINTER(ResampleMediaTasks)),
            'ResampleMediaTasks',
        )
    ),
    COMMETHOD([dispid(2067)], HRESULT, 'StartNewUndoEntry'),
    COMMETHOD(
        [dispid(2068), 'propget'],
        HRESULT,
        'FileValidation',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoFileValidationMode),
            'FileValidation',
        )
    ),
    COMMETHOD(
        [dispid(2068), 'propput'],
        HRESULT,
        'FileValidation',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoFileValidationMode,
            'FileValidation',
        )
    ),
    COMMETHOD(
        [dispid(2069)],
        HRESULT,
        'OpenThemeFile',
        (['in'], BSTR, 'themeFileName'),
        (['out', 'retval'], POINTER(POINTER(Theme)), 'Theme')
    ),
    COMMETHOD(
        [dispid(2070), 'propget'],
        HRESULT,
        'ChartDataPointTrack',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pfChartDataPointTrack')
    ),
    COMMETHOD(
        [dispid(2070), 'propput'],
        HRESULT,
        'ChartDataPointTrack',
        (['in'], VARIANT_BOOL, 'pfChartDataPointTrack')
    ),
    COMMETHOD(
        [dispid(2071), 'propget'],
        HRESULT,
        'DisplayGuides',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'DisplayGridLines',
        )
    ),
    COMMETHOD(
        [dispid(2071), 'propput'],
        HRESULT,
        'DisplayGuides',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'DisplayGridLines',
        )
    ),
    COMMETHOD(
        [dispid(2072), 'hidden', 'propget'],
        HRESULT,
        'DataPrivacyOptions',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.DataPrivacyOptions)),
            'DataPrivacyOptions',
        )
    ),
    COMMETHOD(
        [dispid(2073), 'propget'],
        HRESULT,
        'SensitivityLabelPolicy',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.SensitivityLabelPolicy)),
            'SensitivityLabelPolicy',
        )
    ),
]

################################################################
# code template for _Application implementation
# class _Application_Impl(object):
#     @property
#     def Presentations(self):
#         '-no docstring-'
#         #return Presentations
#
#     @property
#     def Windows(self):
#         '-no docstring-'
#         #return Windows
#
#     @property
#     def Dialogs(self):
#         '-no docstring-'
#         #return Dialogs
#
#     @property
#     def ActiveWindow(self):
#         '-no docstring-'
#         #return ActiveWindow
#
#     @property
#     def ActivePresentation(self):
#         '-no docstring-'
#         #return ActivePresentation
#
#     @property
#     def SlideShowWindows(self):
#         '-no docstring-'
#         #return SlideShowWindows
#
#     @property
#     def CommandBars(self):
#         '-no docstring-'
#         #return CommandBars
#
#     @property
#     def Path(self):
#         '-no docstring-'
#         #return Path
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return Name
#
#     def _get(self):
#         '-no docstring-'
#         #return Caption
#     def _set(self, Caption):
#         '-no docstring-'
#     Caption = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Assistant(self):
#         '-no docstring-'
#         #return Assistant
#
#     @property
#     def FileSearch(self):
#         '-no docstring-'
#         #return FileSearch
#
#     @property
#     def FileFind(self):
#         '-no docstring-'
#         #return FileFind
#
#     @property
#     def Build(self):
#         '-no docstring-'
#         #return Build
#
#     @property
#     def Version(self):
#         '-no docstring-'
#         #return Version
#
#     @property
#     def OperatingSystem(self):
#         '-no docstring-'
#         #return OperatingSystem
#
#     @property
#     def ActivePrinter(self):
#         '-no docstring-'
#         #return ActivePrinter
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return Creator
#
#     @property
#     def AddIns(self):
#         '-no docstring-'
#         #return AddIns
#
#     @property
#     def VBE(self):
#         '-no docstring-'
#         #return VBE
#
#     def Help(self, HelpFile, ContextID):
#         '-no docstring-'
#         #return 
#
#     def Quit(self):
#         '-no docstring-'
#         #return 
#
#     def Run(self, MacroName, safeArrayOfParams):
#         '-no docstring-'
#         #return Run
#
#     def PPFileDialog(self, Type):
#         '-no docstring-'
#         #return PPFileDialog
#
#     def LaunchSpelling(self, pWindow):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return Left
#     def _set(self, Left):
#         '-no docstring-'
#     Left = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Top
#     def _set(self, Top):
#         '-no docstring-'
#     Top = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Width
#     def _set(self, Width):
#         '-no docstring-'
#     Width = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Height
#     def _set(self, Height):
#         '-no docstring-'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return WindowState
#     def _set(self, WindowState):
#         '-no docstring-'
#     WindowState = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Visible
#     def _set(self, Visible):
#         '-no docstring-'
#     Visible = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def HWND(self):
#         '-no docstring-'
#         #return HWND
#
#     @property
#     def Active(self):
#         '-no docstring-'
#         #return Active
#
#     def Activate(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def AnswerWizard(self):
#         '-no docstring-'
#         #return AnswerWizard
#
#     @property
#     def COMAddIns(self):
#         '-no docstring-'
#         #return COMAddIns
#
#     @property
#     def ProductCode(self):
#         '-no docstring-'
#         #return ProductCode
#
#     @property
#     def DefaultWebOptions(self):
#         '-no docstring-'
#         #return DefaultWebOptions
#
#     @property
#     def LanguageSettings(self):
#         '-no docstring-'
#         #return LanguageSettings
#
#     @property
#     def MsoDebugOptions(self):
#         '-no docstring-'
#         #return MsoDebugOptions
#
#     def _get(self):
#         '-no docstring-'
#         #return ShowWindowsInTaskbar
#     def _set(self, ShowWindowsInTaskbar):
#         '-no docstring-'
#     ShowWindowsInTaskbar = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Marker(self):
#         '-no docstring-'
#         #return Marker
#
#     def _get(self):
#         '-no docstring-'
#         #return FeatureInstall
#     def _set(self, FeatureInstall):
#         '-no docstring-'
#     FeatureInstall = property(_get, _set, doc = _set.__doc__)
#
#     def GetOptionFlag(self, Option, Persist):
#         '-no docstring-'
#         #return GetOptionFlag
#
#     def SetOptionFlag(self, Option, State, Persist):
#         '-no docstring-'
#         #return 
#
#     @property
#     def FileDialog(self, Type):
#         '-no docstring-'
#         #return FileDialog
#
#     def _get(self):
#         '-no docstring-'
#         #return DisplayGridLines
#     def _set(self, DisplayGridLines):
#         '-no docstring-'
#     DisplayGridLines = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return AutomationSecurity
#     def _set(self, AutomationSecurity):
#         '-no docstring-'
#     AutomationSecurity = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def NewPresentation(self):
#         '-no docstring-'
#         #return NewPresentation
#
#     def _get(self):
#         '-no docstring-'
#         #return DisplayAlerts
#     def _set(self, DisplayAlerts):
#         '-no docstring-'
#     DisplayAlerts = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ShowStartupDialog
#     def _set(self, ShowStartupDialog):
#         '-no docstring-'
#     ShowStartupDialog = property(_get, _set, doc = _set.__doc__)
#
#     def SetPerfMarker(self, Marker):
#         '-no docstring-'
#         #return 
#
#     @property
#     def AutoCorrect(self):
#         '-no docstring-'
#         #return AutoCorrect
#
#     @property
#     def Options(self):
#         '-no docstring-'
#         #return Options
#
#     def LaunchPublishSlidesDialog(self, SlideLibraryUrl):
#         '-no docstring-'
#         #return 
#
#     def LaunchSendToPPTDialog(self, SlideUrls):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return DisplayDocumentInformationPanel
#     def _set(self, DisplayDocumentInformationPanel):
#         '-no docstring-'
#     DisplayDocumentInformationPanel = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Assistance(self):
#         '-no docstring-'
#         #return Assistance
#
#     @property
#     def ActiveEncryptionSession(self):
#         '-no docstring-'
#         #return ActiveEncryptionSession
#
#     @property
#     def FileConverters(self):
#         '-no docstring-'
#         #return FileConverters
#
#     @property
#     def SmartArtLayouts(self):
#         '-no docstring-'
#         #return SmartArtLayouts
#
#     @property
#     def SmartArtQuickStyles(self):
#         '-no docstring-'
#         #return SmartArtQuickStyles
#
#     @property
#     def SmartArtColors(self):
#         '-no docstring-'
#         #return SmartArtColors
#
#     @property
#     def ProtectedViewWindows(self):
#         '-no docstring-'
#         #return ProtectedViewWindows
#
#     @property
#     def ActiveProtectedViewWindow(self):
#         '-no docstring-'
#         #return ActiveProtectedViewWindow
#
#     @property
#     def IsSandboxed(self):
#         '-no docstring-'
#         #return IsSandboxed
#
#     @property
#     def ResampleMediaTasks(self):
#         '-no docstring-'
#         #return ResampleMediaTasks
#
#     def StartNewUndoEntry(self):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return FileValidation
#     def _set(self, FileValidation):
#         '-no docstring-'
#     FileValidation = property(_get, _set, doc = _set.__doc__)
#
#     def OpenThemeFile(self, themeFileName):
#         '-no docstring-'
#         #return Theme
#
#     def _get(self):
#         '-no docstring-'
#         #return pfChartDataPointTrack
#     def _set(self, pfChartDataPointTrack):
#         '-no docstring-'
#     ChartDataPointTrack = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return DisplayGridLines
#     def _set(self, DisplayGridLines):
#         '-no docstring-'
#     DisplayGuides = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def DataPrivacyOptions(self):
#         '-no docstring-'
#         #return DataPrivacyOptions
#
#     @property
#     def SensitivityLabelPolicy(self):
#         '-no docstring-'
#         #return SensitivityLabelPolicy
#


class TableBackground(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934F8-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Fill(self) -> 'FillFormat': ...
        Fill = hints.normal_property(_get_Fill)
        def _get_Picture(self) -> 'PictureFormat': ...
        Picture = hints.normal_property(_get_Picture)
        def _get_Reflection(self) -> hints.Incomplete: ...
        Reflection = hints.normal_property(_get_Reflection)
        def _get_Shadow(self) -> 'ShadowFormat': ...
        Shadow = hints.normal_property(_get_Shadow)


TableBackground._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Fill',
        (['out', 'retval'], POINTER(POINTER(FillFormat)), 'Fill')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Picture',
        (['out', 'retval'], POINTER(POINTER(PictureFormat)), 'Picture')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Reflection',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.ReflectionFormat)),
            'Reflection',
        )
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Shadow',
        (['out', 'retval'], POINTER(POINTER(ShadowFormat)), 'Shadow')
    ),
]

################################################################
# code template for TableBackground implementation
# class TableBackground_Impl(object):
#     @property
#     def Fill(self):
#         '-no docstring-'
#         #return Fill
#
#     @property
#     def Picture(self):
#         '-no docstring-'
#         #return Picture
#
#     @property
#     def Reflection(self):
#         '-no docstring-'
#         #return Reflection
#
#     @property
#     def Shadow(self):
#         '-no docstring-'
#         #return Shadow
#


class Walls(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A7C-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def Select(self) -> hints.Incomplete: ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Border(self) -> 'ChartBorder': ...
        Border = hints.normal_property(_get_Border)
        def ClearFormats(self) -> hints.Incomplete: ...
        def _get_Interior(self) -> 'Interior': ...
        Interior = hints.normal_property(_get_Interior)
        def _get_Fill(self) -> 'ChartFillFormat': ...
        Fill = hints.normal_property(_get_Fill)
        def _get_PictureType(self) -> hints.Incomplete: ...
        def _set_PictureType(self, pvar: hints.Incomplete) -> hints.Hresult: ...
        PictureType = hints.normal_property(_get_PictureType, _set_PictureType)
        def Paste(self) -> hints.Hresult: ...
        def _get_PictureUnit(self) -> hints.Incomplete: ...
        def _set_PictureUnit(self, pvar: hints.Incomplete) -> hints.Hresult: ...
        PictureUnit = hints.normal_property(_get_PictureUnit, _set_PictureUnit)
        def _get_Thickness(self) -> hints.Incomplete: ...
        def _set_Thickness(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Thickness = hints.normal_property(_get_Thickness, _set_Thickness)
        def _get_Format(self) -> 'ChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)


class ChartBorder(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A56-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Color(self) -> hints.Incomplete: ...
        def _set_Color(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Color = hints.normal_property(_get_Color, _set_Color)
        def _get_ColorIndex(self) -> hints.Incomplete: ...
        def _set_ColorIndex(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ColorIndex = hints.normal_property(_get_ColorIndex, _set_ColorIndex)
        def _get_LineStyle(self) -> hints.Incomplete: ...
        def _set_LineStyle(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        LineStyle = hints.normal_property(_get_LineStyle, _set_LineStyle)
        def _get_Weight(self) -> hints.Incomplete: ...
        def _set_Weight(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Weight = hints.normal_property(_get_Weight, _set_Weight)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)


class Interior(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A6C-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Color(self) -> hints.Incomplete: ...
        def _set_Color(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Color = hints.normal_property(_get_Color, _set_Color)
        def _get_ColorIndex(self) -> hints.Incomplete: ...
        def _set_ColorIndex(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ColorIndex = hints.normal_property(_get_ColorIndex, _set_ColorIndex)
        def _get_InvertIfNegative(self) -> hints.Incomplete: ...
        def _set_InvertIfNegative(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        InvertIfNegative = hints.normal_property(_get_InvertIfNegative, _set_InvertIfNegative)
        def _get_Pattern(self) -> hints.Incomplete: ...
        def _set_Pattern(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Pattern = hints.normal_property(_get_Pattern, _set_Pattern)
        def _get_PatternColor(self) -> hints.Incomplete: ...
        def _set_PatternColor(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        PatternColor = hints.normal_property(_get_PatternColor, _set_PatternColor)
        def _get_PatternColorIndex(self) -> hints.Incomplete: ...
        def _set_PatternColorIndex(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        PatternColorIndex = hints.normal_property(_get_PatternColorIndex, _set_PatternColorIndex)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)


class ChartFillFormat(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A5B-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def Solid(self) -> hints.Hresult: ...
        def UserTextured(self, TextureFile: hints.Incomplete) -> hints.Hresult: ...
        def _get_BackColor(self) -> 'ChartColorFormat': ...
        BackColor = hints.normal_property(_get_BackColor)
        def _get_ForeColor(self) -> 'ChartColorFormat': ...
        ForeColor = hints.normal_property(_get_ForeColor)
        def _get_GradientDegree(self) -> hints.Incomplete: ...
        GradientDegree = hints.normal_property(_get_GradientDegree)
        def _get_TextureName(self) -> hints.Incomplete: ...
        TextureName = hints.normal_property(_get_TextureName)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def OneColorGradient(self, Style: hints.Incomplete, Variant: hints.Incomplete, Degree: hints.Incomplete) -> hints.Hresult: ...
        def _get_GradientColorType(self) -> hints.Incomplete: ...
        GradientColorType = hints.normal_property(_get_GradientColorType)
        def _get_GradientStyle(self) -> hints.Incomplete: ...
        GradientStyle = hints.normal_property(_get_GradientStyle)
        def _get_GradientVariant(self) -> hints.Incomplete: ...
        GradientVariant = hints.normal_property(_get_GradientVariant)
        def _get_Pattern(self) -> hints.Incomplete: ...
        Pattern = hints.normal_property(_get_Pattern)
        def Patterned(self, Pattern: hints.Incomplete) -> hints.Hresult: ...
        def PresetGradient(self, Style: hints.Incomplete, Variant: hints.Incomplete, PresetGradientType: hints.Incomplete) -> hints.Hresult: ...
        def _get_PresetGradientType(self) -> hints.Incomplete: ...
        PresetGradientType = hints.normal_property(_get_PresetGradientType)
        def _get_PresetTexture(self) -> hints.Incomplete: ...
        PresetTexture = hints.normal_property(_get_PresetTexture)
        def PresetTextured(self, PresetTexture: hints.Incomplete) -> hints.Hresult: ...
        def _get_TextureType(self) -> hints.Incomplete: ...
        TextureType = hints.normal_property(_get_TextureType)
        def TwoColorGradient(self, Style: hints.Incomplete, Variant: hints.Incomplete) -> hints.Hresult: ...
        def _get_Type(self) -> hints.Incomplete: ...
        Type = hints.normal_property(_get_Type)
        def UserPicture(self, PictureFile: hints.Incomplete = ..., PictureFormat: hints.Incomplete = ..., PictureStackUnit: hints.Incomplete = ..., PicturePlacement: hints.Incomplete = ...) -> hints.Hresult: ...
        def _get_Visible(self) -> hints.Incomplete: ...
        def _set_Visible(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Visible = hints.normal_property(_get_Visible, _set_Visible)


Walls._methods_ = [
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'bstr')
    ),
    COMMETHOD(
        [dispid(235)],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppparent')
    ),
    COMMETHOD(
        [dispid(128), 'hidden', 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(ChartBorder)), 'ppborder')
    ),
    COMMETHOD(
        [dispid(112)],
        HRESULT,
        'ClearFormats',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(129), 'hidden', 'propget'],
        HRESULT,
        'Interior',
        (['out', 'retval'], POINTER(POINTER(Interior)), 'ppinterior')
    ),
    COMMETHOD(
        [dispid(1663), 'hidden', 'propget'],
        HRESULT,
        'Fill',
        (['out', 'retval'], POINTER(POINTER(ChartFillFormat)), 'ppFill')
    ),
    COMMETHOD(
        [dispid(161), 'propget'],
        HRESULT,
        'PictureType',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(161), 'propput'],
        HRESULT,
        'PictureType',
        (['in'], VARIANT, 'pvar')
    ),
    COMMETHOD([dispid(211)], HRESULT, 'Paste'),
    COMMETHOD(
        [dispid(162), 'propget'],
        HRESULT,
        'PictureUnit',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(162), 'propput'],
        HRESULT,
        'PictureUnit',
        (['in'], VARIANT, 'pvar')
    ),
    COMMETHOD(
        [dispid(2419), 'propget'],
        HRESULT,
        'Thickness',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2419), 'propput'],
        HRESULT,
        'Thickness',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(ChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
]

################################################################
# code template for Walls implementation
# class Walls_Impl(object):
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return bstr
#
#     def Select(self):
#         '-no docstring-'
#         #return pvar
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppparent
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return ppborder
#
#     def ClearFormats(self):
#         '-no docstring-'
#         #return pvar
#
#     @property
#     def Interior(self):
#         '-no docstring-'
#         #return ppinterior
#
#     @property
#     def Fill(self):
#         '-no docstring-'
#         #return ppFill
#
#     def _get(self):
#         '-no docstring-'
#         #return pvar
#     def _set(self, pvar):
#         '-no docstring-'
#     PictureType = property(_get, _set, doc = _set.__doc__)
#
#     def Paste(self):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return pvar
#     def _set(self, pvar):
#         '-no docstring-'
#     PictureUnit = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Thickness = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#


class CategoryCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{2432F529-514B-4575-AA71-1754C74A13D6}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Item(self, Index: hints.Incomplete) -> 'ChartCategory': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _Default(self, Index: hints.Incomplete) -> 'ChartCategory': ...


CategoryCollection._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'cCategory')
    ),
    COMMETHOD(
        [dispid(2003)],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(ChartCategory)), 'ppcategory')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'ppval')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(0), 'nonbrowsable'],
        HRESULT,
        '_Default',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(ChartCategory)), 'RHS')
    ),
]

################################################################
# code template for CategoryCollection implementation
# class CategoryCollection_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return cCategory
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return ppcategory
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     def _Default(self, Index):
#         '-no docstring-'
#         #return RHS
#

Guide._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD([dispid(2003)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Orientation',
        (['out', 'retval'], POINTER(PpGuideOrientation), 'Orientation')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'Position',
        (['out', 'retval'], POINTER(c_float), 'Position')
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'Position',
        (['in'], c_float, 'Position')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'Color',
        (['out', 'retval'], POINTER(POINTER(ColorFormat)), 'Color')
    ),
]

################################################################
# code template for Guide implementation
# class Guide_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Orientation(self):
#         '-no docstring-'
#         #return Orientation
#
#     def _get(self):
#         '-no docstring-'
#         #return Position
#     def _set(self, Position):
#         '-no docstring-'
#     Position = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Color(self):
#         '-no docstring-'
#         #return Color
#

TabStop._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(PpTabStopType), 'Type')
    ),
    COMMETHOD(
        [dispid(2003), 'propput'],
        HRESULT,
        'Type',
        (['in'], PpTabStopType, 'Type')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Position',
        (['out', 'retval'], POINTER(c_float), 'Position')
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'Position',
        (['in'], c_float, 'Position')
    ),
    COMMETHOD([dispid(2005)], HRESULT, 'Clear'),
]

################################################################
# code template for TabStop implementation
# class TabStop_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return Type
#     def _set(self, Type):
#         '-no docstring-'
#     Type = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Position
#     def _set(self, Position):
#         '-no docstring-'
#     Position = property(_get, _set, doc = _set.__doc__)
#
#     def Clear(self):
#         '-no docstring-'
#         #return 
#

Presentations._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(Presentation)), 'Item')
    ),
    COMMETHOD(
        [dispid(2003)],
        HRESULT,
        'Add',
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'WithWindow',
            -1
        ),
        (['out', 'retval'], POINTER(POINTER(Presentation)), 'Add')
    ),
    COMMETHOD(
        [dispid(2004), 'hidden'],
        HRESULT,
        'OpenOld',
        (['in'], BSTR, 'FileName'),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'ReadOnly',
            0
        ),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Untitled',
            0
        ),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'WithWindow',
            -1
        ),
        (['out', 'retval'], POINTER(POINTER(Presentation)), 'OpenOld')
    ),
    COMMETHOD(
        [dispid(2005)],
        HRESULT,
        'Open',
        (['in'], BSTR, 'FileName'),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'ReadOnly',
            0
        ),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Untitled',
            0
        ),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'WithWindow',
            -1
        ),
        (['out', 'retval'], POINTER(POINTER(Presentation)), 'Open')
    ),
    COMMETHOD(
        [dispid(2006)],
        HRESULT,
        'CheckOut',
        (['in'], BSTR, 'FileName')
    ),
    COMMETHOD(
        [dispid(2007)],
        HRESULT,
        'CanCheckOut',
        (['in'], BSTR, 'FileName'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'CanCheckOut')
    ),
    COMMETHOD(
        [dispid(2008)],
        HRESULT,
        'Open2007',
        (['in'], BSTR, 'FileName'),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'ReadOnly',
            0
        ),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Untitled',
            0
        ),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'WithWindow',
            -1
        ),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'OpenAndRepair',
            0
        ),
        (['out', 'retval'], POINTER(POINTER(Presentation)), 'Open2007')
    ),
]

################################################################
# code template for Presentations implementation
# class Presentations_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     def Add(self, WithWindow):
#         '-no docstring-'
#         #return Add
#
#     def OpenOld(self, FileName, ReadOnly, Untitled, WithWindow):
#         '-no docstring-'
#         #return OpenOld
#
#     def Open(self, FileName, ReadOnly, Untitled, WithWindow):
#         '-no docstring-'
#         #return Open
#
#     def CheckOut(self, FileName):
#         '-no docstring-'
#         #return 
#
#     def CanCheckOut(self, FileName):
#         '-no docstring-'
#         #return CanCheckOut
#
#     def Open2007(self, FileName, ReadOnly, Untitled, WithWindow, OpenAndRepair):
#         '-no docstring-'
#         #return Open2007
#

Interior._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propput'],
        HRESULT,
        'Color',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Color',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2002), 'propput'],
        HRESULT,
        'ColorIndex',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'ColorIndex',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2003), 'propput'],
        HRESULT,
        'InvertIfNegative',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'InvertIfNegative',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'Pattern',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Pattern',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'PatternColor',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'PatternColor',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'PatternColorIndex',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'PatternColorIndex',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
]

################################################################
# code template for Interior implementation
# class Interior_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Color = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ColorIndex = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     InvertIfNegative = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Pattern = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     PatternColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     PatternColorIndex = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#


class Selection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493454-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Cut(self) -> hints.Hresult: ...
        def Copy(self) -> hints.Hresult: ...
        def Delete(self) -> hints.Hresult: ...
        def Unselect(self) -> hints.Hresult: ...
        def _get_Type(self) -> hints.Incomplete: ...
        Type = hints.normal_property(_get_Type)
        def _get_SlideRange(self) -> 'SlideRange': ...
        SlideRange = hints.normal_property(_get_SlideRange)
        def _get_ShapeRange(self) -> 'ShapeRange': ...
        ShapeRange = hints.normal_property(_get_ShapeRange)
        def _get_TextRange(self) -> 'TextRange': ...
        TextRange = hints.normal_property(_get_TextRange)
        def _get_ChildShapeRange(self) -> 'ShapeRange': ...
        ChildShapeRange = hints.normal_property(_get_ChildShapeRange)
        def _get_HasChildShapeRange(self) -> hints.Incomplete: ...
        HasChildShapeRange = hints.normal_property(_get_HasChildShapeRange)
        def _get_TextRange2(self) -> hints.Incomplete: ...
        TextRange2 = hints.normal_property(_get_TextRange2)


class Slide(CoClass):
    _reg_clsid_ = GUID('{91493445-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{91493440-5A91-11CF-8700-00AA0060263B}', 2, 12)


class _Slide(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{9149346A-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Shapes(self) -> 'Shapes': ...
        Shapes = hints.normal_property(_get_Shapes)
        def _get_HeadersFooters(self) -> 'HeadersFooters': ...
        HeadersFooters = hints.normal_property(_get_HeadersFooters)
        def _get_SlideShowTransition(self) -> 'SlideShowTransition': ...
        SlideShowTransition = hints.normal_property(_get_SlideShowTransition)
        def _get_ColorScheme(self) -> 'ColorScheme': ...
        def _set_ColorScheme(self, ColorScheme: hints.Incomplete) -> hints.Hresult: ...
        ColorScheme = hints.normal_property(_get_ColorScheme, _set_ColorScheme)
        def _get_Background(self) -> 'ShapeRange': ...
        Background = hints.normal_property(_get_Background)
        def _get_Name(self) -> hints.Incomplete: ...
        def _set_Name(self, Name: hints.Incomplete) -> hints.Hresult: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def _get_SlideID(self) -> hints.Incomplete: ...
        SlideID = hints.normal_property(_get_SlideID)
        def _get_PrintSteps(self) -> hints.Incomplete: ...
        PrintSteps = hints.normal_property(_get_PrintSteps)
        def Select(self) -> hints.Hresult: ...
        def Cut(self) -> hints.Hresult: ...
        def Copy(self) -> hints.Hresult: ...
        def _get_Layout(self) -> hints.Incomplete: ...
        def _set_Layout(self, Layout: hints.Incomplete) -> hints.Hresult: ...
        Layout = hints.normal_property(_get_Layout, _set_Layout)
        def Duplicate(self) -> 'SlideRange': ...
        def Delete(self) -> hints.Hresult: ...
        def _get_Tags(self) -> 'Tags': ...
        Tags = hints.normal_property(_get_Tags)
        def _get_SlideIndex(self) -> hints.Incomplete: ...
        SlideIndex = hints.normal_property(_get_SlideIndex)
        def _get_SlideNumber(self) -> hints.Incomplete: ...
        SlideNumber = hints.normal_property(_get_SlideNumber)
        def _get_DisplayMasterShapes(self) -> hints.Incomplete: ...
        def _set_DisplayMasterShapes(self, DisplayMasterShapes: hints.Incomplete) -> hints.Hresult: ...
        DisplayMasterShapes = hints.normal_property(_get_DisplayMasterShapes, _set_DisplayMasterShapes)
        def _get_FollowMasterBackground(self) -> hints.Incomplete: ...
        def _set_FollowMasterBackground(self, FollowMasterBackground: hints.Incomplete) -> hints.Hresult: ...
        FollowMasterBackground = hints.normal_property(_get_FollowMasterBackground, _set_FollowMasterBackground)
        def _get_NotesPage(self) -> 'SlideRange': ...
        NotesPage = hints.normal_property(_get_NotesPage)
        def _get_Master(self) -> '_Master': ...
        Master = hints.normal_property(_get_Master)
        def _get_Hyperlinks(self) -> 'Hyperlinks': ...
        Hyperlinks = hints.normal_property(_get_Hyperlinks)
        def Export(self, FileName: hints.Incomplete, FilterName: hints.Incomplete, ScaleWidth: hints.Incomplete = ..., ScaleHeight: hints.Incomplete = ...) -> hints.Hresult: ...
        def _get_Scripts(self) -> hints.Incomplete: ...
        Scripts = hints.normal_property(_get_Scripts)
        def _get_Comments(self) -> 'Comments': ...
        Comments = hints.normal_property(_get_Comments)
        def _get_Design(self) -> 'Design': ...
        def _set_Design(self, Design: hints.Incomplete) -> hints.Hresult: ...
        Design = hints.normal_property(_get_Design, _set_Design)
        def MoveTo(self, toPos: hints.Incomplete) -> hints.Hresult: ...
        def _get_TimeLine(self) -> 'TimeLine': ...
        TimeLine = hints.normal_property(_get_TimeLine)
        def ApplyTemplate(self, FileName: hints.Incomplete) -> hints.Hresult: ...
        def _get_SectionNumber(self) -> hints.Incomplete: ...
        SectionNumber = hints.normal_property(_get_SectionNumber)
        def _get_CustomLayout(self) -> 'CustomLayout': ...
        def _set_CustomLayout(self, CustomLayout: hints.Incomplete) -> hints.Hresult: ...
        CustomLayout = hints.normal_property(_get_CustomLayout, _set_CustomLayout)
        def ApplyTheme(self, themeName: hints.Incomplete) -> hints.Hresult: ...
        def _get_ThemeColorScheme(self) -> hints.Incomplete: ...
        ThemeColorScheme = hints.normal_property(_get_ThemeColorScheme)
        def ApplyThemeColorScheme(self, themeColorSchemeName: hints.Incomplete) -> hints.Hresult: ...
        def _get_BackgroundStyle(self) -> hints.Incomplete: ...
        def _set_BackgroundStyle(self, BackgroundStyle: hints.Incomplete) -> hints.Hresult: ...
        BackgroundStyle = hints.normal_property(_get_BackgroundStyle, _set_BackgroundStyle)
        def _get_CustomerData(self) -> 'CustomerData': ...
        CustomerData = hints.normal_property(_get_CustomerData)
        def PublishSlides(self, SlideLibraryUrl: hints.Incomplete, Overwrite: hints.Incomplete = ..., UseSlideOrder: hints.Incomplete = ...) -> hints.Hresult: ...
        def MoveToSectionStart(self, toSection: hints.Incomplete) -> hints.Hresult: ...
        def _get_sectionIndex(self) -> hints.Incomplete: ...
        sectionIndex = hints.normal_property(_get_sectionIndex)
        def _get_HasNotesPage(self) -> hints.Incomplete: ...
        HasNotesPage = hints.normal_property(_get_HasNotesPage)
        def ApplyTemplate2(self, FileName: hints.Incomplete, VariantGUID: hints.Incomplete) -> hints.Hresult: ...


class SldEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{9149346D-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['hidden']


Slide._com_interfaces_ = [_Slide]
Slide._outgoing_interfaces_ = [SldEvents]


class SlideShowWindow(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493453-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_View(self) -> 'SlideShowView': ...
        View = hints.normal_property(_get_View)
        def _get_Presentation(self) -> hints.Annotated['_Presentation', hints.FirstComItfOf['Presentation']]: ...
        Presentation = hints.normal_property(_get_Presentation)
        def _get_IsFullScreen(self) -> hints.Incomplete: ...
        IsFullScreen = hints.normal_property(_get_IsFullScreen)
        def _get_Left(self) -> hints.Incomplete: ...
        def _set_Left(self, Left: hints.Incomplete) -> hints.Hresult: ...
        Left = hints.normal_property(_get_Left, _set_Left)
        def _get_Top(self) -> hints.Incomplete: ...
        def _set_Top(self, Top: hints.Incomplete) -> hints.Hresult: ...
        Top = hints.normal_property(_get_Top, _set_Top)
        def _get_Width(self) -> hints.Incomplete: ...
        def _set_Width(self, Width: hints.Incomplete) -> hints.Hresult: ...
        Width = hints.normal_property(_get_Width, _set_Width)
        def _get_Height(self) -> hints.Incomplete: ...
        def _set_Height(self, Height: hints.Incomplete) -> hints.Hresult: ...
        Height = hints.normal_property(_get_Height, _set_Height)
        def _get_HWND(self) -> hints.Incomplete: ...
        HWND = hints.normal_property(_get_HWND)
        def _get_Active(self) -> hints.Incomplete: ...
        Active = hints.normal_property(_get_Active)
        def Activate(self) -> hints.Hresult: ...
        def _get_SlideNavigation(self) -> 'SlideNavigation': ...
        SlideNavigation = hints.normal_property(_get_SlideNavigation)


class SlideRange(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{9149346B-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Shapes(self) -> 'Shapes': ...
        Shapes = hints.normal_property(_get_Shapes)
        def _get_HeadersFooters(self) -> 'HeadersFooters': ...
        HeadersFooters = hints.normal_property(_get_HeadersFooters)
        def _get_SlideShowTransition(self) -> 'SlideShowTransition': ...
        SlideShowTransition = hints.normal_property(_get_SlideShowTransition)
        def _get_ColorScheme(self) -> 'ColorScheme': ...
        def _set_ColorScheme(self, ColorScheme: hints.Incomplete) -> hints.Hresult: ...
        ColorScheme = hints.normal_property(_get_ColorScheme, _set_ColorScheme)
        def _get_Background(self) -> 'ShapeRange': ...
        Background = hints.normal_property(_get_Background)
        def _get_Name(self) -> hints.Incomplete: ...
        def _set_Name(self, Name: hints.Incomplete) -> hints.Hresult: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def _get_SlideID(self) -> hints.Incomplete: ...
        SlideID = hints.normal_property(_get_SlideID)
        def _get_PrintSteps(self) -> hints.Incomplete: ...
        PrintSteps = hints.normal_property(_get_PrintSteps)
        def Select(self) -> hints.Hresult: ...
        def Cut(self) -> hints.Hresult: ...
        def Copy(self) -> hints.Hresult: ...
        def _get_Layout(self) -> hints.Incomplete: ...
        def _set_Layout(self, Layout: hints.Incomplete) -> hints.Hresult: ...
        Layout = hints.normal_property(_get_Layout, _set_Layout)
        def Duplicate(self) -> 'SlideRange': ...
        def Delete(self) -> hints.Hresult: ...
        def _get_Tags(self) -> 'Tags': ...
        Tags = hints.normal_property(_get_Tags)
        def _get_SlideIndex(self) -> hints.Incomplete: ...
        SlideIndex = hints.normal_property(_get_SlideIndex)
        def _get_SlideNumber(self) -> hints.Incomplete: ...
        SlideNumber = hints.normal_property(_get_SlideNumber)
        def _get_DisplayMasterShapes(self) -> hints.Incomplete: ...
        def _set_DisplayMasterShapes(self, DisplayMasterShapes: hints.Incomplete) -> hints.Hresult: ...
        DisplayMasterShapes = hints.normal_property(_get_DisplayMasterShapes, _set_DisplayMasterShapes)
        def _get_FollowMasterBackground(self) -> hints.Incomplete: ...
        def _set_FollowMasterBackground(self, FollowMasterBackground: hints.Incomplete) -> hints.Hresult: ...
        FollowMasterBackground = hints.normal_property(_get_FollowMasterBackground, _set_FollowMasterBackground)
        def _get_NotesPage(self) -> 'SlideRange': ...
        NotesPage = hints.normal_property(_get_NotesPage)
        def _get_Master(self) -> '_Master': ...
        Master = hints.normal_property(_get_Master)
        def _get_Hyperlinks(self) -> 'Hyperlinks': ...
        Hyperlinks = hints.normal_property(_get_Hyperlinks)
        def Export(self, FileName: hints.Incomplete, FilterName: hints.Incomplete, ScaleWidth: hints.Incomplete = ..., ScaleHeight: hints.Incomplete = ...) -> hints.Hresult: ...
        def Item(self, Index: hints.Incomplete) -> hints.Annotated['_Slide', hints.FirstComItfOf['Slide']]: ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def _Index(self, Index: hints.Incomplete) -> hints.Incomplete: ...
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get_Scripts(self) -> hints.Incomplete: ...
        Scripts = hints.normal_property(_get_Scripts)
        def _get_Comments(self) -> 'Comments': ...
        Comments = hints.normal_property(_get_Comments)
        def _get_Design(self) -> 'Design': ...
        def _set_Design(self, Design: hints.Incomplete) -> hints.Hresult: ...
        Design = hints.normal_property(_get_Design, _set_Design)
        def MoveTo(self, toPos: hints.Incomplete) -> hints.Hresult: ...
        def _get_TimeLine(self) -> 'TimeLine': ...
        TimeLine = hints.normal_property(_get_TimeLine)
        def ApplyTemplate(self, FileName: hints.Incomplete) -> hints.Hresult: ...
        def _get_SectionNumber(self) -> hints.Incomplete: ...
        SectionNumber = hints.normal_property(_get_SectionNumber)
        def _get_CustomLayout(self) -> 'CustomLayout': ...
        def _set_CustomLayout(self, CustomLayout: hints.Incomplete) -> hints.Hresult: ...
        CustomLayout = hints.normal_property(_get_CustomLayout, _set_CustomLayout)
        def ApplyTheme(self, themeName: hints.Incomplete) -> hints.Hresult: ...
        def _get_ThemeColorScheme(self) -> hints.Incomplete: ...
        ThemeColorScheme = hints.normal_property(_get_ThemeColorScheme)
        def ApplyThemeColorScheme(self, themeColorSchemeName: hints.Incomplete) -> hints.Hresult: ...
        def _get_BackgroundStyle(self) -> hints.Incomplete: ...
        def _set_BackgroundStyle(self, BackgroundStyle: hints.Incomplete) -> hints.Hresult: ...
        BackgroundStyle = hints.normal_property(_get_BackgroundStyle, _set_BackgroundStyle)
        def _get_CustomerData(self) -> 'CustomerData': ...
        CustomerData = hints.normal_property(_get_CustomerData)
        def PublishSlides(self, SlideLibraryUrl: hints.Incomplete, Overwrite: hints.Incomplete = ..., UseSlideOrder: hints.Incomplete = ...) -> hints.Hresult: ...
        def MoveToSectionStart(self, toSection: hints.Incomplete) -> hints.Hresult: ...
        def _get_sectionIndex(self) -> hints.Incomplete: ...
        sectionIndex = hints.normal_property(_get_sectionIndex)
        def _get_HasNotesPage(self) -> hints.Incomplete: ...
        HasNotesPage = hints.normal_property(_get_HasNotesPage)
        def ApplyTemplate2(self, FileName: hints.Incomplete, VariantGUID: hints.Incomplete) -> hints.Hresult: ...


class Effect(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934DF-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Shape(self) -> 'Shape': ...
        def _set_Shape(self, Shape: hints.Incomplete) -> hints.Hresult: ...
        Shape = hints.normal_property(_get_Shape, _set_Shape)
        def MoveTo(self, toPos: hints.Incomplete) -> hints.Hresult: ...
        def MoveBefore(self, Effect: hints.Incomplete) -> hints.Hresult: ...
        def MoveAfter(self, Effect: hints.Incomplete) -> hints.Hresult: ...
        def Delete(self) -> hints.Hresult: ...
        def _get_Index(self) -> hints.Incomplete: ...
        Index = hints.normal_property(_get_Index)
        def _get_Timing(self) -> 'Timing': ...
        Timing = hints.normal_property(_get_Timing)
        def _get_EffectType(self) -> hints.Incomplete: ...
        def _set_EffectType(self, EffectType: hints.Incomplete) -> hints.Hresult: ...
        EffectType = hints.normal_property(_get_EffectType, _set_EffectType)
        def _get_EffectParameters(self) -> 'EffectParameters': ...
        EffectParameters = hints.normal_property(_get_EffectParameters)
        def _get_TextRangeStart(self) -> hints.Incomplete: ...
        TextRangeStart = hints.normal_property(_get_TextRangeStart)
        def _get_TextRangeLength(self) -> hints.Incomplete: ...
        TextRangeLength = hints.normal_property(_get_TextRangeLength)
        def _get_Paragraph(self) -> hints.Incomplete: ...
        def _set_Paragraph(self, Paragraph: hints.Incomplete) -> hints.Hresult: ...
        Paragraph = hints.normal_property(_get_Paragraph, _set_Paragraph)
        def _get_DisplayName(self) -> hints.Incomplete: ...
        DisplayName = hints.normal_property(_get_DisplayName)
        def _get_Exit(self) -> hints.Incomplete: ...
        def _set_Exit(self, Exit: hints.Incomplete) -> hints.Hresult: ...
        Exit = hints.normal_property(_get_Exit, _set_Exit)
        def _get_Behaviors(self) -> 'AnimationBehaviors': ...
        Behaviors = hints.normal_property(_get_Behaviors)
        def _get_EffectInformation(self) -> 'EffectInformation': ...
        EffectInformation = hints.normal_property(_get_EffectInformation)



EApplication._methods_ = [
    COMMETHOD(
        [],
        HRESULT,
        'WindowSelectionChange',
        (['in'], POINTER(Selection), 'Sel')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'WindowBeforeRightClick',
        (['in'], POINTER(Selection), 'Sel'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Cancel')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'WindowBeforeDoubleClick',
        (['in'], POINTER(Selection), 'Sel'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Cancel')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'PresentationClose',
        (['in'], POINTER(Presentation), 'Pres')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'PresentationSave',
        (['in'], POINTER(Presentation), 'Pres')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'PresentationOpen',
        (['in'], POINTER(Presentation), 'Pres')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'NewPresentation',
        (['in'], POINTER(Presentation), 'Pres')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'PresentationNewSlide',
        (['in'], POINTER(Slide), 'Sld')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'WindowActivate',
        (['in'], POINTER(Presentation), 'Pres'),
        (['in'], POINTER(DocumentWindow), 'Wn')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'WindowDeactivate',
        (['in'], POINTER(Presentation), 'Pres'),
        (['in'], POINTER(DocumentWindow), 'Wn')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'SlideShowBegin',
        (['in'], POINTER(SlideShowWindow), 'Wn')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'SlideShowNextBuild',
        (['in'], POINTER(SlideShowWindow), 'Wn')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'SlideShowNextSlide',
        (['in'], POINTER(SlideShowWindow), 'Wn')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'SlideShowEnd',
        (['in'], POINTER(Presentation), 'Pres')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'PresentationPrint',
        (['in'], POINTER(Presentation), 'Pres')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'SlideSelectionChanged',
        (['in'], POINTER(SlideRange), 'SldRange')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'ColorSchemeChanged',
        (['in'], POINTER(SlideRange), 'SldRange')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'PresentationBeforeSave',
        (['in'], POINTER(Presentation), 'Pres'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Cancel')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'SlideShowNextClick',
        (['in'], POINTER(SlideShowWindow), 'Wn'),
        (['in'], POINTER(Effect), 'nEffect')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'AfterNewPresentation',
        (['in'], POINTER(Presentation), 'Pres')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'AfterPresentationOpen',
        (['in'], POINTER(Presentation), 'Pres')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'PresentationSync',
        (['in'], POINTER(Presentation), 'Pres'),
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoSyncEventType,
            'SyncEventType',
        )
    ),
    COMMETHOD(
        [],
        HRESULT,
        'SlideShowOnNext',
        (['in'], POINTER(SlideShowWindow), 'Wn')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'SlideShowOnPrevious',
        (['in'], POINTER(SlideShowWindow), 'Wn')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'PresentationBeforeClose',
        (['in'], POINTER(Presentation), 'Pres'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Cancel')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'ProtectedViewWindowOpen',
        (['in'], POINTER(ProtectedViewWindow), 'ProtViewWindow')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'ProtectedViewWindowBeforeEdit',
        (['in'], POINTER(ProtectedViewWindow), 'ProtViewWindow'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Cancel')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'ProtectedViewWindowBeforeClose',
        (['in'], POINTER(ProtectedViewWindow), 'ProtViewWindow'),
        (['in'], PpProtectedViewCloseReason, 'ProtectedViewCloseReason'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Cancel')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'ProtectedViewWindowActivate',
        (['in'], POINTER(ProtectedViewWindow), 'ProtViewWindow')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'ProtectedViewWindowDeactivate',
        (['in'], POINTER(ProtectedViewWindow), 'ProtViewWindow')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'PresentationCloseFinal',
        (['in'], POINTER(Presentation), 'Pres')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'AfterDragDropOnSlide',
        (['in'], POINTER(Slide), 'Sld'),
        (['in'], c_float, 'X'),
        (['in'], c_float, 'Y')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'AfterShapeSizeChange',
        (['in'], POINTER(Shape), 'shp')
    ),
]

################################################################
# code template for EApplication implementation
# class EApplication_Impl(object):
#     def WindowSelectionChange(self, Sel):
#         '-no docstring-'
#         #return 
#
#     def WindowBeforeRightClick(self, Sel):
#         '-no docstring-'
#         #return Cancel
#
#     def WindowBeforeDoubleClick(self, Sel):
#         '-no docstring-'
#         #return Cancel
#
#     def PresentationClose(self, Pres):
#         '-no docstring-'
#         #return 
#
#     def PresentationSave(self, Pres):
#         '-no docstring-'
#         #return 
#
#     def PresentationOpen(self, Pres):
#         '-no docstring-'
#         #return 
#
#     def NewPresentation(self, Pres):
#         '-no docstring-'
#         #return 
#
#     def PresentationNewSlide(self, Sld):
#         '-no docstring-'
#         #return 
#
#     def WindowActivate(self, Pres, Wn):
#         '-no docstring-'
#         #return 
#
#     def WindowDeactivate(self, Pres, Wn):
#         '-no docstring-'
#         #return 
#
#     def SlideShowBegin(self, Wn):
#         '-no docstring-'
#         #return 
#
#     def SlideShowNextBuild(self, Wn):
#         '-no docstring-'
#         #return 
#
#     def SlideShowNextSlide(self, Wn):
#         '-no docstring-'
#         #return 
#
#     def SlideShowEnd(self, Pres):
#         '-no docstring-'
#         #return 
#
#     def PresentationPrint(self, Pres):
#         '-no docstring-'
#         #return 
#
#     def SlideSelectionChanged(self, SldRange):
#         '-no docstring-'
#         #return 
#
#     def ColorSchemeChanged(self, SldRange):
#         '-no docstring-'
#         #return 
#
#     def PresentationBeforeSave(self, Pres):
#         '-no docstring-'
#         #return Cancel
#
#     def SlideShowNextClick(self, Wn, nEffect):
#         '-no docstring-'
#         #return 
#
#     def AfterNewPresentation(self, Pres):
#         '-no docstring-'
#         #return 
#
#     def AfterPresentationOpen(self, Pres):
#         '-no docstring-'
#         #return 
#
#     def PresentationSync(self, Pres, SyncEventType):
#         '-no docstring-'
#         #return 
#
#     def SlideShowOnNext(self, Wn):
#         '-no docstring-'
#         #return 
#
#     def SlideShowOnPrevious(self, Wn):
#         '-no docstring-'
#         #return 
#
#     def PresentationBeforeClose(self, Pres):
#         '-no docstring-'
#         #return Cancel
#
#     def ProtectedViewWindowOpen(self, ProtViewWindow):
#         '-no docstring-'
#         #return 
#
#     def ProtectedViewWindowBeforeEdit(self, ProtViewWindow):
#         '-no docstring-'
#         #return Cancel
#
#     def ProtectedViewWindowBeforeClose(self, ProtViewWindow, ProtectedViewCloseReason):
#         '-no docstring-'
#         #return Cancel
#
#     def ProtectedViewWindowActivate(self, ProtViewWindow):
#         '-no docstring-'
#         #return 
#
#     def ProtectedViewWindowDeactivate(self, ProtViewWindow):
#         '-no docstring-'
#         #return 
#
#     def PresentationCloseFinal(self, Pres):
#         '-no docstring-'
#         #return 
#
#     def AfterDragDropOnSlide(self, Sld, X, Y):
#         '-no docstring-'
#         #return 
#
#     def AfterShapeSizeChange(self, shp):
#         '-no docstring-'
#         #return 
#

LineFormat._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'plCreator')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'BackColor',
        (['out', 'retval'], POINTER(POINTER(ColorFormat)), 'BackColor')
    ),
    COMMETHOD(
        [dispid(100), 'propput'],
        HRESULT,
        'BackColor',
        (['in'], POINTER(ColorFormat), 'BackColor')
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'BeginArrowheadLength',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoArrowheadLength),
            'BeginArrowheadLength',
        )
    ),
    COMMETHOD(
        [dispid(101), 'propput'],
        HRESULT,
        'BeginArrowheadLength',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoArrowheadLength,
            'BeginArrowheadLength',
        )
    ),
    COMMETHOD(
        [dispid(102), 'propget'],
        HRESULT,
        'BeginArrowheadStyle',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoArrowheadStyle),
            'BeginArrowheadStyle',
        )
    ),
    COMMETHOD(
        [dispid(102), 'propput'],
        HRESULT,
        'BeginArrowheadStyle',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoArrowheadStyle,
            'BeginArrowheadStyle',
        )
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'BeginArrowheadWidth',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoArrowheadWidth),
            'BeginArrowheadWidth',
        )
    ),
    COMMETHOD(
        [dispid(103), 'propput'],
        HRESULT,
        'BeginArrowheadWidth',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoArrowheadWidth,
            'BeginArrowheadWidth',
        )
    ),
    COMMETHOD(
        [dispid(104), 'propget'],
        HRESULT,
        'DashStyle',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoLineDashStyle),
            'DashStyle',
        )
    ),
    COMMETHOD(
        [dispid(104), 'propput'],
        HRESULT,
        'DashStyle',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoLineDashStyle,
            'DashStyle',
        )
    ),
    COMMETHOD(
        [dispid(105), 'propget'],
        HRESULT,
        'EndArrowheadLength',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoArrowheadLength),
            'EndArrowheadLength',
        )
    ),
    COMMETHOD(
        [dispid(105), 'propput'],
        HRESULT,
        'EndArrowheadLength',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoArrowheadLength,
            'EndArrowheadLength',
        )
    ),
    COMMETHOD(
        [dispid(106), 'propget'],
        HRESULT,
        'EndArrowheadStyle',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoArrowheadStyle),
            'EndArrowheadStyle',
        )
    ),
    COMMETHOD(
        [dispid(106), 'propput'],
        HRESULT,
        'EndArrowheadStyle',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoArrowheadStyle,
            'EndArrowheadStyle',
        )
    ),
    COMMETHOD(
        [dispid(107), 'propget'],
        HRESULT,
        'EndArrowheadWidth',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoArrowheadWidth),
            'EndArrowheadWidth',
        )
    ),
    COMMETHOD(
        [dispid(107), 'propput'],
        HRESULT,
        'EndArrowheadWidth',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoArrowheadWidth,
            'EndArrowheadWidth',
        )
    ),
    COMMETHOD(
        [dispid(108), 'propget'],
        HRESULT,
        'ForeColor',
        (['out', 'retval'], POINTER(POINTER(ColorFormat)), 'ForeColor')
    ),
    COMMETHOD(
        [dispid(108), 'propput'],
        HRESULT,
        'ForeColor',
        (['in'], POINTER(ColorFormat), 'ForeColor')
    ),
    COMMETHOD(
        [dispid(109), 'propget'],
        HRESULT,
        'Pattern',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPatternType),
            'Pattern',
        )
    ),
    COMMETHOD(
        [dispid(109), 'propput'],
        HRESULT,
        'Pattern',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPatternType,
            'Pattern',
        )
    ),
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'Style',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoLineStyle),
            'Style',
        )
    ),
    COMMETHOD(
        [dispid(110), 'propput'],
        HRESULT,
        'Style',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoLineStyle,
            'Style',
        )
    ),
    COMMETHOD(
        [dispid(111), 'propget'],
        HRESULT,
        'Transparency',
        (['out', 'retval'], POINTER(c_float), 'Transparency')
    ),
    COMMETHOD(
        [dispid(111), 'propput'],
        HRESULT,
        'Transparency',
        (['in'], c_float, 'Transparency')
    ),
    COMMETHOD(
        [dispid(112), 'propget'],
        HRESULT,
        'Visible',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Visible',
        )
    ),
    COMMETHOD(
        [dispid(112), 'propput'],
        HRESULT,
        'Visible',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Visible',
        )
    ),
    COMMETHOD(
        [dispid(113), 'propget'],
        HRESULT,
        'Weight',
        (['out', 'retval'], POINTER(c_float), 'Weight')
    ),
    COMMETHOD(
        [dispid(113), 'propput'],
        HRESULT,
        'Weight',
        (['in'], c_float, 'Weight')
    ),
    COMMETHOD(
        [dispid(114), 'propget'],
        HRESULT,
        'InsetPen',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'InsetPen',
        )
    ),
    COMMETHOD(
        [dispid(114), 'propput'],
        HRESULT,
        'InsetPen',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'InsetPen',
        )
    ),
]

################################################################
# code template for LineFormat implementation
# class LineFormat_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return plCreator
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return BackColor
#     def _set(self, BackColor):
#         '-no docstring-'
#     BackColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return BeginArrowheadLength
#     def _set(self, BeginArrowheadLength):
#         '-no docstring-'
#     BeginArrowheadLength = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return BeginArrowheadStyle
#     def _set(self, BeginArrowheadStyle):
#         '-no docstring-'
#     BeginArrowheadStyle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return BeginArrowheadWidth
#     def _set(self, BeginArrowheadWidth):
#         '-no docstring-'
#     BeginArrowheadWidth = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return DashStyle
#     def _set(self, DashStyle):
#         '-no docstring-'
#     DashStyle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return EndArrowheadLength
#     def _set(self, EndArrowheadLength):
#         '-no docstring-'
#     EndArrowheadLength = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return EndArrowheadStyle
#     def _set(self, EndArrowheadStyle):
#         '-no docstring-'
#     EndArrowheadStyle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return EndArrowheadWidth
#     def _set(self, EndArrowheadWidth):
#         '-no docstring-'
#     EndArrowheadWidth = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ForeColor
#     def _set(self, ForeColor):
#         '-no docstring-'
#     ForeColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Pattern
#     def _set(self, Pattern):
#         '-no docstring-'
#     Pattern = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Style
#     def _set(self, Style):
#         '-no docstring-'
#     Style = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Transparency
#     def _set(self, Transparency):
#         '-no docstring-'
#     Transparency = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Visible
#     def _set(self, Visible):
#         '-no docstring-'
#     Visible = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Weight
#     def _set(self, Weight):
#         '-no docstring-'
#     Weight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return InsetPen
#     def _set(self, InsetPen):
#         '-no docstring-'
#     InsetPen = property(_get, _set, doc = _set.__doc__)
#


class RulerLevel(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493492-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_FirstMargin(self) -> hints.Incomplete: ...
        def _set_FirstMargin(self, FirstMargin: hints.Incomplete) -> hints.Hresult: ...
        FirstMargin = hints.normal_property(_get_FirstMargin, _set_FirstMargin)
        def _get_LeftMargin(self) -> hints.Incomplete: ...
        def _set_LeftMargin(self, LeftMargin: hints.Incomplete) -> hints.Hresult: ...
        LeftMargin = hints.normal_property(_get_LeftMargin, _set_LeftMargin)


RulerLevels._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(RulerLevel)), 'Item')
    ),
]

################################################################
# code template for RulerLevels implementation
# class RulerLevels_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#


class DataLabel(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A61-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def Select(self) -> hints.Incomplete: ...
        def _get_Border(self) -> 'ChartBorder': ...
        Border = hints.normal_property(_get_Border)
        def Delete(self) -> hints.Incomplete: ...
        def _get_Interior(self) -> 'Interior': ...
        Interior = hints.normal_property(_get_Interior)
        def _get_Fill(self) -> 'ChartFillFormat': ...
        Fill = hints.normal_property(_get_Fill)
        def _get_Caption(self) -> hints.Incomplete: ...
        def _set_Caption(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Caption = hints.normal_property(_get_Caption, _set_Caption)
        def _get_Characters(self, Start: hints.Incomplete = ..., Length: hints.Incomplete = ...) -> 'ChartCharacters': ...
        Characters = hints.named_property('Characters', _get_Characters)
        def _get_Font(self) -> 'ChartFont': ...
        Font = hints.normal_property(_get_Font)
        def _get_HorizontalAlignment(self) -> hints.Incomplete: ...
        def _set_HorizontalAlignment(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        HorizontalAlignment = hints.normal_property(_get_HorizontalAlignment, _set_HorizontalAlignment)
        def _get_Left(self) -> hints.Incomplete: ...
        def _set_Left(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Left = hints.normal_property(_get_Left, _set_Left)
        def _get_Orientation(self) -> hints.Incomplete: ...
        def _set_Orientation(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Orientation = hints.normal_property(_get_Orientation, _set_Orientation)
        def _get_Shadow(self) -> hints.Incomplete: ...
        def _set_Shadow(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Shadow = hints.normal_property(_get_Shadow, _set_Shadow)
        def _get_Text(self) -> hints.Incomplete: ...
        def _set_Text(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Text = hints.normal_property(_get_Text, _set_Text)
        def _get_Top(self) -> hints.Incomplete: ...
        def _set_Top(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Top = hints.normal_property(_get_Top, _set_Top)
        def _get_VerticalAlignment(self) -> hints.Incomplete: ...
        def _set_VerticalAlignment(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        VerticalAlignment = hints.normal_property(_get_VerticalAlignment, _set_VerticalAlignment)
        def _get_ReadingOrder(self) -> hints.Incomplete: ...
        def _set_ReadingOrder(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ReadingOrder = hints.normal_property(_get_ReadingOrder, _set_ReadingOrder)
        def _get_AutoScaleFont(self) -> hints.Incomplete: ...
        def _set_AutoScaleFont(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        AutoScaleFont = hints.normal_property(_get_AutoScaleFont, _set_AutoScaleFont)
        def _get_AutoText(self) -> hints.Incomplete: ...
        def _set_AutoText(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        AutoText = hints.normal_property(_get_AutoText, _set_AutoText)
        def _get_NumberFormat(self) -> hints.Incomplete: ...
        def _set_NumberFormat(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        NumberFormat = hints.normal_property(_get_NumberFormat, _set_NumberFormat)
        def _get_NumberFormatLinked(self) -> hints.Incomplete: ...
        def _set_NumberFormatLinked(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        NumberFormatLinked = hints.normal_property(_get_NumberFormatLinked, _set_NumberFormatLinked)
        def _get_NumberFormatLocal(self) -> hints.Incomplete: ...
        def _set_NumberFormatLocal(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        NumberFormatLocal = hints.normal_property(_get_NumberFormatLocal, _set_NumberFormatLocal)
        def _get_ShowLegendKey(self) -> hints.Incomplete: ...
        def _set_ShowLegendKey(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ShowLegendKey = hints.normal_property(_get_ShowLegendKey, _set_ShowLegendKey)
        def _get_Type(self) -> hints.Incomplete: ...
        def _set_Type(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Type = hints.normal_property(_get_Type, _set_Type)
        def _get_Position(self) -> hints.Incomplete: ...
        def _set_Position(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Position = hints.normal_property(_get_Position, _set_Position)
        def _get_ShowSeriesName(self) -> hints.Incomplete: ...
        def _set_ShowSeriesName(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ShowSeriesName = hints.normal_property(_get_ShowSeriesName, _set_ShowSeriesName)
        def _get_ShowCategoryName(self) -> hints.Incomplete: ...
        def _set_ShowCategoryName(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ShowCategoryName = hints.normal_property(_get_ShowCategoryName, _set_ShowCategoryName)
        def _get_ShowValue(self) -> hints.Incomplete: ...
        def _set_ShowValue(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ShowValue = hints.normal_property(_get_ShowValue, _set_ShowValue)
        def _get_ShowPercentage(self) -> hints.Incomplete: ...
        def _set_ShowPercentage(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ShowPercentage = hints.normal_property(_get_ShowPercentage, _set_ShowPercentage)
        def _get_ShowBubbleSize(self) -> hints.Incomplete: ...
        def _set_ShowBubbleSize(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ShowBubbleSize = hints.normal_property(_get_ShowBubbleSize, _set_ShowBubbleSize)
        def _get_Separator(self) -> hints.Incomplete: ...
        def _set_Separator(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Separator = hints.normal_property(_get_Separator, _set_Separator)
        def _get_Format(self) -> 'ChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get__Height(self) -> hints.Incomplete: ...
        _Height = hints.normal_property(_get__Height)
        def _get__Width(self) -> hints.Incomplete: ...
        _Width = hints.normal_property(_get__Width)
        def _get_Formula(self) -> hints.Incomplete: ...
        def _set_Formula(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        Formula = hints.normal_property(_get_Formula, _set_Formula)
        def _get_FormulaR1C1(self) -> hints.Incomplete: ...
        def _set_FormulaR1C1(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        FormulaR1C1 = hints.normal_property(_get_FormulaR1C1, _set_FormulaR1C1)
        def _get_FormulaLocal(self) -> hints.Incomplete: ...
        def _set_FormulaLocal(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        FormulaLocal = hints.normal_property(_get_FormulaLocal, _set_FormulaLocal)
        def _get_FormulaR1C1Local(self) -> hints.Incomplete: ...
        def _set_FormulaR1C1Local(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        FormulaR1C1Local = hints.normal_property(_get_FormulaR1C1Local, _set_FormulaR1C1Local)
        def _get_ShowRange(self) -> hints.Incomplete: ...
        def _set_ShowRange(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ShowRange = hints.normal_property(_get_ShowRange, _set_ShowRange)
        def _get_Height(self) -> hints.Incomplete: ...
        def _set_Height(self, Height: hints.Incomplete) -> hints.Hresult: ...
        Height = hints.normal_property(_get_Height, _set_Height)
        def _get_Width(self) -> hints.Incomplete: ...
        def _set_Width(self, Width: hints.Incomplete) -> hints.Hresult: ...
        Width = hints.normal_property(_get_Width, _set_Width)
        def GetProperty(self, Id: hints.Incomplete) -> hints.Incomplete: ...
        def SetProperty(self, Id: hints.Incomplete, Value: hints.Incomplete) -> hints.Hresult: ...


class ChartCharacters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A57-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Caption(self) -> hints.Incomplete: ...
        def _set_Caption(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Caption = hints.normal_property(_get_Caption, _set_Caption)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Delete(self) -> hints.Incomplete: ...
        def _get_Font(self) -> 'ChartFont': ...
        Font = hints.normal_property(_get_Font)
        def Insert(self, String: hints.Incomplete) -> hints.Incomplete: ...
        def _get_Text(self) -> hints.Incomplete: ...
        def _set_Text(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Text = hints.normal_property(_get_Text, _set_Text)
        def _get_PhoneticCharacters(self) -> hints.Incomplete: ...
        def _set_PhoneticCharacters(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        PhoneticCharacters = hints.normal_property(_get_PhoneticCharacters, _set_PhoneticCharacters)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)



DataLabel._methods_ = [
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(235)],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(128), 'hidden', 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(ChartBorder)), 'RHS')
    ),
    COMMETHOD(
        [dispid(117)],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(129), 'hidden', 'propget'],
        HRESULT,
        'Interior',
        (['out', 'retval'], POINTER(POINTER(Interior)), 'RHS')
    ),
    COMMETHOD(
        [dispid(1663), 'hidden', 'propget'],
        HRESULT,
        'Fill',
        (['out', 'retval'], POINTER(POINTER(ChartFillFormat)), 'RHS')
    ),
    COMMETHOD(
        [dispid(139), 'propget'],
        HRESULT,
        'Caption',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(139), 'propput'],
        HRESULT,
        'Caption',
        (['in'], BSTR, 'RHS')
    ),
    COMMETHOD(
        [dispid(603), 'propget'],
        HRESULT,
        'Characters',
        (['in', 'optional'], VARIANT, 'Start'),
        (['in', 'optional'], VARIANT, 'Length'),
        (['out', 'retval'], POINTER(POINTER(ChartCharacters)), 'RHS')
    ),
    COMMETHOD(
        [dispid(146), 'hidden', 'propget'],
        HRESULT,
        'Font',
        (['out', 'retval'], POINTER(POINTER(ChartFont)), 'RHS')
    ),
    COMMETHOD(
        [dispid(136), 'propget'],
        HRESULT,
        'HorizontalAlignment',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(136), 'propput'],
        HRESULT,
        'HorizontalAlignment',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(127), 'propget'],
        HRESULT,
        'Left',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(127), 'propput'],
        HRESULT,
        'Left',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(134), 'propget'],
        HRESULT,
        'Orientation',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(134), 'propput'],
        HRESULT,
        'Orientation',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'Shadow',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(103), 'propput'],
        HRESULT,
        'Shadow',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(138), 'propget'],
        HRESULT,
        'Text',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(138), 'propput'],
        HRESULT,
        'Text',
        (['in'], BSTR, 'RHS')
    ),
    COMMETHOD(
        [dispid(126), 'propget'],
        HRESULT,
        'Top',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(126), 'propput'],
        HRESULT,
        'Top',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(137), 'propget'],
        HRESULT,
        'VerticalAlignment',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(137), 'propput'],
        HRESULT,
        'VerticalAlignment',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(975), 'propget'],
        HRESULT,
        'ReadingOrder',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(975), 'propput'],
        HRESULT,
        'ReadingOrder',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(1525), 'hidden', 'propget'],
        HRESULT,
        'AutoScaleFont',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(1525), 'hidden', 'propput'],
        HRESULT,
        'AutoScaleFont',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(135), 'propget'],
        HRESULT,
        'AutoText',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(135), 'propput'],
        HRESULT,
        'AutoText',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(193), 'propget'],
        HRESULT,
        'NumberFormat',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(193), 'propput'],
        HRESULT,
        'NumberFormat',
        (['in'], BSTR, 'RHS')
    ),
    COMMETHOD(
        [dispid(194), 'propget'],
        HRESULT,
        'NumberFormatLinked',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(194), 'propput'],
        HRESULT,
        'NumberFormatLinked',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(1097), 'propget'],
        HRESULT,
        'NumberFormatLocal',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(1097), 'propput'],
        HRESULT,
        'NumberFormatLocal',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(171), 'propget'],
        HRESULT,
        'ShowLegendKey',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(171), 'propput'],
        HRESULT,
        'ShowLegendKey',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(108), 'hidden', 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(108), 'hidden', 'propput'],
        HRESULT,
        'Type',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(133), 'propget'],
        HRESULT,
        'Position',
        (['out', 'retval'], POINTER(XlDataLabelPosition), 'RHS')
    ),
    COMMETHOD(
        [dispid(133), 'propput'],
        HRESULT,
        'Position',
        (['in'], XlDataLabelPosition, 'RHS')
    ),
    COMMETHOD(
        [dispid(2022), 'propget'],
        HRESULT,
        'ShowSeriesName',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2022), 'propput'],
        HRESULT,
        'ShowSeriesName',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2023), 'propget'],
        HRESULT,
        'ShowCategoryName',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2023), 'propput'],
        HRESULT,
        'ShowCategoryName',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2024), 'propget'],
        HRESULT,
        'ShowValue',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2024), 'propput'],
        HRESULT,
        'ShowValue',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2025), 'propget'],
        HRESULT,
        'ShowPercentage',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2025), 'propput'],
        HRESULT,
        'ShowPercentage',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2026), 'propget'],
        HRESULT,
        'ShowBubbleSize',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2026), 'propput'],
        HRESULT,
        'ShowBubbleSize',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2027), 'propget'],
        HRESULT,
        'Separator',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2027), 'propput'],
        HRESULT,
        'Separator',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(ChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2003), 'hidden', 'nonbrowsable', 'propget'],
        HRESULT,
        '_Height',
        (['out', 'retval'], POINTER(c_double), 'Height')
    ),
    COMMETHOD(
        [dispid(2004), 'hidden', 'nonbrowsable', 'propget'],
        HRESULT,
        '_Width',
        (['out', 'retval'], POINTER(c_double), 'Width')
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'Formula',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'Formula',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'FormulaR1C1',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'FormulaR1C1',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(2007), 'propput'],
        HRESULT,
        'FormulaLocal',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'FormulaLocal',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(2008), 'propput'],
        HRESULT,
        'FormulaR1C1Local',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'FormulaR1C1Local',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(2028), 'propget'],
        HRESULT,
        'ShowRange',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2028), 'propput'],
        HRESULT,
        'ShowRange',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2029), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_double), 'Height')
    ),
    COMMETHOD(
        [dispid(2029), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_double, 'Height')
    ),
    COMMETHOD(
        [dispid(2030), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_double), 'Width')
    ),
    COMMETHOD(
        [dispid(2030), 'propput'],
        HRESULT,
        'Width',
        (['in'], c_double, 'Width')
    ),
    COMMETHOD(
        [dispid(2031)],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'Id'),
        (['out', 'retval'], POINTER(VARIANT), 'pValue')
    ),
    COMMETHOD(
        [dispid(2032)],
        HRESULT,
        'SetProperty',
        (['in'], BSTR, 'Id'),
        (['in'], VARIANT, 'Value')
    ),
]

################################################################
# code template for DataLabel implementation
# class DataLabel_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return RHS
#
#     def Select(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return RHS
#
#     def Delete(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Interior(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Fill(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Caption = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Characters(self, Start, Length):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Font(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     HorizontalAlignment = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Left = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Orientation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Shadow = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Text = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Top = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     VerticalAlignment = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ReadingOrder = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     AutoScaleFont = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     AutoText = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     NumberFormat = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     NumberFormatLinked = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     NumberFormatLocal = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ShowLegendKey = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Type = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Position = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ShowSeriesName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ShowCategoryName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ShowValue = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ShowPercentage = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ShowBubbleSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Separator = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def _Height(self):
#         '-no docstring-'
#         #return Height
#
#     @property
#     def _Width(self):
#         '-no docstring-'
#         #return Width
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     Formula = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     FormulaR1C1 = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     FormulaLocal = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     FormulaR1C1Local = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ShowRange = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Height
#     def _set(self, Height):
#         '-no docstring-'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Width
#     def _set(self, Width):
#         '-no docstring-'
#     Width = property(_get, _set, doc = _set.__doc__)
#
#     def GetProperty(self, Id):
#         '-no docstring-'
#         #return pValue
#
#     def SetProperty(self, Id, Value):
#         '-no docstring-'
#         #return 
#


class TextRange(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{9149348F-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_ActionSettings(self) -> 'ActionSettings': ...
        ActionSettings = hints.normal_property(_get_ActionSettings)
        def _get_Start(self) -> hints.Incomplete: ...
        Start = hints.normal_property(_get_Start)
        def _get_Length(self) -> hints.Incomplete: ...
        Length = hints.normal_property(_get_Length)
        def _get_BoundLeft(self) -> hints.Incomplete: ...
        BoundLeft = hints.normal_property(_get_BoundLeft)
        def _get_BoundTop(self) -> hints.Incomplete: ...
        BoundTop = hints.normal_property(_get_BoundTop)
        def _get_BoundWidth(self) -> hints.Incomplete: ...
        BoundWidth = hints.normal_property(_get_BoundWidth)
        def _get_BoundHeight(self) -> hints.Incomplete: ...
        BoundHeight = hints.normal_property(_get_BoundHeight)
        def Paragraphs(self, Start: hints.Incomplete = ..., Length: hints.Incomplete = ...) -> 'TextRange': ...
        def Sentences(self, Start: hints.Incomplete = ..., Length: hints.Incomplete = ...) -> 'TextRange': ...
        def Words(self, Start: hints.Incomplete = ..., Length: hints.Incomplete = ...) -> 'TextRange': ...
        def Characters(self, Start: hints.Incomplete = ..., Length: hints.Incomplete = ...) -> 'TextRange': ...
        def Lines(self, Start: hints.Incomplete = ..., Length: hints.Incomplete = ...) -> 'TextRange': ...
        def Runs(self, Start: hints.Incomplete = ..., Length: hints.Incomplete = ...) -> 'TextRange': ...
        def TrimText(self) -> 'TextRange': ...
        def _get_Text(self) -> hints.Incomplete: ...
        def _set_Text(self, Text: hints.Incomplete) -> hints.Hresult: ...
        Text = hints.normal_property(_get_Text, _set_Text)
        def InsertAfter(self, NewText: hints.Incomplete = ...) -> 'TextRange': ...
        def InsertBefore(self, NewText: hints.Incomplete = ...) -> 'TextRange': ...
        def InsertDateTime(self, DateTimeFormat: hints.Incomplete, InsertAsField: hints.Incomplete = ...) -> 'TextRange': ...
        def InsertSlideNumber(self) -> 'TextRange': ...
        def InsertSymbol(self, FontName: hints.Incomplete, CharNumber: hints.Incomplete, Unicode: hints.Incomplete = ...) -> 'TextRange': ...
        def _get_Font(self) -> 'Font': ...
        Font = hints.normal_property(_get_Font)
        def _get_ParagraphFormat(self) -> 'ParagraphFormat': ...
        ParagraphFormat = hints.normal_property(_get_ParagraphFormat)
        def _get_IndentLevel(self) -> hints.Incomplete: ...
        def _set_IndentLevel(self, IndentLevel: hints.Incomplete) -> hints.Hresult: ...
        IndentLevel = hints.normal_property(_get_IndentLevel, _set_IndentLevel)
        def Select(self) -> hints.Hresult: ...
        def Cut(self) -> hints.Hresult: ...
        def Copy(self) -> hints.Hresult: ...
        def Delete(self) -> hints.Hresult: ...
        def Paste(self) -> 'TextRange': ...
        def ChangeCase(self, Type: hints.Incomplete) -> hints.Hresult: ...
        def AddPeriods(self) -> hints.Hresult: ...
        def RemovePeriods(self) -> hints.Hresult: ...
        def Find(self, FindWhat: hints.Incomplete, After: hints.Incomplete = ..., MatchCase: hints.Incomplete = ..., WholeWords: hints.Incomplete = ...) -> 'TextRange': ...
        def Replace(self, FindWhat: hints.Incomplete, ReplaceWhat: hints.Incomplete, After: hints.Incomplete = ..., MatchCase: hints.Incomplete = ..., WholeWords: hints.Incomplete = ...) -> 'TextRange': ...
        def RotatedBounds(self) -> hints.Tuple[hints.Incomplete, hints.Incomplete, hints.Incomplete, hints.Incomplete, hints.Incomplete, hints.Incomplete, hints.Incomplete, hints.Incomplete]: ...
        def _get_LanguageID(self) -> hints.Incomplete: ...
        def _set_LanguageID(self, LanguageID: hints.Incomplete) -> hints.Hresult: ...
        LanguageID = hints.normal_property(_get_LanguageID, _set_LanguageID)
        def RtlRun(self) -> hints.Hresult: ...
        def LtrRun(self) -> hints.Hresult: ...
        def PasteSpecial(self, DataType: hints.Incomplete = ..., DisplayAsIcon: hints.Incomplete = ..., IconFileName: hints.Incomplete = ..., IconIndex: hints.Incomplete = ..., IconLabel: hints.Incomplete = ..., Link: hints.Incomplete = ...) -> 'TextRange': ...


Selection._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD([dispid(2003)], HRESULT, 'Cut'),
    COMMETHOD([dispid(2004)], HRESULT, 'Copy'),
    COMMETHOD([dispid(2005)], HRESULT, 'Delete'),
    COMMETHOD([dispid(2006)], HRESULT, 'Unselect'),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(PpSelectionType), 'Type')
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'SlideRange',
        (['out', 'retval'], POINTER(POINTER(SlideRange)), 'SlideRange')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'ShapeRange',
        (['out', 'retval'], POINTER(POINTER(ShapeRange)), 'ShapeRange')
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'TextRange',
        (['out', 'retval'], POINTER(POINTER(TextRange)), 'TextRange')
    ),
    COMMETHOD(
        [dispid(2011), 'propget'],
        HRESULT,
        'ChildShapeRange',
        (['out', 'retval'], POINTER(POINTER(ShapeRange)), 'ChildShapeRange')
    ),
    COMMETHOD(
        [dispid(2012), 'propget'],
        HRESULT,
        'HasChildShapeRange',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'HasChildShapeRange')
    ),
    COMMETHOD(
        [dispid(2013), 'propget'],
        HRESULT,
        'TextRange2',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.TextRange2)),
            'TextRange2',
        )
    ),
]

################################################################
# code template for Selection implementation
# class Selection_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Cut(self):
#         '-no docstring-'
#         #return 
#
#     def Copy(self):
#         '-no docstring-'
#         #return 
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     def Unselect(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Type(self):
#         '-no docstring-'
#         #return Type
#
#     @property
#     def SlideRange(self):
#         '-no docstring-'
#         #return SlideRange
#
#     @property
#     def ShapeRange(self):
#         '-no docstring-'
#         #return ShapeRange
#
#     @property
#     def TextRange(self):
#         '-no docstring-'
#         #return TextRange
#
#     @property
#     def ChildShapeRange(self):
#         '-no docstring-'
#         #return ChildShapeRange
#
#     @property
#     def HasChildShapeRange(self):
#         '-no docstring-'
#         #return HasChildShapeRange
#
#     @property
#     def TextRange2(self):
#         '-no docstring-'
#         #return TextRange2
#


class ConnectorFormat(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493481-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def BeginConnect(self, ConnectedShape: hints.Incomplete, ConnectionSite: hints.Incomplete) -> hints.Hresult: ...
        def BeginDisconnect(self) -> hints.Hresult: ...
        def EndConnect(self, ConnectedShape: hints.Incomplete, ConnectionSite: hints.Incomplete) -> hints.Hresult: ...
        def EndDisconnect(self) -> hints.Hresult: ...
        def _get_BeginConnected(self) -> hints.Incomplete: ...
        BeginConnected = hints.normal_property(_get_BeginConnected)
        def _get_BeginConnectedShape(self) -> 'Shape': ...
        BeginConnectedShape = hints.normal_property(_get_BeginConnectedShape)
        def _get_BeginConnectionSite(self) -> hints.Incomplete: ...
        BeginConnectionSite = hints.normal_property(_get_BeginConnectionSite)
        def _get_EndConnected(self) -> hints.Incomplete: ...
        EndConnected = hints.normal_property(_get_EndConnected)
        def _get_EndConnectedShape(self) -> 'Shape': ...
        EndConnectedShape = hints.normal_property(_get_EndConnectedShape)
        def _get_EndConnectionSite(self) -> hints.Incomplete: ...
        EndConnectionSite = hints.normal_property(_get_EndConnectionSite)
        def _get_Type(self) -> hints.Incomplete: ...
        def _set_Type(self, Type: hints.Incomplete) -> hints.Hresult: ...
        Type = hints.normal_property(_get_Type, _set_Type)


ConnectorFormat._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'plCreator')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'BeginConnect',
        (['in'], POINTER(Shape), 'ConnectedShape'),
        (['in'], c_int, 'ConnectionSite')
    ),
    COMMETHOD([dispid(11)], HRESULT, 'BeginDisconnect'),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'EndConnect',
        (['in'], POINTER(Shape), 'ConnectedShape'),
        (['in'], c_int, 'ConnectionSite')
    ),
    COMMETHOD([dispid(13)], HRESULT, 'EndDisconnect'),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'BeginConnected',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'BeginConnected',
        )
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'BeginConnectedShape',
        (['out', 'retval'], POINTER(POINTER(Shape)), 'BeginConnectedShape')
    ),
    COMMETHOD(
        [dispid(102), 'propget'],
        HRESULT,
        'BeginConnectionSite',
        (['out', 'retval'], POINTER(c_int), 'BeginConnectionSite')
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'EndConnected',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'EndConnected',
        )
    ),
    COMMETHOD(
        [dispid(104), 'propget'],
        HRESULT,
        'EndConnectedShape',
        (['out', 'retval'], POINTER(POINTER(Shape)), 'EndConnectedShape')
    ),
    COMMETHOD(
        [dispid(105), 'propget'],
        HRESULT,
        'EndConnectionSite',
        (['out', 'retval'], POINTER(c_int), 'EndConnectionSite')
    ),
    COMMETHOD(
        [dispid(106), 'propget'],
        HRESULT,
        'Type',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoConnectorType),
            'Type',
        )
    ),
    COMMETHOD(
        [dispid(106), 'propput'],
        HRESULT,
        'Type',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoConnectorType,
            'Type',
        )
    ),
]

################################################################
# code template for ConnectorFormat implementation
# class ConnectorFormat_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return plCreator
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def BeginConnect(self, ConnectedShape, ConnectionSite):
#         '-no docstring-'
#         #return 
#
#     def BeginDisconnect(self):
#         '-no docstring-'
#         #return 
#
#     def EndConnect(self, ConnectedShape, ConnectionSite):
#         '-no docstring-'
#         #return 
#
#     def EndDisconnect(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def BeginConnected(self):
#         '-no docstring-'
#         #return BeginConnected
#
#     @property
#     def BeginConnectedShape(self):
#         '-no docstring-'
#         #return BeginConnectedShape
#
#     @property
#     def BeginConnectionSite(self):
#         '-no docstring-'
#         #return BeginConnectionSite
#
#     @property
#     def EndConnected(self):
#         '-no docstring-'
#         #return EndConnected
#
#     @property
#     def EndConnectedShape(self):
#         '-no docstring-'
#         #return EndConnectedShape
#
#     @property
#     def EndConnectionSite(self):
#         '-no docstring-'
#         #return EndConnectionSite
#
#     def _get(self):
#         '-no docstring-'
#         #return Type
#     def _set(self, Type):
#         '-no docstring-'
#     Type = property(_get, _set, doc = _set.__doc__)
#


class Axes(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A52-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def Item(self, Type: hints.Incomplete, AxisGroup: hints.Incomplete = ...) -> 'Axis': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _NewEnum(self) -> hints.Incomplete: ...
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def _Default(self, Type: hints.Incomplete, AxisGroup: hints.Incomplete = ...) -> 'Axis': ...


class Axis(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A53-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_AxisBetweenCategories(self) -> hints.Incomplete: ...
        def _set_AxisBetweenCategories(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        AxisBetweenCategories = hints.normal_property(_get_AxisBetweenCategories, _set_AxisBetweenCategories)
        def _get_AxisGroup(self) -> hints.Incomplete: ...
        AxisGroup = hints.normal_property(_get_AxisGroup)
        def _get_AxisTitle(self) -> 'AxisTitle': ...
        AxisTitle = hints.normal_property(_get_AxisTitle)
        def _get_CategoryNames(self) -> hints.Incomplete: ...
        def _set_CategoryNames(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        CategoryNames = hints.normal_property(_get_CategoryNames, _set_CategoryNames)
        def _get_Crosses(self) -> hints.Incomplete: ...
        def _set_Crosses(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Crosses = hints.normal_property(_get_Crosses, _set_Crosses)
        def _get_CrossesAt(self) -> hints.Incomplete: ...
        def _set_CrossesAt(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        CrossesAt = hints.normal_property(_get_CrossesAt, _set_CrossesAt)
        def Delete(self) -> hints.Incomplete: ...
        def _get_HasMajorGridlines(self) -> hints.Incomplete: ...
        def _set_HasMajorGridlines(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        HasMajorGridlines = hints.normal_property(_get_HasMajorGridlines, _set_HasMajorGridlines)
        def _get_HasMinorGridlines(self) -> hints.Incomplete: ...
        def _set_HasMinorGridlines(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        HasMinorGridlines = hints.normal_property(_get_HasMinorGridlines, _set_HasMinorGridlines)
        def _get_HasTitle(self) -> hints.Incomplete: ...
        def _set_HasTitle(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        HasTitle = hints.normal_property(_get_HasTitle, _set_HasTitle)
        def _get_MajorGridlines(self) -> 'Gridlines': ...
        MajorGridlines = hints.normal_property(_get_MajorGridlines)
        def _get_MajorTickMark(self) -> hints.Incomplete: ...
        def _set_MajorTickMark(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MajorTickMark = hints.normal_property(_get_MajorTickMark, _set_MajorTickMark)
        def _get_MajorUnit(self) -> hints.Incomplete: ...
        def _set_MajorUnit(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MajorUnit = hints.normal_property(_get_MajorUnit, _set_MajorUnit)
        def _get_LogBase(self) -> hints.Incomplete: ...
        def _set_LogBase(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        LogBase = hints.normal_property(_get_LogBase, _set_LogBase)
        def _get_TickLabelSpacingIsAuto(self) -> hints.Incomplete: ...
        def _set_TickLabelSpacingIsAuto(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        TickLabelSpacingIsAuto = hints.normal_property(_get_TickLabelSpacingIsAuto, _set_TickLabelSpacingIsAuto)
        def _get_MajorUnitIsAuto(self) -> hints.Incomplete: ...
        def _set_MajorUnitIsAuto(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MajorUnitIsAuto = hints.normal_property(_get_MajorUnitIsAuto, _set_MajorUnitIsAuto)
        def _get_MaximumScale(self) -> hints.Incomplete: ...
        def _set_MaximumScale(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MaximumScale = hints.normal_property(_get_MaximumScale, _set_MaximumScale)
        def _get_MaximumScaleIsAuto(self) -> hints.Incomplete: ...
        def _set_MaximumScaleIsAuto(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MaximumScaleIsAuto = hints.normal_property(_get_MaximumScaleIsAuto, _set_MaximumScaleIsAuto)
        def _get_MinimumScale(self) -> hints.Incomplete: ...
        def _set_MinimumScale(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MinimumScale = hints.normal_property(_get_MinimumScale, _set_MinimumScale)
        def _get_MinimumScaleIsAuto(self) -> hints.Incomplete: ...
        def _set_MinimumScaleIsAuto(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MinimumScaleIsAuto = hints.normal_property(_get_MinimumScaleIsAuto, _set_MinimumScaleIsAuto)
        def _get_MinorGridlines(self) -> 'Gridlines': ...
        MinorGridlines = hints.normal_property(_get_MinorGridlines)
        def _get_MinorTickMark(self) -> hints.Incomplete: ...
        def _set_MinorTickMark(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MinorTickMark = hints.normal_property(_get_MinorTickMark, _set_MinorTickMark)
        def _get_MinorUnit(self) -> hints.Incomplete: ...
        def _set_MinorUnit(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MinorUnit = hints.normal_property(_get_MinorUnit, _set_MinorUnit)
        def _get_MinorUnitIsAuto(self) -> hints.Incomplete: ...
        def _set_MinorUnitIsAuto(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MinorUnitIsAuto = hints.normal_property(_get_MinorUnitIsAuto, _set_MinorUnitIsAuto)
        def _get_ReversePlotOrder(self) -> hints.Incomplete: ...
        def _set_ReversePlotOrder(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ReversePlotOrder = hints.normal_property(_get_ReversePlotOrder, _set_ReversePlotOrder)
        def _get_ScaleType(self) -> hints.Incomplete: ...
        def _set_ScaleType(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ScaleType = hints.normal_property(_get_ScaleType, _set_ScaleType)
        def Select(self) -> hints.Incomplete: ...
        def _get_TickLabelPosition(self) -> hints.Incomplete: ...
        def _set_TickLabelPosition(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        TickLabelPosition = hints.normal_property(_get_TickLabelPosition, _set_TickLabelPosition)
        def _get_TickLabels(self) -> 'TickLabels': ...
        TickLabels = hints.normal_property(_get_TickLabels)
        def _get_TickLabelSpacing(self) -> hints.Incomplete: ...
        def _set_TickLabelSpacing(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        TickLabelSpacing = hints.normal_property(_get_TickLabelSpacing, _set_TickLabelSpacing)
        def _get_TickMarkSpacing(self) -> hints.Incomplete: ...
        def _set_TickMarkSpacing(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        TickMarkSpacing = hints.normal_property(_get_TickMarkSpacing, _set_TickMarkSpacing)
        def _get_Type(self) -> hints.Incomplete: ...
        def _set_Type(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Type = hints.normal_property(_get_Type, _set_Type)
        def _get_BaseUnit(self) -> hints.Incomplete: ...
        def _set_BaseUnit(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        BaseUnit = hints.normal_property(_get_BaseUnit, _set_BaseUnit)
        def _get_BaseUnitIsAuto(self) -> hints.Incomplete: ...
        def _set_BaseUnitIsAuto(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        BaseUnitIsAuto = hints.normal_property(_get_BaseUnitIsAuto, _set_BaseUnitIsAuto)
        def _get_MajorUnitScale(self) -> hints.Incomplete: ...
        def _set_MajorUnitScale(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MajorUnitScale = hints.normal_property(_get_MajorUnitScale, _set_MajorUnitScale)
        def _get_MinorUnitScale(self) -> hints.Incomplete: ...
        def _set_MinorUnitScale(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MinorUnitScale = hints.normal_property(_get_MinorUnitScale, _set_MinorUnitScale)
        def _get_CategoryType(self) -> hints.Incomplete: ...
        def _set_CategoryType(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        CategoryType = hints.normal_property(_get_CategoryType, _set_CategoryType)
        def _get_Left(self) -> hints.Incomplete: ...
        Left = hints.normal_property(_get_Left)
        def _get_Top(self) -> hints.Incomplete: ...
        Top = hints.normal_property(_get_Top)
        def _get_Width(self) -> hints.Incomplete: ...
        Width = hints.normal_property(_get_Width)
        def _get_Height(self) -> hints.Incomplete: ...
        Height = hints.normal_property(_get_Height)
        def _get_DisplayUnit(self) -> hints.Incomplete: ...
        def _set_DisplayUnit(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        DisplayUnit = hints.normal_property(_get_DisplayUnit, _set_DisplayUnit)
        def _get_DisplayUnitCustom(self) -> hints.Incomplete: ...
        def _set_DisplayUnitCustom(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        DisplayUnitCustom = hints.normal_property(_get_DisplayUnitCustom, _set_DisplayUnitCustom)
        def _get_HasDisplayUnitLabel(self) -> hints.Incomplete: ...
        def _set_HasDisplayUnitLabel(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        HasDisplayUnitLabel = hints.normal_property(_get_HasDisplayUnitLabel, _set_HasDisplayUnitLabel)
        def _get_DisplayUnitLabel(self) -> 'DisplayUnitLabel': ...
        DisplayUnitLabel = hints.normal_property(_get_DisplayUnitLabel)
        def _get_Border(self) -> 'ChartBorder': ...
        Border = hints.normal_property(_get_Border)
        def _get_Format(self) -> 'ChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_CategorySortOrder(self) -> hints.Incomplete: ...
        def _set_CategorySortOrder(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        CategorySortOrder = hints.normal_property(_get_CategorySortOrder, _set_CategorySortOrder)
        def GetProperty(self, Id: hints.Incomplete) -> hints.Incomplete: ...
        def SetProperty(self, Id: hints.Incomplete, Value: hints.Incomplete) -> hints.Hresult: ...


Axes._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(170)],
        HRESULT,
        'Item',
        (['in'], XlAxisType, 'Type'),
        (['in', 'optional'], XlAxisGroup, 'AxisGroup', 1),
        (['out', 'retval'], POINTER(POINTER(Axis)), 'RHS')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'RHS')
    ),
    COMMETHOD(
        [dispid(0), 'nonbrowsable'],
        HRESULT,
        '_Default',
        (['in'], XlAxisType, 'Type'),
        (['in', 'optional'], XlAxisGroup, 'AxisGroup', 1),
        (['out', 'retval'], POINTER(POINTER(Axis)), 'RHS')
    ),
]

################################################################
# code template for Axes implementation
# class Axes_Impl(object):
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     def Item(self, Type, AxisGroup):
#         '-no docstring-'
#         #return RHS
#
#     def _NewEnum(self):
#         '-no docstring-'
#         #return RHS
#
#     def _Default(self, Type, AxisGroup):
#         '-no docstring-'
#         #return RHS
#

ProtectedViewWindow._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Presentation',
        (['out', 'retval'], POINTER(POINTER(Presentation)), 'Presentation')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Active',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Active',
        )
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'WindowState',
        (['out', 'retval'], POINTER(PpWindowState), 'WindowState')
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'WindowState',
        (['in'], PpWindowState, 'WindowState')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Caption',
        (['out', 'retval'], POINTER(BSTR), 'Caption')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'SourcePath',
        (['out', 'retval'], POINTER(BSTR), 'SourcePath')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'SourceName',
        (['out', 'retval'], POINTER(BSTR), 'SourceName')
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'Left',
        (['out', 'retval'], POINTER(c_float), 'Left')
    ),
    COMMETHOD(
        [dispid(2008), 'propput'],
        HRESULT,
        'Left',
        (['in'], c_float, 'Left')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'Top',
        (['out', 'retval'], POINTER(c_float), 'Top')
    ),
    COMMETHOD(
        [dispid(2009), 'propput'],
        HRESULT,
        'Top',
        (['in'], c_float, 'Top')
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_float), 'Width')
    ),
    COMMETHOD(
        [dispid(2010), 'propput'],
        HRESULT,
        'Width',
        (['in'], c_float, 'Width')
    ),
    COMMETHOD(
        [dispid(2011), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_float), 'Height')
    ),
    COMMETHOD(
        [dispid(2011), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_float, 'Height')
    ),
    COMMETHOD([dispid(2012)], HRESULT, 'Activate'),
    COMMETHOD([dispid(2013)], HRESULT, 'Close'),
    COMMETHOD(
        [dispid(2014)],
        HRESULT,
        'Edit',
        (['in', 'optional'], BSTR, 'ModifyPassword', ''),
        (['out', 'retval'], POINTER(POINTER(Presentation)), 'Edit')
    ),
    COMMETHOD(
        [dispid(2015), 'restricted', 'propget'],
        HRESULT,
        'HWND',
        (['out', 'retval'], POINTER(c_int), 'HWND')
    ),
]

################################################################
# code template for ProtectedViewWindow implementation
# class ProtectedViewWindow_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Presentation(self):
#         '-no docstring-'
#         #return Presentation
#
#     @property
#     def Active(self):
#         '-no docstring-'
#         #return Active
#
#     def _get(self):
#         '-no docstring-'
#         #return WindowState
#     def _set(self, WindowState):
#         '-no docstring-'
#     WindowState = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Caption(self):
#         '-no docstring-'
#         #return Caption
#
#     @property
#     def SourcePath(self):
#         '-no docstring-'
#         #return SourcePath
#
#     @property
#     def SourceName(self):
#         '-no docstring-'
#         #return SourceName
#
#     def _get(self):
#         '-no docstring-'
#         #return Left
#     def _set(self, Left):
#         '-no docstring-'
#     Left = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Top
#     def _set(self, Top):
#         '-no docstring-'
#     Top = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Width
#     def _set(self, Width):
#         '-no docstring-'
#     Width = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Height
#     def _set(self, Height):
#         '-no docstring-'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     def Activate(self):
#         '-no docstring-'
#         #return 
#
#     def Close(self):
#         '-no docstring-'
#         #return 
#
#     def Edit(self, ModifyPassword):
#         '-no docstring-'
#         #return Edit
#
#     @property
#     def HWND(self):
#         '-no docstring-'
#         #return HWND
#


class Table(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934C3-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Columns(self) -> 'Columns': ...
        Columns = hints.normal_property(_get_Columns)
        def _get_Rows(self) -> 'Rows': ...
        Rows = hints.normal_property(_get_Rows)
        def Cell(self, Row: hints.Incomplete, Column: hints.Incomplete) -> 'Cell': ...
        def _get_TableDirection(self) -> hints.Incomplete: ...
        def _set_TableDirection(self, TableDirection: hints.Incomplete) -> hints.Hresult: ...
        TableDirection = hints.normal_property(_get_TableDirection, _set_TableDirection)
        def MergeBorders(self) -> hints.Hresult: ...
        def _get_FirstRow(self) -> hints.Incomplete: ...
        def _set_FirstRow(self, FirstRow: hints.Incomplete) -> hints.Hresult: ...
        FirstRow = hints.normal_property(_get_FirstRow, _set_FirstRow)
        def _get_LastRow(self) -> hints.Incomplete: ...
        def _set_LastRow(self, LastRow: hints.Incomplete) -> hints.Hresult: ...
        LastRow = hints.normal_property(_get_LastRow, _set_LastRow)
        def _get_FirstCol(self) -> hints.Incomplete: ...
        def _set_FirstCol(self, FirstCol: hints.Incomplete) -> hints.Hresult: ...
        FirstCol = hints.normal_property(_get_FirstCol, _set_FirstCol)
        def _get_LastCol(self) -> hints.Incomplete: ...
        def _set_LastCol(self, LastCol: hints.Incomplete) -> hints.Hresult: ...
        LastCol = hints.normal_property(_get_LastCol, _set_LastCol)
        def _get_HorizBanding(self) -> hints.Incomplete: ...
        def _set_HorizBanding(self, HorizBanding: hints.Incomplete) -> hints.Hresult: ...
        HorizBanding = hints.normal_property(_get_HorizBanding, _set_HorizBanding)
        def _get_VertBanding(self) -> hints.Incomplete: ...
        def _set_VertBanding(self, VertBanding: hints.Incomplete) -> hints.Hresult: ...
        VertBanding = hints.normal_property(_get_VertBanding, _set_VertBanding)
        def _get_Style(self) -> 'TableStyle': ...
        Style = hints.normal_property(_get_Style)
        def _get_Background(self) -> 'TableBackground': ...
        Background = hints.normal_property(_get_Background)
        def ScaleProportionally(self, scale: hints.Incomplete) -> hints.Hresult: ...
        def ApplyStyle(self, StyleID: hints.Incomplete = ..., SaveFormatting: hints.Incomplete = ...) -> hints.Hresult: ...
        def _get_AlternativeText(self) -> hints.Incomplete: ...
        def _set_AlternativeText(self, AlternativeText: hints.Incomplete) -> hints.Hresult: ...
        AlternativeText = hints.normal_property(_get_AlternativeText, _set_AlternativeText)
        def _get_Title(self) -> hints.Incomplete: ...
        def _set_Title(self, Title: hints.Incomplete) -> hints.Hresult: ...
        Title = hints.normal_property(_get_Title, _set_Title)


class Columns(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{914934C4-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Item(self, Index: hints.Incomplete) -> 'Column': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def Add(self, BeforeColumn: hints.Incomplete = ...) -> 'Column': ...


class Rows(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{914934C6-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Item(self, Index: hints.Incomplete) -> 'Row': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def Add(self, BeforeRow: hints.Incomplete = ...) -> 'Row': ...


class Cell(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934C9-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Shape(self) -> 'Shape': ...
        Shape = hints.normal_property(_get_Shape)
        def _get_Borders(self) -> 'Borders': ...
        Borders = hints.normal_property(_get_Borders)
        def Merge(self, MergeTo: hints.Incomplete) -> hints.Hresult: ...
        def Split(self, NumRows: hints.Incomplete, NumColumns: hints.Incomplete) -> hints.Hresult: ...
        def Select(self) -> hints.Hresult: ...
        def _get_Selected(self) -> hints.Incomplete: ...
        Selected = hints.normal_property(_get_Selected)



Table._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Columns',
        (['out', 'retval'], POINTER(POINTER(Columns)), 'Columns')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Rows',
        (['out', 'retval'], POINTER(POINTER(Rows)), 'Rows')
    ),
    COMMETHOD(
        [dispid(2005)],
        HRESULT,
        'Cell',
        (['in'], c_int, 'Row'),
        (['in'], c_int, 'Column'),
        (['out', 'retval'], POINTER(POINTER(Cell)), 'Cell')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'TableDirection',
        (['out', 'retval'], POINTER(PpDirection), 'TableDirection')
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'TableDirection',
        (['in'], PpDirection, 'TableDirection')
    ),
    COMMETHOD([dispid(2007), 'hidden'], HRESULT, 'MergeBorders'),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'FirstRow',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'FirstRow')
    ),
    COMMETHOD(
        [dispid(2008), 'propput'],
        HRESULT,
        'FirstRow',
        (['in'], VARIANT_BOOL, 'FirstRow')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'LastRow',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'LastRow')
    ),
    COMMETHOD(
        [dispid(2009), 'propput'],
        HRESULT,
        'LastRow',
        (['in'], VARIANT_BOOL, 'LastRow')
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'FirstCol',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'FirstCol')
    ),
    COMMETHOD(
        [dispid(2010), 'propput'],
        HRESULT,
        'FirstCol',
        (['in'], VARIANT_BOOL, 'FirstCol')
    ),
    COMMETHOD(
        [dispid(2011), 'propget'],
        HRESULT,
        'LastCol',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'LastCol')
    ),
    COMMETHOD(
        [dispid(2011), 'propput'],
        HRESULT,
        'LastCol',
        (['in'], VARIANT_BOOL, 'LastCol')
    ),
    COMMETHOD(
        [dispid(2012), 'propget'],
        HRESULT,
        'HorizBanding',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'HorizBanding')
    ),
    COMMETHOD(
        [dispid(2012), 'propput'],
        HRESULT,
        'HorizBanding',
        (['in'], VARIANT_BOOL, 'HorizBanding')
    ),
    COMMETHOD(
        [dispid(2013), 'propget'],
        HRESULT,
        'VertBanding',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'VertBanding')
    ),
    COMMETHOD(
        [dispid(2013), 'propput'],
        HRESULT,
        'VertBanding',
        (['in'], VARIANT_BOOL, 'VertBanding')
    ),
    COMMETHOD(
        [dispid(2014), 'propget'],
        HRESULT,
        'Style',
        (['out', 'retval'], POINTER(POINTER(TableStyle)), 'Style')
    ),
    COMMETHOD(
        [dispid(2015), 'propget'],
        HRESULT,
        'Background',
        (['out', 'retval'], POINTER(POINTER(TableBackground)), 'Background')
    ),
    COMMETHOD(
        [dispid(2016)],
        HRESULT,
        'ScaleProportionally',
        (['in'], c_float, 'scale')
    ),
    COMMETHOD(
        [dispid(2017)],
        HRESULT,
        'ApplyStyle',
        (['in', 'optional'], BSTR, 'StyleID', ''),
        (['in', 'optional'], VARIANT_BOOL, 'SaveFormatting', False)
    ),
    COMMETHOD(
        [dispid(2018), 'propget'],
        HRESULT,
        'AlternativeText',
        (['out', 'retval'], POINTER(BSTR), 'AlternativeText')
    ),
    COMMETHOD(
        [dispid(2018), 'propput'],
        HRESULT,
        'AlternativeText',
        (['in'], BSTR, 'AlternativeText')
    ),
    COMMETHOD(
        [dispid(2019), 'propget'],
        HRESULT,
        'Title',
        (['out', 'retval'], POINTER(BSTR), 'Title')
    ),
    COMMETHOD(
        [dispid(2019), 'propput'],
        HRESULT,
        'Title',
        (['in'], BSTR, 'Title')
    ),
]

################################################################
# code template for Table implementation
# class Table_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Columns(self):
#         '-no docstring-'
#         #return Columns
#
#     @property
#     def Rows(self):
#         '-no docstring-'
#         #return Rows
#
#     def Cell(self, Row, Column):
#         '-no docstring-'
#         #return Cell
#
#     def _get(self):
#         '-no docstring-'
#         #return TableDirection
#     def _set(self, TableDirection):
#         '-no docstring-'
#     TableDirection = property(_get, _set, doc = _set.__doc__)
#
#     def MergeBorders(self):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return FirstRow
#     def _set(self, FirstRow):
#         '-no docstring-'
#     FirstRow = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return LastRow
#     def _set(self, LastRow):
#         '-no docstring-'
#     LastRow = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return FirstCol
#     def _set(self, FirstCol):
#         '-no docstring-'
#     FirstCol = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return LastCol
#     def _set(self, LastCol):
#         '-no docstring-'
#     LastCol = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return HorizBanding
#     def _set(self, HorizBanding):
#         '-no docstring-'
#     HorizBanding = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return VertBanding
#     def _set(self, VertBanding):
#         '-no docstring-'
#     VertBanding = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Style(self):
#         '-no docstring-'
#         #return Style
#
#     @property
#     def Background(self):
#         '-no docstring-'
#         #return Background
#
#     def ScaleProportionally(self, scale):
#         '-no docstring-'
#         #return 
#
#     def ApplyStyle(self, StyleID, SaveFormatting):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return AlternativeText
#     def _set(self, AlternativeText):
#         '-no docstring-'
#     AlternativeText = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Title
#     def _set(self, Title):
#         '-no docstring-'
#     Title = property(_get, _set, doc = _set.__doc__)
#


class ChartGroups(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A5E-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Item(self, Index: hints.Incomplete) -> 'ChartGroup': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _NewEnum(self) -> hints.Incomplete: ...
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)


class ChartGroup(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A5D-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_DownBars(self) -> 'DownBars': ...
        DownBars = hints.normal_property(_get_DownBars)
        def _get_DropLines(self) -> 'DropLines': ...
        DropLines = hints.normal_property(_get_DropLines)
        def _get_HasDropLines(self) -> hints.Incomplete: ...
        def _set_HasDropLines(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        HasDropLines = hints.normal_property(_get_HasDropLines, _set_HasDropLines)
        def _get_HasHiLoLines(self) -> hints.Incomplete: ...
        def _set_HasHiLoLines(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        HasHiLoLines = hints.normal_property(_get_HasHiLoLines, _set_HasHiLoLines)
        def _get_HasRadarAxisLabels(self) -> hints.Incomplete: ...
        def _set_HasRadarAxisLabels(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        HasRadarAxisLabels = hints.normal_property(_get_HasRadarAxisLabels, _set_HasRadarAxisLabels)
        def _get_HasSeriesLines(self) -> hints.Incomplete: ...
        def _set_HasSeriesLines(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        HasSeriesLines = hints.normal_property(_get_HasSeriesLines, _set_HasSeriesLines)
        def _get_HasUpDownBars(self) -> hints.Incomplete: ...
        def _set_HasUpDownBars(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        HasUpDownBars = hints.normal_property(_get_HasUpDownBars, _set_HasUpDownBars)
        def _get_HiLoLines(self) -> 'HiLoLines': ...
        HiLoLines = hints.normal_property(_get_HiLoLines)
        def SeriesCollection(self, Index: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _get_SeriesLines(self) -> 'SeriesLines': ...
        SeriesLines = hints.normal_property(_get_SeriesLines)
        def _get_UpBars(self) -> 'UpBars': ...
        UpBars = hints.normal_property(_get_UpBars)
        def _get_VaryByCategories(self) -> hints.Incomplete: ...
        def _set_VaryByCategories(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        VaryByCategories = hints.normal_property(_get_VaryByCategories, _set_VaryByCategories)
        def _get_SizeRepresents(self) -> hints.Incomplete: ...
        def _set_SizeRepresents(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        SizeRepresents = hints.normal_property(_get_SizeRepresents, _set_SizeRepresents)
        def _get_ShowNegativeBubbles(self) -> hints.Incomplete: ...
        def _set_ShowNegativeBubbles(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ShowNegativeBubbles = hints.normal_property(_get_ShowNegativeBubbles, _set_ShowNegativeBubbles)
        def _get_SplitType(self) -> hints.Incomplete: ...
        def _set_SplitType(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        SplitType = hints.normal_property(_get_SplitType, _set_SplitType)
        def _get_SplitValue(self) -> hints.Incomplete: ...
        def _set_SplitValue(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        SplitValue = hints.normal_property(_get_SplitValue, _set_SplitValue)
        def _get_Has3DShading(self) -> hints.Incomplete: ...
        def _set_Has3DShading(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Has3DShading = hints.normal_property(_get_Has3DShading, _set_Has3DShading)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_AxisGroup(self) -> hints.Incomplete: ...
        def _set_AxisGroup(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        AxisGroup = hints.normal_property(_get_AxisGroup, _set_AxisGroup)
        def _get_BubbleScale(self) -> hints.Incomplete: ...
        def _set_BubbleScale(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        BubbleScale = hints.normal_property(_get_BubbleScale, _set_BubbleScale)
        def _get_DoughnutHoleSize(self) -> hints.Incomplete: ...
        def _set_DoughnutHoleSize(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        DoughnutHoleSize = hints.normal_property(_get_DoughnutHoleSize, _set_DoughnutHoleSize)
        def _get_FirstSliceAngle(self) -> hints.Incomplete: ...
        def _set_FirstSliceAngle(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        FirstSliceAngle = hints.normal_property(_get_FirstSliceAngle, _set_FirstSliceAngle)
        def _get_GapWidth(self) -> hints.Incomplete: ...
        def _set_GapWidth(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        GapWidth = hints.normal_property(_get_GapWidth, _set_GapWidth)
        def _get_Index(self) -> hints.Incomplete: ...
        Index = hints.normal_property(_get_Index)
        def _get_Overlap(self) -> hints.Incomplete: ...
        def _set_Overlap(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Overlap = hints.normal_property(_get_Overlap, _set_Overlap)
        def _get_RadarAxisLabels(self) -> 'TickLabels': ...
        RadarAxisLabels = hints.normal_property(_get_RadarAxisLabels)
        def _get_Subtype(self) -> hints.Incomplete: ...
        def _set_Subtype(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Subtype = hints.normal_property(_get_Subtype, _set_Subtype)
        def _get_Type(self) -> hints.Incomplete: ...
        def _set_Type(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Type = hints.normal_property(_get_Type, _set_Type)
        def _get_SecondPlotSize(self) -> hints.Incomplete: ...
        def _set_SecondPlotSize(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        SecondPlotSize = hints.normal_property(_get_SecondPlotSize, _set_SecondPlotSize)
        def CategoryCollection(self, Index: hints.Incomplete = ...) -> hints.Incomplete: ...
        def FullCategoryCollection(self, Index: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _get_BinsType(self) -> hints.Incomplete: ...
        def _set_BinsType(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        BinsType = hints.normal_property(_get_BinsType, _set_BinsType)
        def _get_BinWidthValue(self) -> hints.Incomplete: ...
        def _set_BinWidthValue(self, pval: hints.Incomplete) -> hints.Hresult: ...
        BinWidthValue = hints.normal_property(_get_BinWidthValue, _set_BinWidthValue)
        def _get_BinsCountValue(self) -> hints.Incomplete: ...
        def _set_BinsCountValue(self, pval: hints.Incomplete) -> hints.Hresult: ...
        BinsCountValue = hints.normal_property(_get_BinsCountValue, _set_BinsCountValue)
        def _get_BinsOverflowEnabled(self) -> hints.Incomplete: ...
        def _set_BinsOverflowEnabled(self, pval: hints.Incomplete) -> hints.Hresult: ...
        BinsOverflowEnabled = hints.normal_property(_get_BinsOverflowEnabled, _set_BinsOverflowEnabled)
        def _get_BinsOverflowValue(self) -> hints.Incomplete: ...
        def _set_BinsOverflowValue(self, pval: hints.Incomplete) -> hints.Hresult: ...
        BinsOverflowValue = hints.normal_property(_get_BinsOverflowValue, _set_BinsOverflowValue)
        def _get_BinsUnderflowEnabled(self) -> hints.Incomplete: ...
        def _set_BinsUnderflowEnabled(self, pval: hints.Incomplete) -> hints.Hresult: ...
        BinsUnderflowEnabled = hints.normal_property(_get_BinsUnderflowEnabled, _set_BinsUnderflowEnabled)
        def _get_BinsUnderflowValue(self) -> hints.Incomplete: ...
        def _set_BinsUnderflowValue(self, pval: hints.Incomplete) -> hints.Hresult: ...
        BinsUnderflowValue = hints.normal_property(_get_BinsUnderflowValue, _set_BinsUnderflowValue)


ChartGroups._methods_ = [
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(118), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(170)],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(ChartGroup)), 'RHS')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'RHS')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
]

################################################################
# code template for ChartGroups implementation
# class ChartGroups_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return RHS
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return RHS
#
#     def _NewEnum(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#


class _Master(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{9149346C-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Shapes(self) -> 'Shapes': ...
        Shapes = hints.normal_property(_get_Shapes)
        def _get_HeadersFooters(self) -> 'HeadersFooters': ...
        HeadersFooters = hints.normal_property(_get_HeadersFooters)
        def _get_ColorScheme(self) -> 'ColorScheme': ...
        def _set_ColorScheme(self, ColorScheme: hints.Incomplete) -> hints.Hresult: ...
        ColorScheme = hints.normal_property(_get_ColorScheme, _set_ColorScheme)
        def _get_Background(self) -> 'ShapeRange': ...
        Background = hints.normal_property(_get_Background)
        def _get_Name(self) -> hints.Incomplete: ...
        def _set_Name(self, Name: hints.Incomplete) -> hints.Hresult: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def Delete(self) -> hints.Hresult: ...
        def _get_Height(self) -> hints.Incomplete: ...
        Height = hints.normal_property(_get_Height)
        def _get_Width(self) -> hints.Incomplete: ...
        Width = hints.normal_property(_get_Width)
        def _get_TextStyles(self) -> 'TextStyles': ...
        TextStyles = hints.normal_property(_get_TextStyles)
        def _get_Hyperlinks(self) -> 'Hyperlinks': ...
        Hyperlinks = hints.normal_property(_get_Hyperlinks)
        def _get_Scripts(self) -> hints.Incomplete: ...
        Scripts = hints.normal_property(_get_Scripts)
        def _get_Design(self) -> 'Design': ...
        Design = hints.normal_property(_get_Design)
        def _get_TimeLine(self) -> 'TimeLine': ...
        TimeLine = hints.normal_property(_get_TimeLine)
        def _get_SlideShowTransition(self) -> 'SlideShowTransition': ...
        SlideShowTransition = hints.normal_property(_get_SlideShowTransition)
        def _get_CustomLayouts(self) -> 'CustomLayouts': ...
        CustomLayouts = hints.normal_property(_get_CustomLayouts)
        def _get_Theme(self) -> hints.Incomplete: ...
        Theme = hints.normal_property(_get_Theme)
        def ApplyTheme(self, themeName: hints.Incomplete) -> hints.Hresult: ...
        def _get_BackgroundStyle(self) -> hints.Incomplete: ...
        def _set_BackgroundStyle(self, BackgroundStyle: hints.Incomplete) -> hints.Hresult: ...
        BackgroundStyle = hints.normal_property(_get_BackgroundStyle, _set_BackgroundStyle)
        def _get_CustomerData(self) -> 'CustomerData': ...
        CustomerData = hints.normal_property(_get_CustomerData)
        def _get_Guides(self) -> 'Guides': ...
        Guides = hints.normal_property(_get_Guides)


class Shapes(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493475-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Item(self, Index: hints.Incomplete) -> 'Shape': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def AddCallout(self, Type: hints.Incomplete, Left: hints.Incomplete, Top: hints.Incomplete, Width: hints.Incomplete, Height: hints.Incomplete) -> 'Shape': ...
        def AddConnector(self, Type: hints.Incomplete, BeginX: hints.Incomplete, BeginY: hints.Incomplete, EndX: hints.Incomplete, EndY: hints.Incomplete) -> 'Shape': ...
        def AddCurve(self, SafeArrayOfPoints: hints.Incomplete) -> 'Shape': ...
        def AddLabel(self, Orientation: hints.Incomplete, Left: hints.Incomplete, Top: hints.Incomplete, Width: hints.Incomplete, Height: hints.Incomplete) -> 'Shape': ...
        def AddLine(self, BeginX: hints.Incomplete, BeginY: hints.Incomplete, EndX: hints.Incomplete, EndY: hints.Incomplete) -> 'Shape': ...
        def AddPicture(self, FileName: hints.Incomplete, LinkToFile: hints.Incomplete, SaveWithDocument: hints.Incomplete, Left: hints.Incomplete, Top: hints.Incomplete, Width: hints.Incomplete = ..., Height: hints.Incomplete = ...) -> 'Shape': ...
        def AddPolyline(self, SafeArrayOfPoints: hints.Incomplete) -> 'Shape': ...
        def AddShape(self, Type: hints.Incomplete, Left: hints.Incomplete, Top: hints.Incomplete, Width: hints.Incomplete, Height: hints.Incomplete) -> 'Shape': ...
        def AddTextEffect(self, PresetTextEffect: hints.Incomplete, Text: hints.Incomplete, FontName: hints.Incomplete, FontSize: hints.Incomplete, FontBold: hints.Incomplete, FontItalic: hints.Incomplete, Left: hints.Incomplete, Top: hints.Incomplete) -> 'Shape': ...
        def AddTextbox(self, Orientation: hints.Incomplete, Left: hints.Incomplete, Top: hints.Incomplete, Width: hints.Incomplete, Height: hints.Incomplete) -> 'Shape': ...
        def BuildFreeform(self, EditingType: hints.Incomplete, X1: hints.Incomplete, Y1: hints.Incomplete) -> 'FreeformBuilder': ...
        def SelectAll(self) -> hints.Hresult: ...
        def Range(self, Index: hints.Incomplete = ...) -> 'ShapeRange': ...
        def _get_HasTitle(self) -> hints.Incomplete: ...
        HasTitle = hints.normal_property(_get_HasTitle)
        def AddTitle(self) -> 'Shape': ...
        def _get_Title(self) -> 'Shape': ...
        Title = hints.normal_property(_get_Title)
        def _get_Placeholders(self) -> 'Placeholders': ...
        Placeholders = hints.normal_property(_get_Placeholders)
        def AddOLEObject(self, Left: hints.Incomplete = ..., Top: hints.Incomplete = ..., Width: hints.Incomplete = ..., Height: hints.Incomplete = ..., ClassName: hints.Incomplete = ..., FileName: hints.Incomplete = ..., DisplayAsIcon: hints.Incomplete = ..., IconFileName: hints.Incomplete = ..., IconIndex: hints.Incomplete = ..., IconLabel: hints.Incomplete = ..., Link: hints.Incomplete = ...) -> 'Shape': ...
        def AddComment(self, Left: hints.Incomplete = ..., Top: hints.Incomplete = ..., Width: hints.Incomplete = ..., Height: hints.Incomplete = ...) -> 'Shape': ...
        def AddPlaceholder(self, Type: hints.Incomplete, Left: hints.Incomplete = ..., Top: hints.Incomplete = ..., Width: hints.Incomplete = ..., Height: hints.Incomplete = ...) -> 'Shape': ...
        def AddMediaObject(self, FileName: hints.Incomplete, Left: hints.Incomplete = ..., Top: hints.Incomplete = ..., Width: hints.Incomplete = ..., Height: hints.Incomplete = ...) -> 'Shape': ...
        def Paste(self) -> 'ShapeRange': ...
        def AddTable(self, NumRows: hints.Incomplete, NumColumns: hints.Incomplete, Left: hints.Incomplete = ..., Top: hints.Incomplete = ..., Width: hints.Incomplete = ..., Height: hints.Incomplete = ...) -> 'Shape': ...
        def PasteSpecial(self, DataType: hints.Incomplete = ..., DisplayAsIcon: hints.Incomplete = ..., IconFileName: hints.Incomplete = ..., IconIndex: hints.Incomplete = ..., IconLabel: hints.Incomplete = ..., Link: hints.Incomplete = ...) -> 'ShapeRange': ...
        def AddDiagram(self, Type: hints.Incomplete, Left: hints.Incomplete, Top: hints.Incomplete, Width: hints.Incomplete, Height: hints.Incomplete) -> 'Shape': ...
        def AddCanvas(self, Left: hints.Incomplete, Top: hints.Incomplete, Width: hints.Incomplete, Height: hints.Incomplete) -> 'Shape': ...
        def AddChart(self, Type: hints.Incomplete = ..., Left: hints.Incomplete = ..., Top: hints.Incomplete = ..., Width: hints.Incomplete = ..., Height: hints.Incomplete = ...) -> 'Shape': ...
        def AddMediaObject2(self, FileName: hints.Incomplete, LinkToFile: hints.Incomplete = ..., SaveWithDocument: hints.Incomplete = ..., Left: hints.Incomplete = ..., Top: hints.Incomplete = ..., Width: hints.Incomplete = ..., Height: hints.Incomplete = ...) -> 'Shape': ...
        def AddMediaObjectFromEmbedTag(self, EmbedTag: hints.Incomplete, Left: hints.Incomplete = ..., Top: hints.Incomplete = ..., Width: hints.Incomplete = ..., Height: hints.Incomplete = ...) -> 'Shape': ...
        def AddSmartArt(self, Layout: hints.Incomplete, Left: hints.Incomplete = ..., Top: hints.Incomplete = ..., Width: hints.Incomplete = ..., Height: hints.Incomplete = ...) -> 'Shape': ...
        def AddChart2(self, Style: hints.Incomplete = ..., Type: hints.Incomplete = ..., Left: hints.Incomplete = ..., Top: hints.Incomplete = ..., Width: hints.Incomplete = ..., Height: hints.Incomplete = ..., NewLayout: hints.Incomplete = ...) -> 'Shape': ...
        def AddPicture2(self, FileName: hints.Incomplete, LinkToFile: hints.Incomplete, SaveWithDocument: hints.Incomplete, Left: hints.Incomplete, Top: hints.Incomplete, Width: hints.Incomplete = ..., Height: hints.Incomplete = ..., compress: hints.Incomplete = ...) -> 'Shape': ...
        def AddInkShapeFromXML(self, InkXML: hints.Incomplete, Left: hints.Incomplete, Top: hints.Incomplete, Width: hints.Incomplete = ..., Height: hints.Incomplete = ...) -> 'Shape': ...
        def Add3DModel(self, FileName: hints.Incomplete, LinkToFile: hints.Incomplete, SaveWithDocument: hints.Incomplete, Left: hints.Incomplete, Top: hints.Incomplete, Width: hints.Incomplete = ..., Height: hints.Incomplete = ...) -> 'Shape': ...


class HeadersFooters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493474-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_DateAndTime(self) -> 'HeaderFooter': ...
        DateAndTime = hints.normal_property(_get_DateAndTime)
        def _get_SlideNumber(self) -> 'HeaderFooter': ...
        SlideNumber = hints.normal_property(_get_SlideNumber)
        def _get_Header(self) -> 'HeaderFooter': ...
        Header = hints.normal_property(_get_Header)
        def _get_Footer(self) -> 'HeaderFooter': ...
        Footer = hints.normal_property(_get_Footer)
        def _get_DisplayOnTitleSlide(self) -> hints.Incomplete: ...
        def _set_DisplayOnTitleSlide(self, DisplayOnTitleSlide: hints.Incomplete) -> hints.Hresult: ...
        DisplayOnTitleSlide = hints.normal_property(_get_DisplayOnTitleSlide, _set_DisplayOnTitleSlide)
        def Clear(self) -> hints.Hresult: ...


class TextStyles(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{91493498-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Item(self, Type: hints.Incomplete) -> 'TextStyle': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)


class Hyperlinks(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{91493464-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Item(self, Index: hints.Incomplete) -> 'Hyperlink': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)


class Design(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934D7-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_SlideMaster(self) -> '_Master': ...
        SlideMaster = hints.normal_property(_get_SlideMaster)
        def _get_TitleMaster(self) -> '_Master': ...
        TitleMaster = hints.normal_property(_get_TitleMaster)
        def _get_HasTitleMaster(self) -> hints.Incomplete: ...
        HasTitleMaster = hints.normal_property(_get_HasTitleMaster)
        def AddTitleMaster(self) -> '_Master': ...
        def _get_Index(self) -> hints.Incomplete: ...
        Index = hints.normal_property(_get_Index)
        def _get_Name(self) -> hints.Incomplete: ...
        def _set_Name(self, Name: hints.Incomplete) -> hints.Hresult: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def _get_Preserved(self) -> hints.Incomplete: ...
        def _set_Preserved(self, Preserved: hints.Incomplete) -> hints.Hresult: ...
        Preserved = hints.normal_property(_get_Preserved, _set_Preserved)
        def MoveTo(self, toPos: hints.Incomplete) -> hints.Hresult: ...
        def Delete(self) -> hints.Hresult: ...


class TimeLine(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934DC-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_MainSequence(self) -> 'Sequence': ...
        MainSequence = hints.normal_property(_get_MainSequence)
        def _get_InteractiveSequences(self) -> 'Sequences': ...
        InteractiveSequences = hints.normal_property(_get_InteractiveSequences)


class SlideShowTransition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493471-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_AdvanceOnClick(self) -> hints.Incomplete: ...
        def _set_AdvanceOnClick(self, AdvanceOnClick: hints.Incomplete) -> hints.Hresult: ...
        AdvanceOnClick = hints.normal_property(_get_AdvanceOnClick, _set_AdvanceOnClick)
        def _get_AdvanceOnTime(self) -> hints.Incomplete: ...
        def _set_AdvanceOnTime(self, AdvanceOnTime: hints.Incomplete) -> hints.Hresult: ...
        AdvanceOnTime = hints.normal_property(_get_AdvanceOnTime, _set_AdvanceOnTime)
        def _get_AdvanceTime(self) -> hints.Incomplete: ...
        def _set_AdvanceTime(self, AdvanceTime: hints.Incomplete) -> hints.Hresult: ...
        AdvanceTime = hints.normal_property(_get_AdvanceTime, _set_AdvanceTime)
        def _get_EntryEffect(self) -> hints.Incomplete: ...
        def _set_EntryEffect(self, EntryEffect: hints.Incomplete) -> hints.Hresult: ...
        EntryEffect = hints.normal_property(_get_EntryEffect, _set_EntryEffect)
        def _get_Hidden(self) -> hints.Incomplete: ...
        def _set_Hidden(self, Hidden: hints.Incomplete) -> hints.Hresult: ...
        Hidden = hints.normal_property(_get_Hidden, _set_Hidden)
        def _get_LoopSoundUntilNext(self) -> hints.Incomplete: ...
        def _set_LoopSoundUntilNext(self, LoopSoundUntilNext: hints.Incomplete) -> hints.Hresult: ...
        LoopSoundUntilNext = hints.normal_property(_get_LoopSoundUntilNext, _set_LoopSoundUntilNext)
        def _get_SoundEffect(self) -> 'SoundEffect': ...
        SoundEffect = hints.normal_property(_get_SoundEffect)
        def _get_Speed(self) -> hints.Incomplete: ...
        def _set_Speed(self, Speed: hints.Incomplete) -> hints.Hresult: ...
        Speed = hints.normal_property(_get_Speed, _set_Speed)
        def _get_Duration(self) -> hints.Incomplete: ...
        def _set_Duration(self, Duration: hints.Incomplete) -> hints.Hresult: ...
        Duration = hints.normal_property(_get_Duration, _set_Duration)


class CustomLayouts(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{914934F2-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Item(self, Index: hints.Incomplete) -> 'CustomLayout': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def Add(self, Index: hints.Incomplete) -> 'CustomLayout': ...
        def Paste(self, Index: hints.Incomplete = ...) -> 'CustomLayout': ...


class CustomerData(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{914934F6-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Item(self, Id: hints.Incomplete) -> hints.Incomplete: ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def Add(self) -> hints.Incomplete: ...
        def Delete(self, Id: hints.Incomplete) -> hints.Hresult: ...


_Master._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Shapes',
        (['out', 'retval'], POINTER(POINTER(Shapes)), 'Shapes')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'HeadersFooters',
        (['out', 'retval'], POINTER(POINTER(HeadersFooters)), 'HeadersFooters')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'ColorScheme',
        (['out', 'retval'], POINTER(POINTER(ColorScheme)), 'ColorScheme')
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'ColorScheme',
        (['in'], POINTER(ColorScheme), 'ColorScheme')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'Background',
        (['out', 'retval'], POINTER(POINTER(ShapeRange)), 'Background')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(2007), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'Name')
    ),
    COMMETHOD([dispid(2008)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_float), 'Height')
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_float), 'Width')
    ),
    COMMETHOD(
        [dispid(2011), 'propget'],
        HRESULT,
        'TextStyles',
        (['out', 'retval'], POINTER(POINTER(TextStyles)), 'TextStyles')
    ),
    COMMETHOD(
        [dispid(2012), 'propget'],
        HRESULT,
        'Hyperlinks',
        (['out', 'retval'], POINTER(POINTER(Hyperlinks)), 'Hyperlinks')
    ),
    COMMETHOD(
        [dispid(2013), 'hidden', 'propget'],
        HRESULT,
        'Scripts',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.Scripts)),
            'Scripts',
        )
    ),
    COMMETHOD(
        [dispid(2014), 'propget'],
        HRESULT,
        'Design',
        (['out', 'retval'], POINTER(POINTER(Design)), 'Design')
    ),
    COMMETHOD(
        [dispid(2015), 'propget'],
        HRESULT,
        'TimeLine',
        (['out', 'retval'], POINTER(POINTER(TimeLine)), 'TimeLine')
    ),
    COMMETHOD(
        [dispid(2016), 'propget'],
        HRESULT,
        'SlideShowTransition',
        (
            ['out', 'retval'],
            POINTER(POINTER(SlideShowTransition)),
            'SlideShowTransition',
        )
    ),
    COMMETHOD(
        [dispid(2017), 'propget'],
        HRESULT,
        'CustomLayouts',
        (['out', 'retval'], POINTER(POINTER(CustomLayouts)), 'CustomLayouts')
    ),
    COMMETHOD(
        [dispid(2018), 'propget'],
        HRESULT,
        'Theme',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.OfficeTheme)),
            'Theme',
        )
    ),
    COMMETHOD(
        [dispid(2019)],
        HRESULT,
        'ApplyTheme',
        (['in'], BSTR, 'themeName')
    ),
    COMMETHOD(
        [dispid(2020), 'propget'],
        HRESULT,
        'BackgroundStyle',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoBackgroundStyleIndex),
            'BackgroundStyle',
        )
    ),
    COMMETHOD(
        [dispid(2020), 'propput'],
        HRESULT,
        'BackgroundStyle',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoBackgroundStyleIndex,
            'BackgroundStyle',
        )
    ),
    COMMETHOD(
        [dispid(2021), 'propget'],
        HRESULT,
        'CustomerData',
        (['out', 'retval'], POINTER(POINTER(CustomerData)), 'CustomerData')
    ),
    COMMETHOD(
        [dispid(2022), 'propget'],
        HRESULT,
        'Guides',
        (['out', 'retval'], POINTER(POINTER(Guides)), 'Guides')
    ),
]

################################################################
# code template for _Master implementation
# class _Master_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Shapes(self):
#         '-no docstring-'
#         #return Shapes
#
#     @property
#     def HeadersFooters(self):
#         '-no docstring-'
#         #return HeadersFooters
#
#     def _get(self):
#         '-no docstring-'
#         #return ColorScheme
#     def _set(self, ColorScheme):
#         '-no docstring-'
#     ColorScheme = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Background(self):
#         '-no docstring-'
#         #return Background
#
#     def _get(self):
#         '-no docstring-'
#         #return Name
#     def _set(self, Name):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Height(self):
#         '-no docstring-'
#         #return Height
#
#     @property
#     def Width(self):
#         '-no docstring-'
#         #return Width
#
#     @property
#     def TextStyles(self):
#         '-no docstring-'
#         #return TextStyles
#
#     @property
#     def Hyperlinks(self):
#         '-no docstring-'
#         #return Hyperlinks
#
#     @property
#     def Scripts(self):
#         '-no docstring-'
#         #return Scripts
#
#     @property
#     def Design(self):
#         '-no docstring-'
#         #return Design
#
#     @property
#     def TimeLine(self):
#         '-no docstring-'
#         #return TimeLine
#
#     @property
#     def SlideShowTransition(self):
#         '-no docstring-'
#         #return SlideShowTransition
#
#     @property
#     def CustomLayouts(self):
#         '-no docstring-'
#         #return CustomLayouts
#
#     @property
#     def Theme(self):
#         '-no docstring-'
#         #return Theme
#
#     def ApplyTheme(self, themeName):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return BackgroundStyle
#     def _set(self, BackgroundStyle):
#         '-no docstring-'
#     BackgroundStyle = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def CustomerData(self):
#         '-no docstring-'
#         #return CustomerData
#
#     @property
#     def Guides(self):
#         '-no docstring-'
#         #return Guides
#


class Diagram(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934DB-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Nodes(self) -> 'DiagramNodes': ...
        Nodes = hints.normal_property(_get_Nodes)
        def _get_Type(self) -> hints.Incomplete: ...
        Type = hints.normal_property(_get_Type)
        def _get_AutoLayout(self) -> hints.Incomplete: ...
        def _set_AutoLayout(self, AutoLayout: hints.Incomplete) -> hints.Hresult: ...
        AutoLayout = hints.normal_property(_get_AutoLayout, _set_AutoLayout)
        def _get_Reverse(self) -> hints.Incomplete: ...
        def _set_Reverse(self, Reverse: hints.Incomplete) -> hints.Hresult: ...
        Reverse = hints.normal_property(_get_Reverse, _set_Reverse)
        def _get_AutoFormat(self) -> hints.Incomplete: ...
        def _set_AutoFormat(self, AutoFormat: hints.Incomplete) -> hints.Hresult: ...
        AutoFormat = hints.normal_property(_get_AutoFormat, _set_AutoFormat)
        def Convert(self, Type: hints.Incomplete) -> hints.Hresult: ...
        def FitText(self) -> hints.Hresult: ...


class DiagramNodes(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934DA-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def Item(self, Index: hints.Incomplete) -> 'DiagramNode': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def SelectAll(self) -> hints.Hresult: ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)


Diagram._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'plCreator')
    ),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'Nodes',
        (['out', 'retval'], POINTER(POINTER(DiagramNodes)), 'Nodes')
    ),
    COMMETHOD(
        [dispid(102), 'propget'],
        HRESULT,
        'Type',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoDiagramType),
            'Type',
        )
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'AutoLayout',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'AutoLayout',
        )
    ),
    COMMETHOD(
        [dispid(103), 'propput'],
        HRESULT,
        'AutoLayout',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'AutoLayout',
        )
    ),
    COMMETHOD(
        [dispid(104), 'propget'],
        HRESULT,
        'Reverse',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Reverse',
        )
    ),
    COMMETHOD(
        [dispid(104), 'propput'],
        HRESULT,
        'Reverse',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Reverse',
        )
    ),
    COMMETHOD(
        [dispid(105), 'propget'],
        HRESULT,
        'AutoFormat',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'AutoFormat',
        )
    ),
    COMMETHOD(
        [dispid(105), 'propput'],
        HRESULT,
        'AutoFormat',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'AutoFormat',
        )
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'Convert',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoDiagramType,
            'Type',
        )
    ),
    COMMETHOD([dispid(11)], HRESULT, 'FitText'),
]

################################################################
# code template for Diagram implementation
# class Diagram_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return plCreator
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Nodes(self):
#         '-no docstring-'
#         #return Nodes
#
#     @property
#     def Type(self):
#         '-no docstring-'
#         #return Type
#
#     def _get(self):
#         '-no docstring-'
#         #return AutoLayout
#     def _set(self, AutoLayout):
#         '-no docstring-'
#     AutoLayout = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Reverse
#     def _set(self, Reverse):
#         '-no docstring-'
#     Reverse = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return AutoFormat
#     def _set(self, AutoFormat):
#         '-no docstring-'
#     AutoFormat = property(_get, _set, doc = _set.__doc__)
#
#     def Convert(self, Type):
#         '-no docstring-'
#         #return 
#
#     def FitText(self):
#         '-no docstring-'
#         #return 
#


class TextEffectFormat(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493482-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def ToggleVerticalText(self) -> hints.Hresult: ...
        def _get_Alignment(self) -> hints.Incomplete: ...
        def _set_Alignment(self, Alignment: hints.Incomplete) -> hints.Hresult: ...
        Alignment = hints.normal_property(_get_Alignment, _set_Alignment)
        def _get_FontBold(self) -> hints.Incomplete: ...
        def _set_FontBold(self, FontBold: hints.Incomplete) -> hints.Hresult: ...
        FontBold = hints.normal_property(_get_FontBold, _set_FontBold)
        def _get_FontItalic(self) -> hints.Incomplete: ...
        def _set_FontItalic(self, FontItalic: hints.Incomplete) -> hints.Hresult: ...
        FontItalic = hints.normal_property(_get_FontItalic, _set_FontItalic)
        def _get_FontName(self) -> hints.Incomplete: ...
        def _set_FontName(self, FontName: hints.Incomplete) -> hints.Hresult: ...
        FontName = hints.normal_property(_get_FontName, _set_FontName)
        def _get_FontSize(self) -> hints.Incomplete: ...
        def _set_FontSize(self, FontSize: hints.Incomplete) -> hints.Hresult: ...
        FontSize = hints.normal_property(_get_FontSize, _set_FontSize)
        def _get_KernedPairs(self) -> hints.Incomplete: ...
        def _set_KernedPairs(self, KernedPairs: hints.Incomplete) -> hints.Hresult: ...
        KernedPairs = hints.normal_property(_get_KernedPairs, _set_KernedPairs)
        def _get_NormalizedHeight(self) -> hints.Incomplete: ...
        def _set_NormalizedHeight(self, NormalizedHeight: hints.Incomplete) -> hints.Hresult: ...
        NormalizedHeight = hints.normal_property(_get_NormalizedHeight, _set_NormalizedHeight)
        def _get_PresetShape(self) -> hints.Incomplete: ...
        def _set_PresetShape(self, PresetShape: hints.Incomplete) -> hints.Hresult: ...
        PresetShape = hints.normal_property(_get_PresetShape, _set_PresetShape)
        def _get_PresetTextEffect(self) -> hints.Incomplete: ...
        def _set_PresetTextEffect(self, Preset: hints.Incomplete) -> hints.Hresult: ...
        PresetTextEffect = hints.normal_property(_get_PresetTextEffect, _set_PresetTextEffect)
        def _get_RotatedChars(self) -> hints.Incomplete: ...
        def _set_RotatedChars(self, RotatedChars: hints.Incomplete) -> hints.Hresult: ...
        RotatedChars = hints.normal_property(_get_RotatedChars, _set_RotatedChars)
        def _get_Text(self) -> hints.Incomplete: ...
        def _set_Text(self, Text: hints.Incomplete) -> hints.Hresult: ...
        Text = hints.normal_property(_get_Text, _set_Text)
        def _get_Tracking(self) -> hints.Incomplete: ...
        def _set_Tracking(self, Tracking: hints.Incomplete) -> hints.Hresult: ...
        Tracking = hints.normal_property(_get_Tracking, _set_Tracking)


TextEffectFormat._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'plCreator')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD([dispid(10)], HRESULT, 'ToggleVerticalText'),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'Alignment',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTextEffectAlignment),
            'Alignment',
        )
    ),
    COMMETHOD(
        [dispid(100), 'propput'],
        HRESULT,
        'Alignment',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTextEffectAlignment,
            'Alignment',
        )
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'FontBold',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'FontBold',
        )
    ),
    COMMETHOD(
        [dispid(101), 'propput'],
        HRESULT,
        'FontBold',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'FontBold',
        )
    ),
    COMMETHOD(
        [dispid(102), 'propget'],
        HRESULT,
        'FontItalic',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'FontItalic',
        )
    ),
    COMMETHOD(
        [dispid(102), 'propput'],
        HRESULT,
        'FontItalic',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'FontItalic',
        )
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'FontName',
        (['out', 'retval'], POINTER(BSTR), 'FontName')
    ),
    COMMETHOD(
        [dispid(103), 'propput'],
        HRESULT,
        'FontName',
        (['in'], BSTR, 'FontName')
    ),
    COMMETHOD(
        [dispid(104), 'propget'],
        HRESULT,
        'FontSize',
        (['out', 'retval'], POINTER(c_float), 'FontSize')
    ),
    COMMETHOD(
        [dispid(104), 'propput'],
        HRESULT,
        'FontSize',
        (['in'], c_float, 'FontSize')
    ),
    COMMETHOD(
        [dispid(105), 'propget'],
        HRESULT,
        'KernedPairs',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'KernedPairs',
        )
    ),
    COMMETHOD(
        [dispid(105), 'propput'],
        HRESULT,
        'KernedPairs',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'KernedPairs',
        )
    ),
    COMMETHOD(
        [dispid(106), 'propget'],
        HRESULT,
        'NormalizedHeight',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'NormalizedHeight',
        )
    ),
    COMMETHOD(
        [dispid(106), 'propput'],
        HRESULT,
        'NormalizedHeight',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'NormalizedHeight',
        )
    ),
    COMMETHOD(
        [dispid(107), 'propget'],
        HRESULT,
        'PresetShape',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPresetTextEffectShape),
            'PresetShape',
        )
    ),
    COMMETHOD(
        [dispid(107), 'propput'],
        HRESULT,
        'PresetShape',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPresetTextEffectShape,
            'PresetShape',
        )
    ),
    COMMETHOD(
        [dispid(108), 'propget'],
        HRESULT,
        'PresetTextEffect',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPresetTextEffect),
            'Preset',
        )
    ),
    COMMETHOD(
        [dispid(108), 'propput'],
        HRESULT,
        'PresetTextEffect',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPresetTextEffect,
            'Preset',
        )
    ),
    COMMETHOD(
        [dispid(109), 'propget'],
        HRESULT,
        'RotatedChars',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'RotatedChars',
        )
    ),
    COMMETHOD(
        [dispid(109), 'propput'],
        HRESULT,
        'RotatedChars',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'RotatedChars',
        )
    ),
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'Text',
        (['out', 'retval'], POINTER(BSTR), 'Text')
    ),
    COMMETHOD(
        [dispid(110), 'propput'],
        HRESULT,
        'Text',
        (['in'], BSTR, 'Text')
    ),
    COMMETHOD(
        [dispid(111), 'propget'],
        HRESULT,
        'Tracking',
        (['out', 'retval'], POINTER(c_float), 'Tracking')
    ),
    COMMETHOD(
        [dispid(111), 'propput'],
        HRESULT,
        'Tracking',
        (['in'], c_float, 'Tracking')
    ),
]

################################################################
# code template for TextEffectFormat implementation
# class TextEffectFormat_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return plCreator
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def ToggleVerticalText(self):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return Alignment
#     def _set(self, Alignment):
#         '-no docstring-'
#     Alignment = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return FontBold
#     def _set(self, FontBold):
#         '-no docstring-'
#     FontBold = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return FontItalic
#     def _set(self, FontItalic):
#         '-no docstring-'
#     FontItalic = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return FontName
#     def _set(self, FontName):
#         '-no docstring-'
#     FontName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return FontSize
#     def _set(self, FontSize):
#         '-no docstring-'
#     FontSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return KernedPairs
#     def _set(self, KernedPairs):
#         '-no docstring-'
#     KernedPairs = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return NormalizedHeight
#     def _set(self, NormalizedHeight):
#         '-no docstring-'
#     NormalizedHeight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return PresetShape
#     def _set(self, PresetShape):
#         '-no docstring-'
#     PresetShape = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Preset
#     def _set(self, Preset):
#         '-no docstring-'
#     PresetTextEffect = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RotatedChars
#     def _set(self, RotatedChars):
#         '-no docstring-'
#     RotatedChars = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Text
#     def _set(self, Text):
#         '-no docstring-'
#     Text = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Tracking
#     def _set(self, Tracking):
#         '-no docstring-'
#     Tracking = property(_get, _set, doc = _set.__doc__)
#


class ChartColorFormat(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A59-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_SchemeColor(self) -> hints.Incomplete: ...
        def _set_SchemeColor(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        SchemeColor = hints.normal_property(_get_SchemeColor, _set_SchemeColor)
        def _get__Default(self) -> hints.Incomplete: ...
        _Default = hints.normal_property(_get__Default)
        def _get_Type(self) -> hints.Incomplete: ...
        Type = hints.normal_property(_get_Type)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_RGB(self) -> hints.Incomplete: ...
        RGB = hints.normal_property(_get_RGB)


ChartFillFormat._methods_ = [
    COMMETHOD([dispid(2001)], HRESULT, 'Solid'),
    COMMETHOD(
        [dispid(2002)],
        HRESULT,
        'UserTextured',
        (['in'], BSTR, 'TextureFile')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'BackColor',
        (['out', 'retval'], POINTER(POINTER(ChartColorFormat)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'ForeColor',
        (['out', 'retval'], POINTER(POINTER(ChartColorFormat)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'GradientDegree',
        (['out', 'retval'], POINTER(c_float), 'RHS')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'TextureName',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2008)],
        HRESULT,
        'OneColorGradient',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoGradientStyle,
            'Style',
        ),
        (['in'], c_int, 'Variant'),
        (['in'], c_float, 'Degree')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'GradientColorType',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoGradientColorType),
            'RHS',
        )
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'GradientStyle',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoGradientStyle),
            'RHS',
        )
    ),
    COMMETHOD(
        [dispid(2011), 'propget'],
        HRESULT,
        'GradientVariant',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2012), 'propget'],
        HRESULT,
        'Pattern',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPatternType),
            'RHS',
        )
    ),
    COMMETHOD(
        [dispid(2013)],
        HRESULT,
        'Patterned',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPatternType,
            'Pattern',
        )
    ),
    COMMETHOD(
        [dispid(2014)],
        HRESULT,
        'PresetGradient',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoGradientStyle,
            'Style',
        ),
        (['in'], c_int, 'Variant'),
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPresetGradientType,
            'PresetGradientType',
        )
    ),
    COMMETHOD(
        [dispid(2015), 'propget'],
        HRESULT,
        'PresetGradientType',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPresetGradientType),
            'RHS',
        )
    ),
    COMMETHOD(
        [dispid(2016), 'propget'],
        HRESULT,
        'PresetTexture',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPresetTexture),
            'RHS',
        )
    ),
    COMMETHOD(
        [dispid(2017)],
        HRESULT,
        'PresetTextured',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPresetTexture,
            'PresetTexture',
        )
    ),
    COMMETHOD(
        [dispid(2018), 'propget'],
        HRESULT,
        'TextureType',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTextureType),
            'RHS',
        )
    ),
    COMMETHOD(
        [dispid(2019)],
        HRESULT,
        'TwoColorGradient',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoGradientStyle,
            'Style',
        ),
        (['in'], c_int, 'Variant')
    ),
    COMMETHOD(
        [dispid(2020), 'propget'],
        HRESULT,
        'Type',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoFillType),
            'RHS',
        )
    ),
    COMMETHOD(
        [dispid(2021)],
        HRESULT,
        'UserPicture',
        (['in', 'optional'], VARIANT, 'PictureFile'),
        (['in', 'optional'], VARIANT, 'PictureFormat'),
        (['in', 'optional'], VARIANT, 'PictureStackUnit'),
        (['in', 'optional'], VARIANT, 'PicturePlacement')
    ),
    COMMETHOD(
        [dispid(2022), 'propget'],
        HRESULT,
        'Visible',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'RHS',
        )
    ),
    COMMETHOD(
        [dispid(2022), 'propput'],
        HRESULT,
        'Visible',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'RHS',
        )
    ),
]

################################################################
# code template for ChartFillFormat implementation
# class ChartFillFormat_Impl(object):
#     def Solid(self):
#         '-no docstring-'
#         #return 
#
#     def UserTextured(self, TextureFile):
#         '-no docstring-'
#         #return 
#
#     @property
#     def BackColor(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def ForeColor(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def GradientDegree(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def TextureName(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     def OneColorGradient(self, Style, Variant, Degree):
#         '-no docstring-'
#         #return 
#
#     @property
#     def GradientColorType(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def GradientStyle(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def GradientVariant(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Pattern(self):
#         '-no docstring-'
#         #return RHS
#
#     def Patterned(self, Pattern):
#         '-no docstring-'
#         #return 
#
#     def PresetGradient(self, Style, Variant, PresetGradientType):
#         '-no docstring-'
#         #return 
#
#     @property
#     def PresetGradientType(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def PresetTexture(self):
#         '-no docstring-'
#         #return RHS
#
#     def PresetTextured(self, PresetTexture):
#         '-no docstring-'
#         #return 
#
#     @property
#     def TextureType(self):
#         '-no docstring-'
#         #return RHS
#
#     def TwoColorGradient(self, Style, Variant):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Type(self):
#         '-no docstring-'
#         #return RHS
#
#     def UserPicture(self, PictureFile, PictureFormat, PictureStackUnit, PicturePlacement):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Visible = property(_get, _set, doc = _set.__doc__)
#

SldEvents._methods_ = [
]

################################################################
# code template for SldEvents implementation
# class SldEvents_Impl(object):

RulerLevel._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'FirstMargin',
        (['out', 'retval'], POINTER(c_float), 'FirstMargin')
    ),
    COMMETHOD(
        [dispid(2003), 'propput'],
        HRESULT,
        'FirstMargin',
        (['in'], c_float, 'FirstMargin')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'LeftMargin',
        (['out', 'retval'], POINTER(c_float), 'LeftMargin')
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'LeftMargin',
        (['in'], c_float, 'LeftMargin')
    ),
]

################################################################
# code template for RulerLevel implementation
# class RulerLevel_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return FirstMargin
#     def _set(self, FirstMargin):
#         '-no docstring-'
#     FirstMargin = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return LeftMargin
#     def _set(self, LeftMargin):
#         '-no docstring-'
#     LeftMargin = property(_get, _set, doc = _set.__doc__)
#


class Comments(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{914934D4-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Item(self, Index: hints.Incomplete) -> 'Comment': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def Add(self, Left: hints.Incomplete, Top: hints.Incomplete, Author: hints.Incomplete, AuthorInitials: hints.Incomplete, Text: hints.Incomplete) -> 'Comment': ...
        def Add2(self, Left: hints.Incomplete, Top: hints.Incomplete, Author: hints.Incomplete, AuthorInitials: hints.Incomplete, Text: hints.Incomplete, ProviderID: hints.Incomplete, UserID: hints.Incomplete) -> 'Comment': ...


class CustomLayout(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934F3-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Shapes(self) -> 'Shapes': ...
        Shapes = hints.normal_property(_get_Shapes)
        def _get_HeadersFooters(self) -> 'HeadersFooters': ...
        HeadersFooters = hints.normal_property(_get_HeadersFooters)
        def _get_Background(self) -> 'ShapeRange': ...
        Background = hints.normal_property(_get_Background)
        def _get_Name(self) -> hints.Incomplete: ...
        def _set_Name(self, Name: hints.Incomplete) -> hints.Hresult: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def Delete(self) -> hints.Hresult: ...
        def _get_Height(self) -> hints.Incomplete: ...
        Height = hints.normal_property(_get_Height)
        def _get_Width(self) -> hints.Incomplete: ...
        Width = hints.normal_property(_get_Width)
        def _get_Hyperlinks(self) -> 'Hyperlinks': ...
        Hyperlinks = hints.normal_property(_get_Hyperlinks)
        def _get_Design(self) -> 'Design': ...
        Design = hints.normal_property(_get_Design)
        def _get_TimeLine(self) -> 'TimeLine': ...
        TimeLine = hints.normal_property(_get_TimeLine)
        def _get_SlideShowTransition(self) -> 'SlideShowTransition': ...
        SlideShowTransition = hints.normal_property(_get_SlideShowTransition)
        def _get_MatchingName(self) -> hints.Incomplete: ...
        def _set_MatchingName(self, MatchingName: hints.Incomplete) -> hints.Hresult: ...
        MatchingName = hints.normal_property(_get_MatchingName, _set_MatchingName)
        def _get_Preserved(self) -> hints.Incomplete: ...
        def _set_Preserved(self, Preserved: hints.Incomplete) -> hints.Hresult: ...
        Preserved = hints.normal_property(_get_Preserved, _set_Preserved)
        def _get_Index(self) -> hints.Incomplete: ...
        Index = hints.normal_property(_get_Index)
        def Select(self) -> hints.Hresult: ...
        def Cut(self) -> hints.Hresult: ...
        def Copy(self) -> hints.Hresult: ...
        def Duplicate(self) -> 'CustomLayout': ...
        def MoveTo(self, toPos: hints.Incomplete) -> hints.Hresult: ...
        def _get_DisplayMasterShapes(self) -> hints.Incomplete: ...
        def _set_DisplayMasterShapes(self, DisplayMasterShapes: hints.Incomplete) -> hints.Hresult: ...
        DisplayMasterShapes = hints.normal_property(_get_DisplayMasterShapes, _set_DisplayMasterShapes)
        def _get_FollowMasterBackground(self) -> hints.Incomplete: ...
        def _set_FollowMasterBackground(self, FollowMasterBackground: hints.Incomplete) -> hints.Hresult: ...
        FollowMasterBackground = hints.normal_property(_get_FollowMasterBackground, _set_FollowMasterBackground)
        def _get_ThemeColorScheme(self) -> hints.Incomplete: ...
        ThemeColorScheme = hints.normal_property(_get_ThemeColorScheme)
        def _get_CustomerData(self) -> 'CustomerData': ...
        CustomerData = hints.normal_property(_get_CustomerData)
        def _get_Guides(self) -> 'Guides': ...
        Guides = hints.normal_property(_get_Guides)


_Slide._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Shapes',
        (['out', 'retval'], POINTER(POINTER(Shapes)), 'Shapes')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'HeadersFooters',
        (['out', 'retval'], POINTER(POINTER(HeadersFooters)), 'HeadersFooters')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'SlideShowTransition',
        (
            ['out', 'retval'],
            POINTER(POINTER(SlideShowTransition)),
            'SlideShowTransition',
        )
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'ColorScheme',
        (['out', 'retval'], POINTER(POINTER(ColorScheme)), 'ColorScheme')
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'ColorScheme',
        (['in'], POINTER(ColorScheme), 'ColorScheme')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'Background',
        (['out', 'retval'], POINTER(POINTER(ShapeRange)), 'Background')
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(2008), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'Name')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'SlideID',
        (['out', 'retval'], POINTER(c_int), 'SlideID')
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'PrintSteps',
        (['out', 'retval'], POINTER(c_int), 'PrintSteps')
    ),
    COMMETHOD([dispid(2011)], HRESULT, 'Select'),
    COMMETHOD([dispid(2012)], HRESULT, 'Cut'),
    COMMETHOD([dispid(2013)], HRESULT, 'Copy'),
    COMMETHOD(
        [dispid(2014), 'propget'],
        HRESULT,
        'Layout',
        (['out', 'retval'], POINTER(PpSlideLayout), 'Layout')
    ),
    COMMETHOD(
        [dispid(2014), 'propput'],
        HRESULT,
        'Layout',
        (['in'], PpSlideLayout, 'Layout')
    ),
    COMMETHOD(
        [dispid(2015)],
        HRESULT,
        'Duplicate',
        (['out', 'retval'], POINTER(POINTER(SlideRange)), 'Duplicate')
    ),
    COMMETHOD([dispid(2016)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(2017), 'propget'],
        HRESULT,
        'Tags',
        (['out', 'retval'], POINTER(POINTER(Tags)), 'Tags')
    ),
    COMMETHOD(
        [dispid(2018), 'propget'],
        HRESULT,
        'SlideIndex',
        (['out', 'retval'], POINTER(c_int), 'SlideIndex')
    ),
    COMMETHOD(
        [dispid(2019), 'propget'],
        HRESULT,
        'SlideNumber',
        (['out', 'retval'], POINTER(c_int), 'SlideNumber')
    ),
    COMMETHOD(
        [dispid(2020), 'propget'],
        HRESULT,
        'DisplayMasterShapes',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'DisplayMasterShapes',
        )
    ),
    COMMETHOD(
        [dispid(2020), 'propput'],
        HRESULT,
        'DisplayMasterShapes',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'DisplayMasterShapes',
        )
    ),
    COMMETHOD(
        [dispid(2021), 'propget'],
        HRESULT,
        'FollowMasterBackground',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'FollowMasterBackground',
        )
    ),
    COMMETHOD(
        [dispid(2021), 'propput'],
        HRESULT,
        'FollowMasterBackground',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'FollowMasterBackground',
        )
    ),
    COMMETHOD(
        [dispid(2022), 'propget'],
        HRESULT,
        'NotesPage',
        (['out', 'retval'], POINTER(POINTER(SlideRange)), 'NotesPage')
    ),
    COMMETHOD(
        [dispid(2023), 'propget'],
        HRESULT,
        'Master',
        (['out', 'retval'], POINTER(POINTER(_Master)), 'Master')
    ),
    COMMETHOD(
        [dispid(2024), 'propget'],
        HRESULT,
        'Hyperlinks',
        (['out', 'retval'], POINTER(POINTER(Hyperlinks)), 'Hyperlinks')
    ),
    COMMETHOD(
        [dispid(2025)],
        HRESULT,
        'Export',
        (['in'], BSTR, 'FileName'),
        (['in'], BSTR, 'FilterName'),
        (['in', 'optional'], c_int, 'ScaleWidth', 0),
        (['in', 'optional'], c_int, 'ScaleHeight', 0)
    ),
    COMMETHOD(
        [dispid(2026), 'hidden', 'propget'],
        HRESULT,
        'Scripts',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.Scripts)),
            'Scripts',
        )
    ),
    COMMETHOD(
        [dispid(2028), 'propget'],
        HRESULT,
        'Comments',
        (['out', 'retval'], POINTER(POINTER(Comments)), 'Comments')
    ),
    COMMETHOD(
        [dispid(2029), 'propget'],
        HRESULT,
        'Design',
        (['out', 'retval'], POINTER(POINTER(Design)), 'Design')
    ),
    COMMETHOD(
        [dispid(2029), 'propput'],
        HRESULT,
        'Design',
        (['in'], POINTER(Design), 'Design')
    ),
    COMMETHOD(
        [dispid(2030)],
        HRESULT,
        'MoveTo',
        (['in'], c_int, 'toPos')
    ),
    COMMETHOD(
        [dispid(2031), 'propget'],
        HRESULT,
        'TimeLine',
        (['out', 'retval'], POINTER(POINTER(TimeLine)), 'TimeLine')
    ),
    COMMETHOD(
        [dispid(2032)],
        HRESULT,
        'ApplyTemplate',
        (['in'], BSTR, 'FileName')
    ),
    COMMETHOD(
        [dispid(2033), 'hidden', 'propget'],
        HRESULT,
        'SectionNumber',
        (['out', 'retval'], POINTER(c_int), 'SectionNumber')
    ),
    COMMETHOD(
        [dispid(2034), 'propget'],
        HRESULT,
        'CustomLayout',
        (['out', 'retval'], POINTER(POINTER(CustomLayout)), 'CustomLayout')
    ),
    COMMETHOD(
        [dispid(2034), 'propput'],
        HRESULT,
        'CustomLayout',
        (['in'], POINTER(CustomLayout), 'CustomLayout')
    ),
    COMMETHOD(
        [dispid(2035)],
        HRESULT,
        'ApplyTheme',
        (['in'], BSTR, 'themeName')
    ),
    COMMETHOD(
        [dispid(2036), 'propget'],
        HRESULT,
        'ThemeColorScheme',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.ThemeColorScheme)),
            'ThemeColorScheme',
        )
    ),
    COMMETHOD(
        [dispid(2037)],
        HRESULT,
        'ApplyThemeColorScheme',
        (['in'], BSTR, 'themeColorSchemeName')
    ),
    COMMETHOD(
        [dispid(2038), 'propget'],
        HRESULT,
        'BackgroundStyle',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoBackgroundStyleIndex),
            'BackgroundStyle',
        )
    ),
    COMMETHOD(
        [dispid(2038), 'propput'],
        HRESULT,
        'BackgroundStyle',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoBackgroundStyleIndex,
            'BackgroundStyle',
        )
    ),
    COMMETHOD(
        [dispid(2039), 'propget'],
        HRESULT,
        'CustomerData',
        (['out', 'retval'], POINTER(POINTER(CustomerData)), 'CustomerData')
    ),
    COMMETHOD(
        [dispid(2040), 'hidden'],
        HRESULT,
        'PublishSlides',
        (['in'], BSTR, 'SlideLibraryUrl'),
        (['in', 'optional'], VARIANT_BOOL, 'Overwrite', False),
        (['in', 'optional'], VARIANT_BOOL, 'UseSlideOrder', False)
    ),
    COMMETHOD(
        [dispid(2041)],
        HRESULT,
        'MoveToSectionStart',
        (['in'], c_int, 'toSection')
    ),
    COMMETHOD(
        [dispid(2042), 'propget'],
        HRESULT,
        'sectionIndex',
        (['out', 'retval'], POINTER(c_int), 'sectionIndex')
    ),
    COMMETHOD(
        [dispid(2043), 'propget'],
        HRESULT,
        'HasNotesPage',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'HasNotesPage',
        )
    ),
    COMMETHOD(
        [dispid(2044)],
        HRESULT,
        'ApplyTemplate2',
        (['in'], BSTR, 'FileName'),
        (['in'], BSTR, 'VariantGUID')
    ),
]

################################################################
# code template for _Slide implementation
# class _Slide_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Shapes(self):
#         '-no docstring-'
#         #return Shapes
#
#     @property
#     def HeadersFooters(self):
#         '-no docstring-'
#         #return HeadersFooters
#
#     @property
#     def SlideShowTransition(self):
#         '-no docstring-'
#         #return SlideShowTransition
#
#     def _get(self):
#         '-no docstring-'
#         #return ColorScheme
#     def _set(self, ColorScheme):
#         '-no docstring-'
#     ColorScheme = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Background(self):
#         '-no docstring-'
#         #return Background
#
#     def _get(self):
#         '-no docstring-'
#         #return Name
#     def _set(self, Name):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def SlideID(self):
#         '-no docstring-'
#         #return SlideID
#
#     @property
#     def PrintSteps(self):
#         '-no docstring-'
#         #return PrintSteps
#
#     def Select(self):
#         '-no docstring-'
#         #return 
#
#     def Cut(self):
#         '-no docstring-'
#         #return 
#
#     def Copy(self):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return Layout
#     def _set(self, Layout):
#         '-no docstring-'
#     Layout = property(_get, _set, doc = _set.__doc__)
#
#     def Duplicate(self):
#         '-no docstring-'
#         #return Duplicate
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Tags(self):
#         '-no docstring-'
#         #return Tags
#
#     @property
#     def SlideIndex(self):
#         '-no docstring-'
#         #return SlideIndex
#
#     @property
#     def SlideNumber(self):
#         '-no docstring-'
#         #return SlideNumber
#
#     def _get(self):
#         '-no docstring-'
#         #return DisplayMasterShapes
#     def _set(self, DisplayMasterShapes):
#         '-no docstring-'
#     DisplayMasterShapes = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return FollowMasterBackground
#     def _set(self, FollowMasterBackground):
#         '-no docstring-'
#     FollowMasterBackground = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def NotesPage(self):
#         '-no docstring-'
#         #return NotesPage
#
#     @property
#     def Master(self):
#         '-no docstring-'
#         #return Master
#
#     @property
#     def Hyperlinks(self):
#         '-no docstring-'
#         #return Hyperlinks
#
#     def Export(self, FileName, FilterName, ScaleWidth, ScaleHeight):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Scripts(self):
#         '-no docstring-'
#         #return Scripts
#
#     @property
#     def Comments(self):
#         '-no docstring-'
#         #return Comments
#
#     def _get(self):
#         '-no docstring-'
#         #return Design
#     def _set(self, Design):
#         '-no docstring-'
#     Design = property(_get, _set, doc = _set.__doc__)
#
#     def MoveTo(self, toPos):
#         '-no docstring-'
#         #return 
#
#     @property
#     def TimeLine(self):
#         '-no docstring-'
#         #return TimeLine
#
#     def ApplyTemplate(self, FileName):
#         '-no docstring-'
#         #return 
#
#     @property
#     def SectionNumber(self):
#         '-no docstring-'
#         #return SectionNumber
#
#     def _get(self):
#         '-no docstring-'
#         #return CustomLayout
#     def _set(self, CustomLayout):
#         '-no docstring-'
#     CustomLayout = property(_get, _set, doc = _set.__doc__)
#
#     def ApplyTheme(self, themeName):
#         '-no docstring-'
#         #return 
#
#     @property
#     def ThemeColorScheme(self):
#         '-no docstring-'
#         #return ThemeColorScheme
#
#     def ApplyThemeColorScheme(self, themeColorSchemeName):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return BackgroundStyle
#     def _set(self, BackgroundStyle):
#         '-no docstring-'
#     BackgroundStyle = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def CustomerData(self):
#         '-no docstring-'
#         #return CustomerData
#
#     def PublishSlides(self, SlideLibraryUrl, Overwrite, UseSlideOrder):
#         '-no docstring-'
#         #return 
#
#     def MoveToSectionStart(self, toSection):
#         '-no docstring-'
#         #return 
#
#     @property
#     def sectionIndex(self):
#         '-no docstring-'
#         #return sectionIndex
#
#     @property
#     def HasNotesPage(self):
#         '-no docstring-'
#         #return HasNotesPage
#
#     def ApplyTemplate2(self, FileName, VariantGUID):
#         '-no docstring-'
#         #return 
#

FreeformBuilder._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'plCreator')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'AddNodes',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoSegmentType,
            'SegmentType',
        ),
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoEditingType,
            'EditingType',
        ),
        (['in'], c_float, 'X1'),
        (['in'], c_float, 'Y1'),
        (['in', 'optional'], c_float, 'X2', 0.0),
        (['in', 'optional'], c_float, 'Y2', 0.0),
        (['in', 'optional'], c_float, 'X3', 0.0),
        (['in', 'optional'], c_float, 'Y3', 0.0)
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'ConvertToShape',
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Freeform')
    ),
]

################################################################
# code template for FreeformBuilder implementation
# class FreeformBuilder_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return plCreator
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def AddNodes(self, SegmentType, EditingType, X1, Y1, X2, Y2, X3, Y3):
#         '-no docstring-'
#         #return 
#
#     def ConvertToShape(self):
#         '-no docstring-'
#         #return Freeform
#


class Model3DFormat(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493483-5A91-11CF-8700-00AA0060263C}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_AutoFit(self) -> hints.Incomplete: ...
        def _set_AutoFit(self, AutoFit: hints.Incomplete) -> hints.Hresult: ...
        AutoFit = hints.normal_property(_get_AutoFit, _set_AutoFit)
        def _get_RotationX(self) -> hints.Incomplete: ...
        def _set_RotationX(self, RotationX: hints.Incomplete) -> hints.Hresult: ...
        RotationX = hints.normal_property(_get_RotationX, _set_RotationX)
        def _get_RotationY(self) -> hints.Incomplete: ...
        def _set_RotationY(self, RotationY: hints.Incomplete) -> hints.Hresult: ...
        RotationY = hints.normal_property(_get_RotationY, _set_RotationY)
        def _get_RotationZ(self) -> hints.Incomplete: ...
        def _set_RotationZ(self, RotationZ: hints.Incomplete) -> hints.Hresult: ...
        RotationZ = hints.normal_property(_get_RotationZ, _set_RotationZ)
        def _get_FieldOfView(self) -> hints.Incomplete: ...
        def _set_FieldOfView(self, FOV: hints.Incomplete) -> hints.Hresult: ...
        FieldOfView = hints.normal_property(_get_FieldOfView, _set_FieldOfView)
        def _get_CameraPositionX(self) -> hints.Incomplete: ...
        def _set_CameraPositionX(self, CameraPositionX: hints.Incomplete) -> hints.Hresult: ...
        CameraPositionX = hints.normal_property(_get_CameraPositionX, _set_CameraPositionX)
        def _get_CameraPositionY(self) -> hints.Incomplete: ...
        def _set_CameraPositionY(self, CameraPositionY: hints.Incomplete) -> hints.Hresult: ...
        CameraPositionY = hints.normal_property(_get_CameraPositionY, _set_CameraPositionY)
        def _get_CameraPositionZ(self) -> hints.Incomplete: ...
        def _set_CameraPositionZ(self, CameraPositionZ: hints.Incomplete) -> hints.Hresult: ...
        CameraPositionZ = hints.normal_property(_get_CameraPositionZ, _set_CameraPositionZ)
        def _get_LookAtPointX(self) -> hints.Incomplete: ...
        def _set_LookAtPointX(self, LookAtPointX: hints.Incomplete) -> hints.Hresult: ...
        LookAtPointX = hints.normal_property(_get_LookAtPointX, _set_LookAtPointX)
        def _get_LookAtPointY(self) -> hints.Incomplete: ...
        def _set_LookAtPointY(self, LookAtPointY: hints.Incomplete) -> hints.Hresult: ...
        LookAtPointY = hints.normal_property(_get_LookAtPointY, _set_LookAtPointY)
        def _get_LookAtPointZ(self) -> hints.Incomplete: ...
        def _set_LookAtPointZ(self, LookAtPointZ: hints.Incomplete) -> hints.Hresult: ...
        LookAtPointZ = hints.normal_property(_get_LookAtPointZ, _set_LookAtPointZ)
        def ResetModel(self, ResetSize: hints.Incomplete = ...) -> hints.Hresult: ...
        def IncrementRotationX(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def IncrementRotationY(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def IncrementRotationZ(self, Increment: hints.Incomplete) -> hints.Hresult: ...


Model3DFormat._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'plCreator')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'AutoFit',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'AutoFit',
        )
    ),
    COMMETHOD(
        [dispid(100), 'propput'],
        HRESULT,
        'AutoFit',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'AutoFit',
        )
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'RotationX',
        (['out', 'retval'], POINTER(c_float), 'RotationX')
    ),
    COMMETHOD(
        [dispid(101), 'propput'],
        HRESULT,
        'RotationX',
        (['in'], c_float, 'RotationX')
    ),
    COMMETHOD(
        [dispid(102), 'propget'],
        HRESULT,
        'RotationY',
        (['out', 'retval'], POINTER(c_float), 'RotationY')
    ),
    COMMETHOD(
        [dispid(102), 'propput'],
        HRESULT,
        'RotationY',
        (['in'], c_float, 'RotationY')
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'RotationZ',
        (['out', 'retval'], POINTER(c_float), 'RotationZ')
    ),
    COMMETHOD(
        [dispid(103), 'propput'],
        HRESULT,
        'RotationZ',
        (['in'], c_float, 'RotationZ')
    ),
    COMMETHOD(
        [dispid(104), 'propget'],
        HRESULT,
        'FieldOfView',
        (['out', 'retval'], POINTER(c_float), 'FOV')
    ),
    COMMETHOD(
        [dispid(104), 'propput'],
        HRESULT,
        'FieldOfView',
        (['in'], c_float, 'FOV')
    ),
    COMMETHOD(
        [dispid(105), 'propget'],
        HRESULT,
        'CameraPositionX',
        (['out', 'retval'], POINTER(c_float), 'CameraPositionX')
    ),
    COMMETHOD(
        [dispid(105), 'propput'],
        HRESULT,
        'CameraPositionX',
        (['in'], c_float, 'CameraPositionX')
    ),
    COMMETHOD(
        [dispid(106), 'propget'],
        HRESULT,
        'CameraPositionY',
        (['out', 'retval'], POINTER(c_float), 'CameraPositionY')
    ),
    COMMETHOD(
        [dispid(106), 'propput'],
        HRESULT,
        'CameraPositionY',
        (['in'], c_float, 'CameraPositionY')
    ),
    COMMETHOD(
        [dispid(107), 'propget'],
        HRESULT,
        'CameraPositionZ',
        (['out', 'retval'], POINTER(c_float), 'CameraPositionZ')
    ),
    COMMETHOD(
        [dispid(107), 'propput'],
        HRESULT,
        'CameraPositionZ',
        (['in'], c_float, 'CameraPositionZ')
    ),
    COMMETHOD(
        [dispid(108), 'propget'],
        HRESULT,
        'LookAtPointX',
        (['out', 'retval'], POINTER(c_float), 'LookAtPointX')
    ),
    COMMETHOD(
        [dispid(108), 'propput'],
        HRESULT,
        'LookAtPointX',
        (['in'], c_float, 'LookAtPointX')
    ),
    COMMETHOD(
        [dispid(109), 'propget'],
        HRESULT,
        'LookAtPointY',
        (['out', 'retval'], POINTER(c_float), 'LookAtPointY')
    ),
    COMMETHOD(
        [dispid(109), 'propput'],
        HRESULT,
        'LookAtPointY',
        (['in'], c_float, 'LookAtPointY')
    ),
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'LookAtPointZ',
        (['out', 'retval'], POINTER(c_float), 'LookAtPointZ')
    ),
    COMMETHOD(
        [dispid(110), 'propput'],
        HRESULT,
        'LookAtPointZ',
        (['in'], c_float, 'LookAtPointZ')
    ),
    COMMETHOD(
        [dispid(111)],
        HRESULT,
        'ResetModel',
        (['in', 'optional'], VARIANT_BOOL, 'ResetSize', False)
    ),
    COMMETHOD(
        [dispid(112)],
        HRESULT,
        'IncrementRotationX',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(113)],
        HRESULT,
        'IncrementRotationY',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(114)],
        HRESULT,
        'IncrementRotationZ',
        (['in'], c_float, 'Increment')
    ),
]

################################################################
# code template for Model3DFormat implementation
# class Model3DFormat_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return plCreator
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return AutoFit
#     def _set(self, AutoFit):
#         '-no docstring-'
#     AutoFit = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RotationX
#     def _set(self, RotationX):
#         '-no docstring-'
#     RotationX = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RotationY
#     def _set(self, RotationY):
#         '-no docstring-'
#     RotationY = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RotationZ
#     def _set(self, RotationZ):
#         '-no docstring-'
#     RotationZ = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return FOV
#     def _set(self, FOV):
#         '-no docstring-'
#     FieldOfView = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return CameraPositionX
#     def _set(self, CameraPositionX):
#         '-no docstring-'
#     CameraPositionX = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return CameraPositionY
#     def _set(self, CameraPositionY):
#         '-no docstring-'
#     CameraPositionY = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return CameraPositionZ
#     def _set(self, CameraPositionZ):
#         '-no docstring-'
#     CameraPositionZ = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return LookAtPointX
#     def _set(self, LookAtPointX):
#         '-no docstring-'
#     LookAtPointX = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return LookAtPointY
#     def _set(self, LookAtPointY):
#         '-no docstring-'
#     LookAtPointY = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return LookAtPointZ
#     def _set(self, LookAtPointZ):
#         '-no docstring-'
#     LookAtPointZ = property(_get, _set, doc = _set.__doc__)
#
#     def ResetModel(self, ResetSize):
#         '-no docstring-'
#         #return 
#
#     def IncrementRotationX(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def IncrementRotationY(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def IncrementRotationZ(self, Increment):
#         '-no docstring-'
#         #return 
#


class AxisTitle(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A54-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Caption(self) -> hints.Incomplete: ...
        def _set_Caption(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Caption = hints.normal_property(_get_Caption, _set_Caption)
        def _get_Characters(self, Start: hints.Incomplete = ..., Length: hints.Incomplete = ...) -> 'ChartCharacters': ...
        Characters = hints.named_property('Characters', _get_Characters)
        def _get_Font(self) -> 'ChartFont': ...
        Font = hints.normal_property(_get_Font)
        def _get_HorizontalAlignment(self) -> hints.Incomplete: ...
        def _set_HorizontalAlignment(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        HorizontalAlignment = hints.normal_property(_get_HorizontalAlignment, _set_HorizontalAlignment)
        def _get_Left(self) -> hints.Incomplete: ...
        def _set_Left(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Left = hints.normal_property(_get_Left, _set_Left)
        def _get_Orientation(self) -> hints.Incomplete: ...
        def _set_Orientation(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Orientation = hints.normal_property(_get_Orientation, _set_Orientation)
        def _get_Shadow(self) -> hints.Incomplete: ...
        def _set_Shadow(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Shadow = hints.normal_property(_get_Shadow, _set_Shadow)
        def _get_Text(self) -> hints.Incomplete: ...
        def _set_Text(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Text = hints.normal_property(_get_Text, _set_Text)
        def _get_Top(self) -> hints.Incomplete: ...
        def _set_Top(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Top = hints.normal_property(_get_Top, _set_Top)
        def _get_VerticalAlignment(self) -> hints.Incomplete: ...
        def _set_VerticalAlignment(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        VerticalAlignment = hints.normal_property(_get_VerticalAlignment, _set_VerticalAlignment)
        def _get_AutoScaleFont(self) -> hints.Incomplete: ...
        def _set_AutoScaleFont(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        AutoScaleFont = hints.normal_property(_get_AutoScaleFont, _set_AutoScaleFont)
        def _get_Interior(self) -> 'Interior': ...
        Interior = hints.normal_property(_get_Interior)
        def _get_Fill(self) -> 'ChartFillFormat': ...
        Fill = hints.normal_property(_get_Fill)
        def Delete(self) -> hints.Incomplete: ...
        def _get_Border(self) -> 'ChartBorder': ...
        Border = hints.normal_property(_get_Border)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Select(self) -> hints.Incomplete: ...
        def _get_IncludeInLayout(self) -> hints.Incomplete: ...
        def _set_IncludeInLayout(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        IncludeInLayout = hints.normal_property(_get_IncludeInLayout, _set_IncludeInLayout)
        def _get_Position(self) -> hints.Incomplete: ...
        def _set_Position(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Position = hints.normal_property(_get_Position, _set_Position)
        def _get_Format(self) -> 'ChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_ReadingOrder(self) -> hints.Incomplete: ...
        def _set_ReadingOrder(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ReadingOrder = hints.normal_property(_get_ReadingOrder, _set_ReadingOrder)
        def _get_Height(self) -> hints.Incomplete: ...
        Height = hints.normal_property(_get_Height)
        def _get_Width(self) -> hints.Incomplete: ...
        Width = hints.normal_property(_get_Width)
        def _get_Formula(self) -> hints.Incomplete: ...
        def _set_Formula(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        Formula = hints.normal_property(_get_Formula, _set_Formula)
        def _get_FormulaR1C1(self) -> hints.Incomplete: ...
        def _set_FormulaR1C1(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        FormulaR1C1 = hints.normal_property(_get_FormulaR1C1, _set_FormulaR1C1)
        def _get_FormulaLocal(self) -> hints.Incomplete: ...
        def _set_FormulaLocal(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        FormulaLocal = hints.normal_property(_get_FormulaLocal, _set_FormulaLocal)
        def _get_FormulaR1C1Local(self) -> hints.Incomplete: ...
        def _set_FormulaR1C1Local(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        FormulaR1C1Local = hints.normal_property(_get_FormulaR1C1Local, _set_FormulaR1C1Local)
        def GetProperty(self, Id: hints.Incomplete) -> hints.Incomplete: ...
        def SetProperty(self, Id: hints.Incomplete, Value: hints.Incomplete) -> hints.Hresult: ...


class Gridlines(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A6A-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def Select(self) -> hints.Incomplete: ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Border(self) -> 'ChartBorder': ...
        Border = hints.normal_property(_get_Border)
        def Delete(self) -> hints.Incomplete: ...
        def _get_Format(self) -> 'ChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def GetProperty(self, Id: hints.Incomplete) -> hints.Incomplete: ...
        def SetProperty(self, Id: hints.Incomplete, Value: hints.Incomplete) -> hints.Hresult: ...




class DisplayUnitLabel(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A64-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Caption(self) -> hints.Incomplete: ...
        def _set_Caption(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Caption = hints.normal_property(_get_Caption, _set_Caption)
        def _get_Characters(self, Start: hints.Incomplete = ..., Length: hints.Incomplete = ...) -> 'ChartCharacters': ...
        Characters = hints.named_property('Characters', _get_Characters)
        def _get_Font(self) -> 'ChartFont': ...
        Font = hints.normal_property(_get_Font)
        def _get_HorizontalAlignment(self) -> hints.Incomplete: ...
        def _set_HorizontalAlignment(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        HorizontalAlignment = hints.normal_property(_get_HorizontalAlignment, _set_HorizontalAlignment)
        def _get_Left(self) -> hints.Incomplete: ...
        def _set_Left(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Left = hints.normal_property(_get_Left, _set_Left)
        def _get_Orientation(self) -> hints.Incomplete: ...
        def _set_Orientation(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Orientation = hints.normal_property(_get_Orientation, _set_Orientation)
        def _get_Shadow(self) -> hints.Incomplete: ...
        def _set_Shadow(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Shadow = hints.normal_property(_get_Shadow, _set_Shadow)
        def _get_Text(self) -> hints.Incomplete: ...
        def _set_Text(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Text = hints.normal_property(_get_Text, _set_Text)
        def _get_Top(self) -> hints.Incomplete: ...
        def _set_Top(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Top = hints.normal_property(_get_Top, _set_Top)
        def _get_VerticalAlignment(self) -> hints.Incomplete: ...
        def _set_VerticalAlignment(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        VerticalAlignment = hints.normal_property(_get_VerticalAlignment, _set_VerticalAlignment)
        def _get_AutoScaleFont(self) -> hints.Incomplete: ...
        def _set_AutoScaleFont(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        AutoScaleFont = hints.normal_property(_get_AutoScaleFont, _set_AutoScaleFont)
        def _get_Interior(self) -> 'Interior': ...
        Interior = hints.normal_property(_get_Interior)
        def _get_Fill(self) -> 'ChartFillFormat': ...
        Fill = hints.normal_property(_get_Fill)
        def Delete(self) -> hints.Incomplete: ...
        def _get_Border(self) -> 'ChartBorder': ...
        Border = hints.normal_property(_get_Border)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Select(self) -> hints.Incomplete: ...
        def _get_Position(self) -> hints.Incomplete: ...
        def _set_Position(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Position = hints.normal_property(_get_Position, _set_Position)
        def _get_Format(self) -> 'ChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_ReadingOrder(self) -> hints.Incomplete: ...
        def _set_ReadingOrder(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ReadingOrder = hints.normal_property(_get_ReadingOrder, _set_ReadingOrder)
        def _get_Height(self) -> hints.Incomplete: ...
        Height = hints.normal_property(_get_Height)
        def _get_Width(self) -> hints.Incomplete: ...
        Width = hints.normal_property(_get_Width)
        def _get_Formula(self) -> hints.Incomplete: ...
        def _set_Formula(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        Formula = hints.normal_property(_get_Formula, _set_Formula)
        def _get_FormulaR1C1(self) -> hints.Incomplete: ...
        def _set_FormulaR1C1(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        FormulaR1C1 = hints.normal_property(_get_FormulaR1C1, _set_FormulaR1C1)
        def _get_FormulaLocal(self) -> hints.Incomplete: ...
        def _set_FormulaLocal(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        FormulaLocal = hints.normal_property(_get_FormulaLocal, _set_FormulaLocal)
        def _get_FormulaR1C1Local(self) -> hints.Incomplete: ...
        def _set_FormulaR1C1Local(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        FormulaR1C1Local = hints.normal_property(_get_FormulaR1C1Local, _set_FormulaR1C1Local)
        def GetProperty(self, Id: hints.Incomplete) -> hints.Incomplete: ...
        def SetProperty(self, Id: hints.Incomplete, Value: hints.Incomplete) -> hints.Hresult: ...



Axis._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'AxisBetweenCategories',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2001), 'propput'],
        HRESULT,
        'AxisBetweenCategories',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'AxisGroup',
        (['out', 'retval'], POINTER(XlAxisGroup), 'RHS')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'AxisTitle',
        (['out', 'retval'], POINTER(POINTER(AxisTitle)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'CategoryNames',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'CategoryNames',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'Crosses',
        (['out', 'retval'], POINTER(XlAxisCrosses), 'RHS')
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'Crosses',
        (['in'], XlAxisCrosses, 'RHS')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'CrossesAt',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'CrossesAt',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(2007)],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'HasMajorGridlines',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2008), 'propput'],
        HRESULT,
        'HasMajorGridlines',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'HasMinorGridlines',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2009), 'propput'],
        HRESULT,
        'HasMinorGridlines',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'HasTitle',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2010), 'propput'],
        HRESULT,
        'HasTitle',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2011), 'propget'],
        HRESULT,
        'MajorGridlines',
        (['out', 'retval'], POINTER(POINTER(Gridlines)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2012), 'propget'],
        HRESULT,
        'MajorTickMark',
        (['out', 'retval'], POINTER(XlTickMark), 'RHS')
    ),
    COMMETHOD(
        [dispid(2012), 'propput'],
        HRESULT,
        'MajorTickMark',
        (['in'], XlTickMark, 'RHS')
    ),
    COMMETHOD(
        [dispid(2013), 'propget'],
        HRESULT,
        'MajorUnit',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(2013), 'propput'],
        HRESULT,
        'MajorUnit',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(2014), 'propget'],
        HRESULT,
        'LogBase',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(2014), 'propput'],
        HRESULT,
        'LogBase',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(2015), 'propget'],
        HRESULT,
        'TickLabelSpacingIsAuto',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2015), 'propput'],
        HRESULT,
        'TickLabelSpacingIsAuto',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2016), 'propget'],
        HRESULT,
        'MajorUnitIsAuto',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2016), 'propput'],
        HRESULT,
        'MajorUnitIsAuto',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2017), 'propget'],
        HRESULT,
        'MaximumScale',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(2017), 'propput'],
        HRESULT,
        'MaximumScale',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(2018), 'propget'],
        HRESULT,
        'MaximumScaleIsAuto',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2018), 'propput'],
        HRESULT,
        'MaximumScaleIsAuto',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2019), 'propget'],
        HRESULT,
        'MinimumScale',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(2019), 'propput'],
        HRESULT,
        'MinimumScale',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(2020), 'propget'],
        HRESULT,
        'MinimumScaleIsAuto',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2020), 'propput'],
        HRESULT,
        'MinimumScaleIsAuto',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2021), 'propget'],
        HRESULT,
        'MinorGridlines',
        (['out', 'retval'], POINTER(POINTER(Gridlines)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2022), 'propget'],
        HRESULT,
        'MinorTickMark',
        (['out', 'retval'], POINTER(XlTickMark), 'RHS')
    ),
    COMMETHOD(
        [dispid(2022), 'propput'],
        HRESULT,
        'MinorTickMark',
        (['in'], XlTickMark, 'RHS')
    ),
    COMMETHOD(
        [dispid(2023), 'propget'],
        HRESULT,
        'MinorUnit',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(2023), 'propput'],
        HRESULT,
        'MinorUnit',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(2024), 'propget'],
        HRESULT,
        'MinorUnitIsAuto',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2024), 'propput'],
        HRESULT,
        'MinorUnitIsAuto',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2025), 'propget'],
        HRESULT,
        'ReversePlotOrder',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2025), 'propput'],
        HRESULT,
        'ReversePlotOrder',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2026), 'propget'],
        HRESULT,
        'ScaleType',
        (['out', 'retval'], POINTER(XlScaleType), 'RHS')
    ),
    COMMETHOD(
        [dispid(2026), 'propput'],
        HRESULT,
        'ScaleType',
        (['in'], XlScaleType, 'RHS')
    ),
    COMMETHOD(
        [dispid(2027)],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2028), 'propget'],
        HRESULT,
        'TickLabelPosition',
        (['out', 'retval'], POINTER(XlTickLabelPosition), 'RHS')
    ),
    COMMETHOD(
        [dispid(2028), 'propput'],
        HRESULT,
        'TickLabelPosition',
        (['in'], XlTickLabelPosition, 'RHS')
    ),
    COMMETHOD(
        [dispid(2029), 'propget'],
        HRESULT,
        'TickLabels',
        (['out', 'retval'], POINTER(POINTER(TickLabels)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2030), 'propget'],
        HRESULT,
        'TickLabelSpacing',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2030), 'propput'],
        HRESULT,
        'TickLabelSpacing',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(2031), 'propget'],
        HRESULT,
        'TickMarkSpacing',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2031), 'propput'],
        HRESULT,
        'TickMarkSpacing',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(2032), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(XlAxisType), 'RHS')
    ),
    COMMETHOD(
        [dispid(2032), 'propput'],
        HRESULT,
        'Type',
        (['in'], XlAxisType, 'RHS')
    ),
    COMMETHOD(
        [dispid(2033), 'propget'],
        HRESULT,
        'BaseUnit',
        (['out', 'retval'], POINTER(XlTimeUnit), 'RHS')
    ),
    COMMETHOD(
        [dispid(2033), 'propput'],
        HRESULT,
        'BaseUnit',
        (['in'], XlTimeUnit, 'RHS')
    ),
    COMMETHOD(
        [dispid(2034), 'propget'],
        HRESULT,
        'BaseUnitIsAuto',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2034), 'propput'],
        HRESULT,
        'BaseUnitIsAuto',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2035), 'propget'],
        HRESULT,
        'MajorUnitScale',
        (['out', 'retval'], POINTER(XlTimeUnit), 'RHS')
    ),
    COMMETHOD(
        [dispid(2035), 'propput'],
        HRESULT,
        'MajorUnitScale',
        (['in'], XlTimeUnit, 'RHS')
    ),
    COMMETHOD(
        [dispid(2036), 'propget'],
        HRESULT,
        'MinorUnitScale',
        (['out', 'retval'], POINTER(XlTimeUnit), 'RHS')
    ),
    COMMETHOD(
        [dispid(2036), 'propput'],
        HRESULT,
        'MinorUnitScale',
        (['in'], XlTimeUnit, 'RHS')
    ),
    COMMETHOD(
        [dispid(2037), 'propget'],
        HRESULT,
        'CategoryType',
        (['out', 'retval'], POINTER(XlCategoryType), 'RHS')
    ),
    COMMETHOD(
        [dispid(2037), 'propput'],
        HRESULT,
        'CategoryType',
        (['in'], XlCategoryType, 'RHS')
    ),
    COMMETHOD(
        [dispid(2038), 'propget'],
        HRESULT,
        'Left',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(2039), 'propget'],
        HRESULT,
        'Top',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(2040), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(2041), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(2042), 'propget'],
        HRESULT,
        'DisplayUnit',
        (['out', 'retval'], POINTER(XlDisplayUnit), 'RHS')
    ),
    COMMETHOD(
        [dispid(2042), 'propput'],
        HRESULT,
        'DisplayUnit',
        (['in'], XlDisplayUnit, 'RHS')
    ),
    COMMETHOD(
        [dispid(2043), 'propget'],
        HRESULT,
        'DisplayUnitCustom',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(2043), 'propput'],
        HRESULT,
        'DisplayUnitCustom',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(2044), 'propget'],
        HRESULT,
        'HasDisplayUnitLabel',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2044), 'propput'],
        HRESULT,
        'HasDisplayUnitLabel',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2045), 'propget'],
        HRESULT,
        'DisplayUnitLabel',
        (['out', 'retval'], POINTER(POINTER(DisplayUnitLabel)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2046), 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(ChartBorder)), 'ppborder')
    ),
    COMMETHOD(
        [dispid(2047), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(ChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2048), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2049), 'propget'],
        HRESULT,
        'CategorySortOrder',
        (['out', 'retval'], POINTER(XlCategorySortOrder), 'RHS')
    ),
    COMMETHOD(
        [dispid(2049), 'propput'],
        HRESULT,
        'CategorySortOrder',
        (['in'], XlCategorySortOrder, 'RHS')
    ),
    COMMETHOD(
        [dispid(2050)],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'Id'),
        (['out', 'retval'], POINTER(VARIANT), 'pValue')
    ),
    COMMETHOD(
        [dispid(2051)],
        HRESULT,
        'SetProperty',
        (['in'], BSTR, 'Id'),
        (['in'], VARIANT, 'Value')
    ),
]

################################################################
# code template for Axis implementation
# class Axis_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     AxisBetweenCategories = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def AxisGroup(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def AxisTitle(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     CategoryNames = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Crosses = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     CrossesAt = property(_get, _set, doc = _set.__doc__)
#
#     def Delete(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     HasMajorGridlines = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     HasMinorGridlines = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     HasTitle = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def MajorGridlines(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MajorTickMark = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MajorUnit = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     LogBase = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     TickLabelSpacingIsAuto = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MajorUnitIsAuto = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MaximumScale = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MaximumScaleIsAuto = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MinimumScale = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MinimumScaleIsAuto = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def MinorGridlines(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MinorTickMark = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MinorUnit = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MinorUnitIsAuto = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ReversePlotOrder = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ScaleType = property(_get, _set, doc = _set.__doc__)
#
#     def Select(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     TickLabelPosition = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def TickLabels(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     TickLabelSpacing = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     TickMarkSpacing = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Type = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     BaseUnit = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     BaseUnitIsAuto = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MajorUnitScale = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MinorUnitScale = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     CategoryType = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Left(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Top(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Width(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Height(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     DisplayUnit = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     DisplayUnitCustom = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     HasDisplayUnitLabel = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def DisplayUnitLabel(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return ppborder
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     CategorySortOrder = property(_get, _set, doc = _set.__doc__)
#
#     def GetProperty(self, Id):
#         '-no docstring-'
#         #return pValue
#
#     def SetProperty(self, Id, Value):
#         '-no docstring-'
#         #return 
#


class Column(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934C5-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Cells(self) -> 'CellRange': ...
        Cells = hints.normal_property(_get_Cells)
        def Select(self) -> hints.Hresult: ...
        def Delete(self) -> hints.Hresult: ...
        def _get_Width(self) -> hints.Incomplete: ...
        def _set_Width(self, Width: hints.Incomplete) -> hints.Hresult: ...
        Width = hints.normal_property(_get_Width, _set_Width)


Columns._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(Column)), 'Item')
    ),
    COMMETHOD(
        [dispid(2003)],
        HRESULT,
        'Add',
        (['in', 'optional'], c_int, 'BeforeColumn', -1),
        (['out', 'retval'], POINTER(POINTER(Column)), 'Add')
    ),
]

################################################################
# code template for Columns implementation
# class Columns_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     def Add(self, BeforeColumn):
#         '-no docstring-'
#         #return Add
#

SlideRange._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Shapes',
        (['out', 'retval'], POINTER(POINTER(Shapes)), 'Shapes')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'HeadersFooters',
        (['out', 'retval'], POINTER(POINTER(HeadersFooters)), 'HeadersFooters')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'SlideShowTransition',
        (
            ['out', 'retval'],
            POINTER(POINTER(SlideShowTransition)),
            'SlideShowTransition',
        )
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'ColorScheme',
        (['out', 'retval'], POINTER(POINTER(ColorScheme)), 'ColorScheme')
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'ColorScheme',
        (['in'], POINTER(ColorScheme), 'ColorScheme')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'Background',
        (['out', 'retval'], POINTER(POINTER(ShapeRange)), 'Background')
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(2008), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'Name')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'SlideID',
        (['out', 'retval'], POINTER(c_int), 'SlideID')
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'PrintSteps',
        (['out', 'retval'], POINTER(c_int), 'PrintSteps')
    ),
    COMMETHOD([dispid(2011)], HRESULT, 'Select'),
    COMMETHOD([dispid(2012)], HRESULT, 'Cut'),
    COMMETHOD([dispid(2013)], HRESULT, 'Copy'),
    COMMETHOD(
        [dispid(2014), 'propget'],
        HRESULT,
        'Layout',
        (['out', 'retval'], POINTER(PpSlideLayout), 'Layout')
    ),
    COMMETHOD(
        [dispid(2014), 'propput'],
        HRESULT,
        'Layout',
        (['in'], PpSlideLayout, 'Layout')
    ),
    COMMETHOD(
        [dispid(2015)],
        HRESULT,
        'Duplicate',
        (['out', 'retval'], POINTER(POINTER(SlideRange)), 'Duplicate')
    ),
    COMMETHOD([dispid(2016)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(2017), 'propget'],
        HRESULT,
        'Tags',
        (['out', 'retval'], POINTER(POINTER(Tags)), 'Tags')
    ),
    COMMETHOD(
        [dispid(2018), 'propget'],
        HRESULT,
        'SlideIndex',
        (['out', 'retval'], POINTER(c_int), 'SlideIndex')
    ),
    COMMETHOD(
        [dispid(2019), 'propget'],
        HRESULT,
        'SlideNumber',
        (['out', 'retval'], POINTER(c_int), 'SlideNumber')
    ),
    COMMETHOD(
        [dispid(2020), 'propget'],
        HRESULT,
        'DisplayMasterShapes',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'DisplayMasterShapes',
        )
    ),
    COMMETHOD(
        [dispid(2020), 'propput'],
        HRESULT,
        'DisplayMasterShapes',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'DisplayMasterShapes',
        )
    ),
    COMMETHOD(
        [dispid(2021), 'propget'],
        HRESULT,
        'FollowMasterBackground',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'FollowMasterBackground',
        )
    ),
    COMMETHOD(
        [dispid(2021), 'propput'],
        HRESULT,
        'FollowMasterBackground',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'FollowMasterBackground',
        )
    ),
    COMMETHOD(
        [dispid(2022), 'propget'],
        HRESULT,
        'NotesPage',
        (['out', 'retval'], POINTER(POINTER(SlideRange)), 'NotesPage')
    ),
    COMMETHOD(
        [dispid(2023), 'propget'],
        HRESULT,
        'Master',
        (['out', 'retval'], POINTER(POINTER(_Master)), 'Master')
    ),
    COMMETHOD(
        [dispid(2024), 'propget'],
        HRESULT,
        'Hyperlinks',
        (['out', 'retval'], POINTER(POINTER(Hyperlinks)), 'Hyperlinks')
    ),
    COMMETHOD(
        [dispid(2025)],
        HRESULT,
        'Export',
        (['in'], BSTR, 'FileName'),
        (['in'], BSTR, 'FilterName'),
        (['in', 'optional'], c_int, 'ScaleWidth', 0),
        (['in', 'optional'], c_int, 'ScaleHeight', 0)
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(Slide)), 'Item')
    ),
    COMMETHOD(
        [dispid(-4), 'restricted', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), '_NewEnum')
    ),
    COMMETHOD(
        [dispid(10), 'restricted'],
        HRESULT,
        '_Index',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(VARIANT), '_Index')
    ),
    COMMETHOD(
        [dispid(11), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
    COMMETHOD(
        [dispid(2026), 'hidden', 'propget'],
        HRESULT,
        'Scripts',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.Scripts)),
            'Scripts',
        )
    ),
    COMMETHOD(
        [dispid(2028), 'propget'],
        HRESULT,
        'Comments',
        (['out', 'retval'], POINTER(POINTER(Comments)), 'Comments')
    ),
    COMMETHOD(
        [dispid(2029), 'propget'],
        HRESULT,
        'Design',
        (['out', 'retval'], POINTER(POINTER(Design)), 'Design')
    ),
    COMMETHOD(
        [dispid(2029), 'propput'],
        HRESULT,
        'Design',
        (['in'], POINTER(Design), 'Design')
    ),
    COMMETHOD(
        [dispid(2030)],
        HRESULT,
        'MoveTo',
        (['in'], c_int, 'toPos')
    ),
    COMMETHOD(
        [dispid(2031), 'propget'],
        HRESULT,
        'TimeLine',
        (['out', 'retval'], POINTER(POINTER(TimeLine)), 'TimeLine')
    ),
    COMMETHOD(
        [dispid(2032)],
        HRESULT,
        'ApplyTemplate',
        (['in'], BSTR, 'FileName')
    ),
    COMMETHOD(
        [dispid(2033), 'hidden', 'propget'],
        HRESULT,
        'SectionNumber',
        (['out', 'retval'], POINTER(c_int), 'SectionNumber')
    ),
    COMMETHOD(
        [dispid(2034), 'propget'],
        HRESULT,
        'CustomLayout',
        (['out', 'retval'], POINTER(POINTER(CustomLayout)), 'CustomLayout')
    ),
    COMMETHOD(
        [dispid(2034), 'propput'],
        HRESULT,
        'CustomLayout',
        (['in'], POINTER(CustomLayout), 'CustomLayout')
    ),
    COMMETHOD(
        [dispid(2035)],
        HRESULT,
        'ApplyTheme',
        (['in'], BSTR, 'themeName')
    ),
    COMMETHOD(
        [dispid(2036), 'propget'],
        HRESULT,
        'ThemeColorScheme',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.ThemeColorScheme)),
            'ThemeColorScheme',
        )
    ),
    COMMETHOD(
        [dispid(2037)],
        HRESULT,
        'ApplyThemeColorScheme',
        (['in'], BSTR, 'themeColorSchemeName')
    ),
    COMMETHOD(
        [dispid(2038), 'propget'],
        HRESULT,
        'BackgroundStyle',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoBackgroundStyleIndex),
            'BackgroundStyle',
        )
    ),
    COMMETHOD(
        [dispid(2038), 'propput'],
        HRESULT,
        'BackgroundStyle',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoBackgroundStyleIndex,
            'BackgroundStyle',
        )
    ),
    COMMETHOD(
        [dispid(2039), 'propget'],
        HRESULT,
        'CustomerData',
        (['out', 'retval'], POINTER(POINTER(CustomerData)), 'CustomerData')
    ),
    COMMETHOD(
        [dispid(2040), 'hidden'],
        HRESULT,
        'PublishSlides',
        (['in'], BSTR, 'SlideLibraryUrl'),
        (['in', 'optional'], VARIANT_BOOL, 'Overwrite', False),
        (['in', 'optional'], VARIANT_BOOL, 'UseSlideOrder', False)
    ),
    COMMETHOD(
        [dispid(2041)],
        HRESULT,
        'MoveToSectionStart',
        (['in'], c_int, 'toSection')
    ),
    COMMETHOD(
        [dispid(2042), 'propget'],
        HRESULT,
        'sectionIndex',
        (['out', 'retval'], POINTER(c_int), 'sectionIndex')
    ),
    COMMETHOD(
        [dispid(2043), 'propget'],
        HRESULT,
        'HasNotesPage',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'HasNotesPage',
        )
    ),
    COMMETHOD(
        [dispid(2044)],
        HRESULT,
        'ApplyTemplate2',
        (['in'], BSTR, 'FileName'),
        (['in'], BSTR, 'VariantGUID')
    ),
]

################################################################
# code template for SlideRange implementation
# class SlideRange_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Shapes(self):
#         '-no docstring-'
#         #return Shapes
#
#     @property
#     def HeadersFooters(self):
#         '-no docstring-'
#         #return HeadersFooters
#
#     @property
#     def SlideShowTransition(self):
#         '-no docstring-'
#         #return SlideShowTransition
#
#     def _get(self):
#         '-no docstring-'
#         #return ColorScheme
#     def _set(self, ColorScheme):
#         '-no docstring-'
#     ColorScheme = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Background(self):
#         '-no docstring-'
#         #return Background
#
#     def _get(self):
#         '-no docstring-'
#         #return Name
#     def _set(self, Name):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def SlideID(self):
#         '-no docstring-'
#         #return SlideID
#
#     @property
#     def PrintSteps(self):
#         '-no docstring-'
#         #return PrintSteps
#
#     def Select(self):
#         '-no docstring-'
#         #return 
#
#     def Cut(self):
#         '-no docstring-'
#         #return 
#
#     def Copy(self):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return Layout
#     def _set(self, Layout):
#         '-no docstring-'
#     Layout = property(_get, _set, doc = _set.__doc__)
#
#     def Duplicate(self):
#         '-no docstring-'
#         #return Duplicate
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Tags(self):
#         '-no docstring-'
#         #return Tags
#
#     @property
#     def SlideIndex(self):
#         '-no docstring-'
#         #return SlideIndex
#
#     @property
#     def SlideNumber(self):
#         '-no docstring-'
#         #return SlideNumber
#
#     def _get(self):
#         '-no docstring-'
#         #return DisplayMasterShapes
#     def _set(self, DisplayMasterShapes):
#         '-no docstring-'
#     DisplayMasterShapes = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return FollowMasterBackground
#     def _set(self, FollowMasterBackground):
#         '-no docstring-'
#     FollowMasterBackground = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def NotesPage(self):
#         '-no docstring-'
#         #return NotesPage
#
#     @property
#     def Master(self):
#         '-no docstring-'
#         #return Master
#
#     @property
#     def Hyperlinks(self):
#         '-no docstring-'
#         #return Hyperlinks
#
#     def Export(self, FileName, FilterName, ScaleWidth, ScaleHeight):
#         '-no docstring-'
#         #return 
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return _NewEnum
#
#     def _Index(self, Index):
#         '-no docstring-'
#         #return _Index
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return Count
#
#     @property
#     def Scripts(self):
#         '-no docstring-'
#         #return Scripts
#
#     @property
#     def Comments(self):
#         '-no docstring-'
#         #return Comments
#
#     def _get(self):
#         '-no docstring-'
#         #return Design
#     def _set(self, Design):
#         '-no docstring-'
#     Design = property(_get, _set, doc = _set.__doc__)
#
#     def MoveTo(self, toPos):
#         '-no docstring-'
#         #return 
#
#     @property
#     def TimeLine(self):
#         '-no docstring-'
#         #return TimeLine
#
#     def ApplyTemplate(self, FileName):
#         '-no docstring-'
#         #return 
#
#     @property
#     def SectionNumber(self):
#         '-no docstring-'
#         #return SectionNumber
#
#     def _get(self):
#         '-no docstring-'
#         #return CustomLayout
#     def _set(self, CustomLayout):
#         '-no docstring-'
#     CustomLayout = property(_get, _set, doc = _set.__doc__)
#
#     def ApplyTheme(self, themeName):
#         '-no docstring-'
#         #return 
#
#     @property
#     def ThemeColorScheme(self):
#         '-no docstring-'
#         #return ThemeColorScheme
#
#     def ApplyThemeColorScheme(self, themeColorSchemeName):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return BackgroundStyle
#     def _set(self, BackgroundStyle):
#         '-no docstring-'
#     BackgroundStyle = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def CustomerData(self):
#         '-no docstring-'
#         #return CustomerData
#
#     def PublishSlides(self, SlideLibraryUrl, Overwrite, UseSlideOrder):
#         '-no docstring-'
#         #return 
#
#     def MoveToSectionStart(self, toSection):
#         '-no docstring-'
#         #return 
#
#     @property
#     def sectionIndex(self):
#         '-no docstring-'
#         #return sectionIndex
#
#     @property
#     def HasNotesPage(self):
#         '-no docstring-'
#         #return HasNotesPage
#
#     def ApplyTemplate2(self, FileName, VariantGUID):
#         '-no docstring-'
#         #return 
#


class DiagramNode(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934D8-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def AddNode(self, Pos: hints.Incomplete = ..., NodeType: hints.Incomplete = ...) -> 'DiagramNode': ...
        def Delete(self) -> hints.Hresult: ...
        def MoveNode(self, TargetNode: hints.Incomplete, Pos: hints.Incomplete) -> hints.Hresult: ...
        def ReplaceNode(self, TargetNode: hints.Incomplete) -> hints.Hresult: ...
        def SwapNode(self, TargetNode: hints.Incomplete, SwapChildren: hints.Incomplete = ...) -> hints.Hresult: ...
        def CloneNode(self, CopyChildren: hints.Incomplete, TargetNode: hints.Incomplete, Pos: hints.Incomplete = ...) -> 'DiagramNode': ...
        def TransferChildren(self, ReceivingNode: hints.Incomplete) -> hints.Hresult: ...
        def NextNode(self) -> 'DiagramNode': ...
        def PrevNode(self) -> 'DiagramNode': ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Children(self) -> 'DiagramNodeChildren': ...
        Children = hints.normal_property(_get_Children)
        def _get_Shape(self) -> 'Shape': ...
        Shape = hints.normal_property(_get_Shape)
        def _get_Root(self) -> 'DiagramNode': ...
        Root = hints.normal_property(_get_Root)
        def _get_Diagram(self) -> 'Diagram': ...
        Diagram = hints.normal_property(_get_Diagram)
        def _get_Layout(self) -> hints.Incomplete: ...
        def _set_Layout(self, Type: hints.Incomplete) -> hints.Hresult: ...
        Layout = hints.normal_property(_get_Layout, _set_Layout)
        def _get_TextShape(self) -> 'Shape': ...
        TextShape = hints.normal_property(_get_TextShape)


DiagramNodes._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'plCreator')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppunkEnum')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(DiagramNode)), 'ppdn')
    ),
    COMMETHOD([dispid(10)], HRESULT, 'SelectAll'),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'iDiagramNodes')
    ),
]

################################################################
# code template for DiagramNodes implementation
# class DiagramNodes_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return plCreator
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppunkEnum
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return ppdn
#
#     def SelectAll(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return iDiagramNodes
#

ChartColorFormat._methods_ = [
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(1646), 'propget'],
        HRESULT,
        'SchemeColor',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(1646), 'propput'],
        HRESULT,
        'SchemeColor',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(0), 'nonbrowsable', 'propget'],
        HRESULT,
        '_Default',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(108), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'RGB',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
]

################################################################
# code template for ChartColorFormat implementation
# class ChartColorFormat_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     SchemeColor = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def _Default(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Type(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def RGB(self):
#         '-no docstring-'
#         #return RHS
#

Column._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Cells',
        (['out', 'retval'], POINTER(POINTER(CellRange)), 'Cells')
    ),
    COMMETHOD([dispid(2004)], HRESULT, 'Select'),
    COMMETHOD([dispid(2005)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_float), 'Width')
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'Width',
        (['in'], c_float, 'Width')
    ),
]

################################################################
# code template for Column implementation
# class Column_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Cells(self):
#         '-no docstring-'
#         #return Cells
#
#     def Select(self):
#         '-no docstring-'
#         #return 
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return Width
#     def _set(self, Width):
#         '-no docstring-'
#     Width = property(_get, _set, doc = _set.__doc__)
#

AxisTitle._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propput'],
        HRESULT,
        'Caption',
        (['in'], BSTR, 'RHS')
    ),
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Caption',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Characters',
        (['in', 'optional'], VARIANT, 'Start'),
        (['in', 'optional'], VARIANT, 'Length'),
        (['out', 'retval'], POINTER(POINTER(ChartCharacters)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2003), 'hidden', 'propget'],
        HRESULT,
        'Font',
        (['out', 'retval'], POINTER(POINTER(ChartFont)), 'ppfont')
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'HorizontalAlignment',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'HorizontalAlignment',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'Left',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'Left',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'Orientation',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'Orientation',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'Shadow',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2007), 'propput'],
        HRESULT,
        'Shadow',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2008), 'propput'],
        HRESULT,
        'Text',
        (['in'], BSTR, 'RHS')
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'Text',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'Top',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(2009), 'propput'],
        HRESULT,
        'Top',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(2010), 'propput'],
        HRESULT,
        'VerticalAlignment',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'VerticalAlignment',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2011), 'hidden', 'propput'],
        HRESULT,
        'AutoScaleFont',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2011), 'hidden', 'propget'],
        HRESULT,
        'AutoScaleFont',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2012), 'hidden', 'propget'],
        HRESULT,
        'Interior',
        (['out', 'retval'], POINTER(POINTER(Interior)), 'ppinterior')
    ),
    COMMETHOD(
        [dispid(2013), 'hidden', 'propget'],
        HRESULT,
        'Fill',
        (['out', 'retval'], POINTER(POINTER(ChartFillFormat)), 'ppinterior')
    ),
    COMMETHOD(
        [dispid(2014)],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2015), 'hidden', 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(ChartBorder)), 'ppborder')
    ),
    COMMETHOD(
        [dispid(2016), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(2017), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2018)],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2418), 'propget'],
        HRESULT,
        'IncludeInLayout',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2418), 'propput'],
        HRESULT,
        'IncludeInLayout',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(1671), 'propget'],
        HRESULT,
        'Position',
        (['out', 'retval'], POINTER(XlChartElementPosition), 'RHS')
    ),
    COMMETHOD(
        [dispid(1671), 'propput'],
        HRESULT,
        'Position',
        (['in'], XlChartElementPosition, 'RHS')
    ),
    COMMETHOD(
        [dispid(2019), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(ChartFormat)), 'RHS')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2020), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2021), 'propget'],
        HRESULT,
        'ReadingOrder',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2021), 'propput'],
        HRESULT,
        'ReadingOrder',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(2022), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_double), 'Height')
    ),
    COMMETHOD(
        [dispid(2023), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_double), 'Width')
    ),
    COMMETHOD(
        [dispid(2024), 'propput'],
        HRESULT,
        'Formula',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(2024), 'propget'],
        HRESULT,
        'Formula',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(2025), 'propput'],
        HRESULT,
        'FormulaR1C1',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(2025), 'propget'],
        HRESULT,
        'FormulaR1C1',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(2026), 'propput'],
        HRESULT,
        'FormulaLocal',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(2026), 'propget'],
        HRESULT,
        'FormulaLocal',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(2027), 'propput'],
        HRESULT,
        'FormulaR1C1Local',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(2027), 'propget'],
        HRESULT,
        'FormulaR1C1Local',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(2028)],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'Id'),
        (['out', 'retval'], POINTER(VARIANT), 'pValue')
    ),
    COMMETHOD(
        [dispid(2029)],
        HRESULT,
        'SetProperty',
        (['in'], BSTR, 'Id'),
        (['in'], VARIANT, 'Value')
    ),
]

################################################################
# code template for AxisTitle implementation
# class AxisTitle_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Caption = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Characters(self, Start, Length):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Font(self):
#         '-no docstring-'
#         #return ppfont
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     HorizontalAlignment = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Left = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Orientation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Shadow = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Text = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Top = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     VerticalAlignment = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     AutoScaleFont = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Interior(self):
#         '-no docstring-'
#         #return ppinterior
#
#     @property
#     def Fill(self):
#         '-no docstring-'
#         #return ppinterior
#
#     def Delete(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return ppborder
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     def Select(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     IncludeInLayout = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Position = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ReadingOrder = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Height(self):
#         '-no docstring-'
#         #return Height
#
#     @property
#     def Width(self):
#         '-no docstring-'
#         #return Width
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     Formula = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     FormulaR1C1 = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     FormulaLocal = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     FormulaR1C1Local = property(_get, _set, doc = _set.__doc__)
#
#     def GetProperty(self, Id):
#         '-no docstring-'
#         #return pValue
#
#     def SetProperty(self, Id, Value):
#         '-no docstring-'
#         #return 
#

FillFormat._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'plCreator')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD([dispid(10)], HRESULT, 'Background'),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'OneColorGradient',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoGradientStyle,
            'Style',
        ),
        (['in'], c_int, 'Variant'),
        (['in'], c_float, 'Degree')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'Patterned',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPatternType,
            'Pattern',
        )
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'PresetGradient',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoGradientStyle,
            'Style',
        ),
        (['in'], c_int, 'Variant'),
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPresetGradientType,
            'PresetGradientType',
        )
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'PresetTextured',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPresetTexture,
            'PresetTexture',
        )
    ),
    COMMETHOD([dispid(15)], HRESULT, 'Solid'),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'TwoColorGradient',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoGradientStyle,
            'Style',
        ),
        (['in'], c_int, 'Variant')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'UserPicture',
        (['in'], BSTR, 'PictureFile')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'UserTextured',
        (['in'], BSTR, 'TextureFile')
    ),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'BackColor',
        (['out', 'retval'], POINTER(POINTER(ColorFormat)), 'BackColor')
    ),
    COMMETHOD(
        [dispid(100), 'propput'],
        HRESULT,
        'BackColor',
        (['in'], POINTER(ColorFormat), 'BackColor')
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'ForeColor',
        (['out', 'retval'], POINTER(POINTER(ColorFormat)), 'ForeColor')
    ),
    COMMETHOD(
        [dispid(101), 'propput'],
        HRESULT,
        'ForeColor',
        (['in'], POINTER(ColorFormat), 'ForeColor')
    ),
    COMMETHOD(
        [dispid(102), 'propget'],
        HRESULT,
        'GradientColorType',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoGradientColorType),
            'GradientColorType',
        )
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'GradientDegree',
        (['out', 'retval'], POINTER(c_float), 'GradientDegree')
    ),
    COMMETHOD(
        [dispid(104), 'propget'],
        HRESULT,
        'GradientStyle',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoGradientStyle),
            'GradientStyle',
        )
    ),
    COMMETHOD(
        [dispid(105), 'propget'],
        HRESULT,
        'GradientVariant',
        (['out', 'retval'], POINTER(c_int), 'GradientVariant')
    ),
    COMMETHOD(
        [dispid(106), 'propget'],
        HRESULT,
        'Pattern',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPatternType),
            'Pattern',
        )
    ),
    COMMETHOD(
        [dispid(107), 'propget'],
        HRESULT,
        'PresetGradientType',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPresetGradientType),
            'PresetGradientType',
        )
    ),
    COMMETHOD(
        [dispid(108), 'propget'],
        HRESULT,
        'PresetTexture',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPresetTexture),
            'PresetTexture',
        )
    ),
    COMMETHOD(
        [dispid(109), 'propget'],
        HRESULT,
        'TextureName',
        (['out', 'retval'], POINTER(BSTR), 'TextureName')
    ),
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'TextureType',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTextureType),
            'TextureType',
        )
    ),
    COMMETHOD(
        [dispid(111), 'propget'],
        HRESULT,
        'Transparency',
        (['out', 'retval'], POINTER(c_float), 'Transparency')
    ),
    COMMETHOD(
        [dispid(111), 'propput'],
        HRESULT,
        'Transparency',
        (['in'], c_float, 'Transparency')
    ),
    COMMETHOD(
        [dispid(112), 'propget'],
        HRESULT,
        'Type',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoFillType),
            'Type',
        )
    ),
    COMMETHOD(
        [dispid(113), 'propget'],
        HRESULT,
        'Visible',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Visible',
        )
    ),
    COMMETHOD(
        [dispid(113), 'propput'],
        HRESULT,
        'Visible',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Visible',
        )
    ),
    COMMETHOD(
        [dispid(114), 'propget'],
        HRESULT,
        'GradientStops',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.GradientStops)),
            'GradientStops',
        )
    ),
    COMMETHOD(
        [dispid(115), 'propget'],
        HRESULT,
        'TextureOffsetX',
        (['out', 'retval'], POINTER(c_float), 'TextureOffsetX')
    ),
    COMMETHOD(
        [dispid(115), 'propput'],
        HRESULT,
        'TextureOffsetX',
        (['in'], c_float, 'TextureOffsetX')
    ),
    COMMETHOD(
        [dispid(116), 'propget'],
        HRESULT,
        'TextureOffsetY',
        (['out', 'retval'], POINTER(c_float), 'TextureOffsetY')
    ),
    COMMETHOD(
        [dispid(116), 'propput'],
        HRESULT,
        'TextureOffsetY',
        (['in'], c_float, 'TextureOffsetY')
    ),
    COMMETHOD(
        [dispid(117), 'propget'],
        HRESULT,
        'TextureAlignment',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTextureAlignment),
            'TextureAlignment',
        )
    ),
    COMMETHOD(
        [dispid(117), 'propput'],
        HRESULT,
        'TextureAlignment',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTextureAlignment,
            'TextureAlignment',
        )
    ),
    COMMETHOD(
        [dispid(118), 'propget'],
        HRESULT,
        'TextureHorizontalScale',
        (['out', 'retval'], POINTER(c_float), 'HorizontalScale')
    ),
    COMMETHOD(
        [dispid(118), 'propput'],
        HRESULT,
        'TextureHorizontalScale',
        (['in'], c_float, 'HorizontalScale')
    ),
    COMMETHOD(
        [dispid(119), 'propget'],
        HRESULT,
        'TextureVerticalScale',
        (['out', 'retval'], POINTER(c_float), 'VerticalScale')
    ),
    COMMETHOD(
        [dispid(119), 'propput'],
        HRESULT,
        'TextureVerticalScale',
        (['in'], c_float, 'VerticalScale')
    ),
    COMMETHOD(
        [dispid(120), 'propget'],
        HRESULT,
        'TextureTile',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'TextureTile',
        )
    ),
    COMMETHOD(
        [dispid(120), 'propput'],
        HRESULT,
        'TextureTile',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'TextureTile',
        )
    ),
    COMMETHOD(
        [dispid(121), 'propget'],
        HRESULT,
        'RotateWithObject',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'RotateWithObject',
        )
    ),
    COMMETHOD(
        [dispid(121), 'propput'],
        HRESULT,
        'RotateWithObject',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'RotateWithObject',
        )
    ),
    COMMETHOD(
        [dispid(122), 'propget'],
        HRESULT,
        'PictureEffects',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.PictureEffects)),
            'PictureEffects',
        )
    ),
    COMMETHOD(
        [dispid(123), 'propget'],
        HRESULT,
        'GradientAngle',
        (['out', 'retval'], POINTER(c_float), 'GradientAngle')
    ),
    COMMETHOD(
        [dispid(123), 'propput'],
        HRESULT,
        'GradientAngle',
        (['in'], c_float, 'GradientAngle')
    ),
]

################################################################
# code template for FillFormat implementation
# class FillFormat_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return plCreator
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Background(self):
#         '-no docstring-'
#         #return 
#
#     def OneColorGradient(self, Style, Variant, Degree):
#         '-no docstring-'
#         #return 
#
#     def Patterned(self, Pattern):
#         '-no docstring-'
#         #return 
#
#     def PresetGradient(self, Style, Variant, PresetGradientType):
#         '-no docstring-'
#         #return 
#
#     def PresetTextured(self, PresetTexture):
#         '-no docstring-'
#         #return 
#
#     def Solid(self):
#         '-no docstring-'
#         #return 
#
#     def TwoColorGradient(self, Style, Variant):
#         '-no docstring-'
#         #return 
#
#     def UserPicture(self, PictureFile):
#         '-no docstring-'
#         #return 
#
#     def UserTextured(self, TextureFile):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return BackColor
#     def _set(self, BackColor):
#         '-no docstring-'
#     BackColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ForeColor
#     def _set(self, ForeColor):
#         '-no docstring-'
#     ForeColor = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def GradientColorType(self):
#         '-no docstring-'
#         #return GradientColorType
#
#     @property
#     def GradientDegree(self):
#         '-no docstring-'
#         #return GradientDegree
#
#     @property
#     def GradientStyle(self):
#         '-no docstring-'
#         #return GradientStyle
#
#     @property
#     def GradientVariant(self):
#         '-no docstring-'
#         #return GradientVariant
#
#     @property
#     def Pattern(self):
#         '-no docstring-'
#         #return Pattern
#
#     @property
#     def PresetGradientType(self):
#         '-no docstring-'
#         #return PresetGradientType
#
#     @property
#     def PresetTexture(self):
#         '-no docstring-'
#         #return PresetTexture
#
#     @property
#     def TextureName(self):
#         '-no docstring-'
#         #return TextureName
#
#     @property
#     def TextureType(self):
#         '-no docstring-'
#         #return TextureType
#
#     def _get(self):
#         '-no docstring-'
#         #return Transparency
#     def _set(self, Transparency):
#         '-no docstring-'
#     Transparency = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Type(self):
#         '-no docstring-'
#         #return Type
#
#     def _get(self):
#         '-no docstring-'
#         #return Visible
#     def _set(self, Visible):
#         '-no docstring-'
#     Visible = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def GradientStops(self):
#         '-no docstring-'
#         #return GradientStops
#
#     def _get(self):
#         '-no docstring-'
#         #return TextureOffsetX
#     def _set(self, TextureOffsetX):
#         '-no docstring-'
#     TextureOffsetX = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return TextureOffsetY
#     def _set(self, TextureOffsetY):
#         '-no docstring-'
#     TextureOffsetY = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return TextureAlignment
#     def _set(self, TextureAlignment):
#         '-no docstring-'
#     TextureAlignment = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return HorizontalScale
#     def _set(self, HorizontalScale):
#         '-no docstring-'
#     TextureHorizontalScale = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return VerticalScale
#     def _set(self, VerticalScale):
#         '-no docstring-'
#     TextureVerticalScale = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return TextureTile
#     def _set(self, TextureTile):
#         '-no docstring-'
#     TextureTile = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RotateWithObject
#     def _set(self, RotateWithObject):
#         '-no docstring-'
#     RotateWithObject = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def PictureEffects(self):
#         '-no docstring-'
#         #return PictureEffects
#
#     def _get(self):
#         '-no docstring-'
#         #return GradientAngle
#     def _set(self, GradientAngle):
#         '-no docstring-'
#     GradientAngle = property(_get, _set, doc = _set.__doc__)
#


class Placeholders(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{91493476-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Item(self, Index: hints.Incomplete) -> 'Shape': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def FindByName(self, Index: hints.Incomplete) -> 'Shape': ...



Shapes._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'plCreator')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Item')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), '_NewEnum')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'AddCallout',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoCalloutType,
            'Type',
        ),
        (['in'], c_float, 'Left'),
        (['in'], c_float, 'Top'),
        (['in'], c_float, 'Width'),
        (['in'], c_float, 'Height'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Callout')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'AddConnector',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoConnectorType,
            'Type',
        ),
        (['in'], c_float, 'BeginX'),
        (['in'], c_float, 'BeginY'),
        (['in'], c_float, 'EndX'),
        (['in'], c_float, 'EndY'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Connector')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'AddCurve',
        (['in'], VARIANT, 'SafeArrayOfPoints'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Curve')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'AddLabel',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTextOrientation,
            'Orientation',
        ),
        (['in'], c_float, 'Left'),
        (['in'], c_float, 'Top'),
        (['in'], c_float, 'Width'),
        (['in'], c_float, 'Height'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Label')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'AddLine',
        (['in'], c_float, 'BeginX'),
        (['in'], c_float, 'BeginY'),
        (['in'], c_float, 'EndX'),
        (['in'], c_float, 'EndY'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Line')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'AddPicture',
        (['in'], BSTR, 'FileName'),
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'LinkToFile',
        ),
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'SaveWithDocument',
        ),
        (['in'], c_float, 'Left'),
        (['in'], c_float, 'Top'),
        (['in', 'optional'], c_float, 'Width', -1.0),
        (['in', 'optional'], c_float, 'Height', -1.0),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Picture')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'AddPolyline',
        (['in'], VARIANT, 'SafeArrayOfPoints'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Polyline')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'AddShape',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoAutoShapeType,
            'Type',
        ),
        (['in'], c_float, 'Left'),
        (['in'], c_float, 'Top'),
        (['in'], c_float, 'Width'),
        (['in'], c_float, 'Height'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Shape')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'AddTextEffect',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPresetTextEffect,
            'PresetTextEffect',
        ),
        (['in'], BSTR, 'Text'),
        (['in'], BSTR, 'FontName'),
        (['in'], c_float, 'FontSize'),
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'FontBold',
        ),
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'FontItalic',
        ),
        (['in'], c_float, 'Left'),
        (['in'], c_float, 'Top'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'TextEffect')
    ),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'AddTextbox',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTextOrientation,
            'Orientation',
        ),
        (['in'], c_float, 'Left'),
        (['in'], c_float, 'Top'),
        (['in'], c_float, 'Width'),
        (['in'], c_float, 'Height'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Textbox')
    ),
    COMMETHOD(
        [dispid(20)],
        HRESULT,
        'BuildFreeform',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoEditingType,
            'EditingType',
        ),
        (['in'], c_float, 'X1'),
        (['in'], c_float, 'Y1'),
        (
            ['out', 'retval'],
            POINTER(POINTER(FreeformBuilder)),
            'FreeformBuilder',
        )
    ),
    COMMETHOD([dispid(22)], HRESULT, 'SelectAll'),
    COMMETHOD(
        [dispid(2003)],
        HRESULT,
        'Range',
        (['in', 'optional'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(ShapeRange)), 'Range')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'HasTitle',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'HasTitle',
        )
    ),
    COMMETHOD(
        [dispid(2005)],
        HRESULT,
        'AddTitle',
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Title')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'Title',
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Title')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'Placeholders',
        (['out', 'retval'], POINTER(POINTER(Placeholders)), 'Placeholders')
    ),
    COMMETHOD(
        [dispid(2008)],
        HRESULT,
        'AddOLEObject',
        (['in', 'optional'], c_float, 'Left', 0.0),
        (['in', 'optional'], c_float, 'Top', 0.0),
        (['in', 'optional'], c_float, 'Width', -1.0),
        (['in', 'optional'], c_float, 'Height', -1.0),
        (['in', 'optional'], BSTR, 'ClassName', ''),
        (['in', 'optional'], BSTR, 'FileName', ''),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'DisplayAsIcon',
            0
        ),
        (['in', 'optional'], BSTR, 'IconFileName', ''),
        (['in', 'optional'], c_int, 'IconIndex', 0),
        (['in', 'optional'], BSTR, 'IconLabel', ''),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Link',
            0
        ),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'OLEObject')
    ),
    COMMETHOD(
        [dispid(2009), 'hidden'],
        HRESULT,
        'AddComment',
        (['in', 'optional'], c_float, 'Left', 1.25),
        (['in', 'optional'], c_float, 'Top', 1.25),
        (['in', 'optional'], c_float, 'Width', 145.25),
        (['in', 'optional'], c_float, 'Height', 145.25),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Comment')
    ),
    COMMETHOD(
        [dispid(2010)],
        HRESULT,
        'AddPlaceholder',
        (['in'], PpPlaceholderType, 'Type'),
        (['in', 'optional'], c_float, 'Left', -1.0),
        (['in', 'optional'], c_float, 'Top', -1.0),
        (['in', 'optional'], c_float, 'Width', -1.0),
        (['in', 'optional'], c_float, 'Height', -1.0),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Placeholder')
    ),
    COMMETHOD(
        [dispid(2011), 'hidden'],
        HRESULT,
        'AddMediaObject',
        (['in'], BSTR, 'FileName'),
        (['in', 'optional'], c_float, 'Left', 0.0),
        (['in', 'optional'], c_float, 'Top', 0.0),
        (['in', 'optional'], c_float, 'Width', -1.0),
        (['in', 'optional'], c_float, 'Height', -1.0),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'MediaObject')
    ),
    COMMETHOD(
        [dispid(2012)],
        HRESULT,
        'Paste',
        (['out', 'retval'], POINTER(POINTER(ShapeRange)), 'Paste')
    ),
    COMMETHOD(
        [dispid(2013)],
        HRESULT,
        'AddTable',
        (['in'], c_int, 'NumRows'),
        (['in'], c_int, 'NumColumns'),
        (['in', 'optional'], c_float, 'Left', -1.0),
        (['in', 'optional'], c_float, 'Top', -1.0),
        (['in', 'optional'], c_float, 'Width', -1.0),
        (['in', 'optional'], c_float, 'Height', -1.0),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Table')
    ),
    COMMETHOD(
        [dispid(2014)],
        HRESULT,
        'PasteSpecial',
        (['in', 'optional'], PpPasteDataType, 'DataType', 0),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'DisplayAsIcon',
            0
        ),
        (['in', 'optional'], BSTR, 'IconFileName', ''),
        (['in', 'optional'], c_int, 'IconIndex', 0),
        (['in', 'optional'], BSTR, 'IconLabel', ''),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Link',
            0
        ),
        (['out', 'retval'], POINTER(POINTER(ShapeRange)), 'PasteSpecial')
    ),
    COMMETHOD(
        [dispid(23), 'hidden'],
        HRESULT,
        'AddDiagram',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoDiagramType,
            'Type',
        ),
        (['in'], c_float, 'Left'),
        (['in'], c_float, 'Top'),
        (['in'], c_float, 'Width'),
        (['in'], c_float, 'Height'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Diagram')
    ),
    COMMETHOD(
        [dispid(25), 'hidden'],
        HRESULT,
        'AddCanvas',
        (['in'], c_float, 'Left'),
        (['in'], c_float, 'Top'),
        (['in'], c_float, 'Width'),
        (['in'], c_float, 'Height'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Shape')
    ),
    COMMETHOD(
        [dispid(26), 'hidden'],
        HRESULT,
        'AddChart',
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.XlChartType,
            'Type',
            -1
        ),
        (['in', 'optional'], c_float, 'Left', -1.0),
        (['in', 'optional'], c_float, 'Top', -1.0),
        (['in', 'optional'], c_float, 'Width', -1.0),
        (['in', 'optional'], c_float, 'Height', -1.0),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Chart')
    ),
    COMMETHOD(
        [dispid(2015)],
        HRESULT,
        'AddMediaObject2',
        (['in'], BSTR, 'FileName'),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'LinkToFile',
            0
        ),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'SaveWithDocument',
            -1
        ),
        (['in', 'optional'], c_float, 'Left', 0.0),
        (['in', 'optional'], c_float, 'Top', 0.0),
        (['in', 'optional'], c_float, 'Width', -1.0),
        (['in', 'optional'], c_float, 'Height', -1.0),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'MediaObject2')
    ),
    COMMETHOD(
        [dispid(2016)],
        HRESULT,
        'AddMediaObjectFromEmbedTag',
        (['in'], BSTR, 'EmbedTag'),
        (['in', 'optional'], c_float, 'Left', 0.0),
        (['in', 'optional'], c_float, 'Top', 0.0),
        (['in', 'optional'], c_float, 'Width', -1.0),
        (['in', 'optional'], c_float, 'Height', -1.0),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'MediaObjectFromEmbedTag')
    ),
    COMMETHOD(
        [dispid(28)],
        HRESULT,
        'AddSmartArt',
        (
            ['in'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.SmartArtLayout),
            'Layout',
        ),
        (['in', 'optional'], c_float, 'Left', -1.0),
        (['in', 'optional'], c_float, 'Top', -1.0),
        (['in', 'optional'], c_float, 'Width', -1.0),
        (['in', 'optional'], c_float, 'Height', -1.0),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'SmartArt')
    ),
    COMMETHOD(
        [dispid(29)],
        HRESULT,
        'AddChart2',
        (['in', 'optional'], c_int, 'Style', -1),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.XlChartType,
            'Type',
            -1
        ),
        (['in', 'optional'], c_float, 'Left', -1.0),
        (['in', 'optional'], c_float, 'Top', -1.0),
        (['in', 'optional'], c_float, 'Width', -1.0),
        (['in', 'optional'], c_float, 'Height', -1.0),
        (['in', 'optional'], VARIANT_BOOL, 'NewLayout', False),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Chart')
    ),
    COMMETHOD(
        [dispid(30)],
        HRESULT,
        'AddPicture2',
        (['in'], BSTR, 'FileName'),
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'LinkToFile',
        ),
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'SaveWithDocument',
        ),
        (['in'], c_float, 'Left'),
        (['in'], c_float, 'Top'),
        (['in', 'optional'], c_float, 'Width', -1.0),
        (['in', 'optional'], c_float, 'Height', -1.0),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPictureCompress,
            'compress',
            -1
        ),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Picture')
    ),
    COMMETHOD(
        [dispid(31)],
        HRESULT,
        'AddInkShapeFromXML',
        (['in'], BSTR, 'InkXML'),
        (['in'], c_float, 'Left'),
        (['in'], c_float, 'Top'),
        (['in', 'optional'], c_float, 'Width', -1.0),
        (['in', 'optional'], c_float, 'Height', -1.0),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Shape')
    ),
    COMMETHOD(
        [dispid(32)],
        HRESULT,
        'Add3DModel',
        (['in'], BSTR, 'FileName'),
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'LinkToFile',
        ),
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'SaveWithDocument',
        ),
        (['in'], c_float, 'Left'),
        (['in'], c_float, 'Top'),
        (['in', 'optional'], c_float, 'Width', -1.0),
        (['in', 'optional'], c_float, 'Height', -1.0),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Model')
    ),
]

################################################################
# code template for Shapes implementation
# class Shapes_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return plCreator
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return Count
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return _NewEnum
#
#     def AddCallout(self, Type, Left, Top, Width, Height):
#         '-no docstring-'
#         #return Callout
#
#     def AddConnector(self, Type, BeginX, BeginY, EndX, EndY):
#         '-no docstring-'
#         #return Connector
#
#     def AddCurve(self, SafeArrayOfPoints):
#         '-no docstring-'
#         #return Curve
#
#     def AddLabel(self, Orientation, Left, Top, Width, Height):
#         '-no docstring-'
#         #return Label
#
#     def AddLine(self, BeginX, BeginY, EndX, EndY):
#         '-no docstring-'
#         #return Line
#
#     def AddPicture(self, FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height):
#         '-no docstring-'
#         #return Picture
#
#     def AddPolyline(self, SafeArrayOfPoints):
#         '-no docstring-'
#         #return Polyline
#
#     def AddShape(self, Type, Left, Top, Width, Height):
#         '-no docstring-'
#         #return Shape
#
#     def AddTextEffect(self, PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, Left, Top):
#         '-no docstring-'
#         #return TextEffect
#
#     def AddTextbox(self, Orientation, Left, Top, Width, Height):
#         '-no docstring-'
#         #return Textbox
#
#     def BuildFreeform(self, EditingType, X1, Y1):
#         '-no docstring-'
#         #return FreeformBuilder
#
#     def SelectAll(self):
#         '-no docstring-'
#         #return 
#
#     def Range(self, Index):
#         '-no docstring-'
#         #return Range
#
#     @property
#     def HasTitle(self):
#         '-no docstring-'
#         #return HasTitle
#
#     def AddTitle(self):
#         '-no docstring-'
#         #return Title
#
#     @property
#     def Title(self):
#         '-no docstring-'
#         #return Title
#
#     @property
#     def Placeholders(self):
#         '-no docstring-'
#         #return Placeholders
#
#     def AddOLEObject(self, Left, Top, Width, Height, ClassName, FileName, DisplayAsIcon, IconFileName, IconIndex, IconLabel, Link):
#         '-no docstring-'
#         #return OLEObject
#
#     def AddComment(self, Left, Top, Width, Height):
#         '-no docstring-'
#         #return Comment
#
#     def AddPlaceholder(self, Type, Left, Top, Width, Height):
#         '-no docstring-'
#         #return Placeholder
#
#     def AddMediaObject(self, FileName, Left, Top, Width, Height):
#         '-no docstring-'
#         #return MediaObject
#
#     def Paste(self):
#         '-no docstring-'
#         #return Paste
#
#     def AddTable(self, NumRows, NumColumns, Left, Top, Width, Height):
#         '-no docstring-'
#         #return Table
#
#     def PasteSpecial(self, DataType, DisplayAsIcon, IconFileName, IconIndex, IconLabel, Link):
#         '-no docstring-'
#         #return PasteSpecial
#
#     def AddDiagram(self, Type, Left, Top, Width, Height):
#         '-no docstring-'
#         #return Diagram
#
#     def AddCanvas(self, Left, Top, Width, Height):
#         '-no docstring-'
#         #return Shape
#
#     def AddChart(self, Type, Left, Top, Width, Height):
#         '-no docstring-'
#         #return Chart
#
#     def AddMediaObject2(self, FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height):
#         '-no docstring-'
#         #return MediaObject2
#
#     def AddMediaObjectFromEmbedTag(self, EmbedTag, Left, Top, Width, Height):
#         '-no docstring-'
#         #return MediaObjectFromEmbedTag
#
#     def AddSmartArt(self, Layout, Left, Top, Width, Height):
#         '-no docstring-'
#         #return SmartArt
#
#     def AddChart2(self, Style, Type, Left, Top, Width, Height, NewLayout):
#         '-no docstring-'
#         #return Chart
#
#     def AddPicture2(self, FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height, compress):
#         '-no docstring-'
#         #return Picture
#
#     def AddInkShapeFromXML(self, InkXML, Left, Top, Width, Height):
#         '-no docstring-'
#         #return Shape
#
#     def Add3DModel(self, FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height):
#         '-no docstring-'
#         #return Model
#


class DiagramNodeChildren(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934D9-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def Item(self, Index: hints.Incomplete) -> 'DiagramNode': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def AddNode(self, Index: hints.Incomplete = ..., NodeType: hints.Incomplete = ...) -> 'DiagramNode': ...
        def SelectAll(self) -> hints.Hresult: ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get_FirstChild(self) -> 'DiagramNode': ...
        FirstChild = hints.normal_property(_get_FirstChild)
        def _get_LastChild(self) -> 'DiagramNode': ...
        LastChild = hints.normal_property(_get_LastChild)


DiagramNode._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'plCreator')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'AddNode',
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoRelativeNodePosition,
            'Pos',
            2
        ),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoDiagramNodeType,
            'NodeType',
            1
        ),
        (['out', 'retval'], POINTER(POINTER(DiagramNode)), 'NewNode')
    ),
    COMMETHOD([dispid(11)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'MoveNode',
        (['in'], POINTER(DiagramNode), 'TargetNode'),
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoRelativeNodePosition,
            'Pos',
        )
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'ReplaceNode',
        (['in'], POINTER(DiagramNode), 'TargetNode')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'SwapNode',
        (['in'], POINTER(DiagramNode), 'TargetNode'),
        (['in', 'optional'], VARIANT_BOOL, 'SwapChildren', True)
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'CloneNode',
        (['in'], VARIANT_BOOL, 'CopyChildren'),
        (['in'], POINTER(DiagramNode), 'TargetNode'),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoRelativeNodePosition,
            'Pos',
            2
        ),
        (['out', 'retval'], POINTER(POINTER(DiagramNode)), 'Node')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'TransferChildren',
        (['in'], POINTER(DiagramNode), 'ReceivingNode')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'NextNode',
        (['out', 'retval'], POINTER(POINTER(DiagramNode)), 'NextNode')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'PrevNode',
        (['out', 'retval'], POINTER(POINTER(DiagramNode)), 'PrevNode')
    ),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'Children',
        (['out', 'retval'], POINTER(POINTER(DiagramNodeChildren)), 'Children')
    ),
    COMMETHOD(
        [dispid(102), 'propget'],
        HRESULT,
        'Shape',
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Shape')
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'Root',
        (['out', 'retval'], POINTER(POINTER(DiagramNode)), 'Root')
    ),
    COMMETHOD(
        [dispid(104), 'propget'],
        HRESULT,
        'Diagram',
        (['out', 'retval'], POINTER(POINTER(Diagram)), 'Diagram')
    ),
    COMMETHOD(
        [dispid(105), 'propget'],
        HRESULT,
        'Layout',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoOrgChartLayoutType),
            'Type',
        )
    ),
    COMMETHOD(
        [dispid(105), 'propput'],
        HRESULT,
        'Layout',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoOrgChartLayoutType,
            'Type',
        )
    ),
    COMMETHOD(
        [dispid(106), 'propget'],
        HRESULT,
        'TextShape',
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Shape')
    ),
]

################################################################
# code template for DiagramNode implementation
# class DiagramNode_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return plCreator
#
#     def AddNode(self, Pos, NodeType):
#         '-no docstring-'
#         #return NewNode
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     def MoveNode(self, TargetNode, Pos):
#         '-no docstring-'
#         #return 
#
#     def ReplaceNode(self, TargetNode):
#         '-no docstring-'
#         #return 
#
#     def SwapNode(self, TargetNode, SwapChildren):
#         '-no docstring-'
#         #return 
#
#     def CloneNode(self, CopyChildren, TargetNode, Pos):
#         '-no docstring-'
#         #return Node
#
#     def TransferChildren(self, ReceivingNode):
#         '-no docstring-'
#         #return 
#
#     def NextNode(self):
#         '-no docstring-'
#         #return NextNode
#
#     def PrevNode(self):
#         '-no docstring-'
#         #return PrevNode
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Children(self):
#         '-no docstring-'
#         #return Children
#
#     @property
#     def Shape(self):
#         '-no docstring-'
#         #return Shape
#
#     @property
#     def Root(self):
#         '-no docstring-'
#         #return Root
#
#     @property
#     def Diagram(self):
#         '-no docstring-'
#         #return Diagram
#
#     def _get(self):
#         '-no docstring-'
#         #return Type
#     def _set(self, Type):
#         '-no docstring-'
#     Layout = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def TextShape(self):
#         '-no docstring-'
#         #return Shape
#


class GroupShapes(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{9149347B-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Item(self, Index: hints.Incomplete) -> 'Shape': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def Range(self, Index: hints.Incomplete) -> 'ShapeRange': ...


GroupShapes._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'plCreator')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pnShapes')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Item')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppienum')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'Range',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(ShapeRange)), 'Range')
    ),
]

################################################################
# code template for GroupShapes implementation
# class GroupShapes_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return plCreator
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return pnShapes
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppienum
#
#     def Range(self, Index):
#         '-no docstring-'
#         #return Range
#


class TextStyle(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493499-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Ruler(self) -> 'Ruler': ...
        Ruler = hints.normal_property(_get_Ruler)
        def _get_TextFrame(self) -> 'TextFrame': ...
        TextFrame = hints.normal_property(_get_TextFrame)
        def _get_Levels(self) -> 'TextStyleLevels': ...
        Levels = hints.normal_property(_get_Levels)


TextStyles._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], PpTextStyleType, 'Type'),
        (['out', 'retval'], POINTER(POINTER(TextStyle)), 'Item')
    ),
]

################################################################
# code template for TextStyles implementation
# class TextStyles_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Item(self, Type):
#         '-no docstring-'
#         #return Item
#

CustomerData._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], BSTR, 'Id'),
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.CustomXMLPart)),
            'Item',
        )
    ),
    COMMETHOD(
        [dispid(2003)],
        HRESULT,
        'Add',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.CustomXMLPart)),
            'Add',
        )
    ),
    COMMETHOD(
        [dispid(2004)],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'Id')
    ),
]

################################################################
# code template for CustomerData implementation
# class CustomerData_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Item(self, Id):
#         '-no docstring-'
#         #return Item
#
#     def Add(self):
#         '-no docstring-'
#         #return Add
#
#     def Delete(self, Id):
#         '-no docstring-'
#         #return 
#

DefaultWebOptions._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'IncludeNavigation',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'IncludeNavigation',
        )
    ),
    COMMETHOD(
        [dispid(2001), 'propput'],
        HRESULT,
        'IncludeNavigation',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'IncludeNavigation',
        )
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'FrameColors',
        (['out', 'retval'], POINTER(PpFrameColors), 'FrameColors')
    ),
    COMMETHOD(
        [dispid(2002), 'propput'],
        HRESULT,
        'FrameColors',
        (['in'], PpFrameColors, 'FrameColors')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'ResizeGraphics',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'ResizeGraphics',
        )
    ),
    COMMETHOD(
        [dispid(2003), 'propput'],
        HRESULT,
        'ResizeGraphics',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'ResizeGraphics',
        )
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'ShowSlideAnimation',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'ShowSlideAnimation',
        )
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'ShowSlideAnimation',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'ShowSlideAnimation',
        )
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'OrganizeInFolder',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'OrganizeInFolder',
        )
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'OrganizeInFolder',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'OrganizeInFolder',
        )
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'UseLongFileNames',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'UseLongFileNames',
        )
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'UseLongFileNames',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'UseLongFileNames',
        )
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'RelyOnVML',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'RelyOnVML',
        )
    ),
    COMMETHOD(
        [dispid(2007), 'propput'],
        HRESULT,
        'RelyOnVML',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'RelyOnVML',
        )
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'AllowPNG',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'AllowPNG',
        )
    ),
    COMMETHOD(
        [dispid(2008), 'propput'],
        HRESULT,
        'AllowPNG',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'AllowPNG',
        )
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'ScreenSize',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoScreenSize),
            'ScreenSize',
        )
    ),
    COMMETHOD(
        [dispid(2009), 'propput'],
        HRESULT,
        'ScreenSize',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoScreenSize,
            'ScreenSize',
        )
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'Encoding',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoEncoding),
            'Encoding',
        )
    ),
    COMMETHOD(
        [dispid(2010), 'propput'],
        HRESULT,
        'Encoding',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoEncoding,
            'Encoding',
        )
    ),
    COMMETHOD(
        [dispid(2011), 'propget'],
        HRESULT,
        'UpdateLinksOnSave',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'UpdateLinksOnSave',
        )
    ),
    COMMETHOD(
        [dispid(2011), 'propput'],
        HRESULT,
        'UpdateLinksOnSave',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'UpdateLinksOnSave',
        )
    ),
    COMMETHOD(
        [dispid(2012), 'propget'],
        HRESULT,
        'CheckIfOfficeIsHTMLEditor',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'CheckIfOfficeIsHTMLEditor',
        )
    ),
    COMMETHOD(
        [dispid(2012), 'propput'],
        HRESULT,
        'CheckIfOfficeIsHTMLEditor',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'CheckIfOfficeIsHTMLEditor',
        )
    ),
    COMMETHOD(
        [dispid(2013), 'propget'],
        HRESULT,
        'AlwaysSaveInDefaultEncoding',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'AlwaysSaveInDefaultEncoding',
        )
    ),
    COMMETHOD(
        [dispid(2013), 'propput'],
        HRESULT,
        'AlwaysSaveInDefaultEncoding',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'AlwaysSaveInDefaultEncoding',
        )
    ),
    COMMETHOD(
        [dispid(2014), 'propget'],
        HRESULT,
        'Fonts',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.WebPageFonts)),
            'Fonts',
        )
    ),
    COMMETHOD(
        [dispid(2015), 'propget'],
        HRESULT,
        'FolderSuffix',
        (['out', 'retval'], POINTER(BSTR), 'FolderSuffix')
    ),
    COMMETHOD(
        [dispid(2016), 'propget'],
        HRESULT,
        'TargetBrowser',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTargetBrowser),
            'TargetBrowser',
        )
    ),
    COMMETHOD(
        [dispid(2016), 'propput'],
        HRESULT,
        'TargetBrowser',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTargetBrowser,
            'TargetBrowser',
        )
    ),
    COMMETHOD(
        [dispid(2017), 'propget'],
        HRESULT,
        'SaveNewWebPagesAsWebArchives',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'SaveNewWebPagesAsWebArchives',
        )
    ),
    COMMETHOD(
        [dispid(2017), 'propput'],
        HRESULT,
        'SaveNewWebPagesAsWebArchives',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'SaveNewWebPagesAsWebArchives',
        )
    ),
    COMMETHOD(
        [dispid(2018), 'propget'],
        HRESULT,
        'HTMLVersion',
        (['out', 'retval'], POINTER(PpHTMLVersion), 'HTMLVersion')
    ),
    COMMETHOD(
        [dispid(2018), 'propput'],
        HRESULT,
        'HTMLVersion',
        (['in'], PpHTMLVersion, 'HTMLVersion')
    ),
]

################################################################
# code template for DefaultWebOptions implementation
# class DefaultWebOptions_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return IncludeNavigation
#     def _set(self, IncludeNavigation):
#         '-no docstring-'
#     IncludeNavigation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return FrameColors
#     def _set(self, FrameColors):
#         '-no docstring-'
#     FrameColors = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ResizeGraphics
#     def _set(self, ResizeGraphics):
#         '-no docstring-'
#     ResizeGraphics = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ShowSlideAnimation
#     def _set(self, ShowSlideAnimation):
#         '-no docstring-'
#     ShowSlideAnimation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return OrganizeInFolder
#     def _set(self, OrganizeInFolder):
#         '-no docstring-'
#     OrganizeInFolder = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return UseLongFileNames
#     def _set(self, UseLongFileNames):
#         '-no docstring-'
#     UseLongFileNames = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RelyOnVML
#     def _set(self, RelyOnVML):
#         '-no docstring-'
#     RelyOnVML = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return AllowPNG
#     def _set(self, AllowPNG):
#         '-no docstring-'
#     AllowPNG = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ScreenSize
#     def _set(self, ScreenSize):
#         '-no docstring-'
#     ScreenSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Encoding
#     def _set(self, Encoding):
#         '-no docstring-'
#     Encoding = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return UpdateLinksOnSave
#     def _set(self, UpdateLinksOnSave):
#         '-no docstring-'
#     UpdateLinksOnSave = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return CheckIfOfficeIsHTMLEditor
#     def _set(self, CheckIfOfficeIsHTMLEditor):
#         '-no docstring-'
#     CheckIfOfficeIsHTMLEditor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return AlwaysSaveInDefaultEncoding
#     def _set(self, AlwaysSaveInDefaultEncoding):
#         '-no docstring-'
#     AlwaysSaveInDefaultEncoding = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Fonts(self):
#         '-no docstring-'
#         #return Fonts
#
#     @property
#     def FolderSuffix(self):
#         '-no docstring-'
#         #return FolderSuffix
#
#     def _get(self):
#         '-no docstring-'
#         #return TargetBrowser
#     def _set(self, TargetBrowser):
#         '-no docstring-'
#     TargetBrowser = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return SaveNewWebPagesAsWebArchives
#     def _set(self, SaveNewWebPagesAsWebArchives):
#         '-no docstring-'
#     SaveNewWebPagesAsWebArchives = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return HTMLVersion
#     def _set(self, HTMLVersion):
#         '-no docstring-'
#     HTMLVersion = property(_get, _set, doc = _set.__doc__)
#

Rows._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(Row)), 'Item')
    ),
    COMMETHOD(
        [dispid(2003)],
        HRESULT,
        'Add',
        (['in', 'optional'], c_int, 'BeforeRow', -1),
        (['out', 'retval'], POINTER(POINTER(Row)), 'Add')
    ),
]

################################################################
# code template for Rows implementation
# class Rows_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     def Add(self, BeforeRow):
#         '-no docstring-'
#         #return Add
#


class Borders(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{914934CA-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Item(self, BorderType: hints.Incomplete) -> 'LineFormat': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)


CellRange._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(Cell)), 'Item')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Borders',
        (['out', 'retval'], POINTER(POINTER(Borders)), 'Borders')
    ),
]

################################################################
# code template for CellRange implementation
# class CellRange_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     @property
#     def Borders(self):
#         '-no docstring-'
#         #return Borders
#


class TextFrame(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493484-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_MarginBottom(self) -> hints.Incomplete: ...
        def _set_MarginBottom(self, MarginBottom: hints.Incomplete) -> hints.Hresult: ...
        MarginBottom = hints.normal_property(_get_MarginBottom, _set_MarginBottom)
        def _get_MarginLeft(self) -> hints.Incomplete: ...
        def _set_MarginLeft(self, MarginLeft: hints.Incomplete) -> hints.Hresult: ...
        MarginLeft = hints.normal_property(_get_MarginLeft, _set_MarginLeft)
        def _get_MarginRight(self) -> hints.Incomplete: ...
        def _set_MarginRight(self, MarginRight: hints.Incomplete) -> hints.Hresult: ...
        MarginRight = hints.normal_property(_get_MarginRight, _set_MarginRight)
        def _get_MarginTop(self) -> hints.Incomplete: ...
        def _set_MarginTop(self, MarginTop: hints.Incomplete) -> hints.Hresult: ...
        MarginTop = hints.normal_property(_get_MarginTop, _set_MarginTop)
        def _get_Orientation(self) -> hints.Incomplete: ...
        def _set_Orientation(self, Orientation: hints.Incomplete) -> hints.Hresult: ...
        Orientation = hints.normal_property(_get_Orientation, _set_Orientation)
        def _get_HasText(self) -> hints.Incomplete: ...
        HasText = hints.normal_property(_get_HasText)
        def _get_TextRange(self) -> 'TextRange': ...
        TextRange = hints.normal_property(_get_TextRange)
        def _get_Ruler(self) -> 'Ruler': ...
        Ruler = hints.normal_property(_get_Ruler)
        def _get_HorizontalAnchor(self) -> hints.Incomplete: ...
        def _set_HorizontalAnchor(self, HorizontalAnchor: hints.Incomplete) -> hints.Hresult: ...
        HorizontalAnchor = hints.normal_property(_get_HorizontalAnchor, _set_HorizontalAnchor)
        def _get_VerticalAnchor(self) -> hints.Incomplete: ...
        def _set_VerticalAnchor(self, VerticalAnchor: hints.Incomplete) -> hints.Hresult: ...
        VerticalAnchor = hints.normal_property(_get_VerticalAnchor, _set_VerticalAnchor)
        def _get_AutoSize(self) -> hints.Incomplete: ...
        def _set_AutoSize(self, AutoSize: hints.Incomplete) -> hints.Hresult: ...
        AutoSize = hints.normal_property(_get_AutoSize, _set_AutoSize)
        def _get_WordWrap(self) -> hints.Incomplete: ...
        def _set_WordWrap(self, WordWrap: hints.Incomplete) -> hints.Hresult: ...
        WordWrap = hints.normal_property(_get_WordWrap, _set_WordWrap)
        def DeleteText(self) -> hints.Hresult: ...


class TextStyleLevels(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{9149349A-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Item(self, Level: hints.Incomplete) -> 'TextStyleLevel': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)


TextStyle._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Ruler',
        (['out', 'retval'], POINTER(POINTER(Ruler)), 'Ruler')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'TextFrame',
        (['out', 'retval'], POINTER(POINTER(TextFrame)), 'TextFrame')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'Levels',
        (['out', 'retval'], POINTER(POINTER(TextStyleLevels)), 'Levels')
    ),
]

################################################################
# code template for TextStyle implementation
# class TextStyle_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Ruler(self):
#         '-no docstring-'
#         #return Ruler
#
#     @property
#     def TextFrame(self):
#         '-no docstring-'
#         #return TextFrame
#
#     @property
#     def Levels(self):
#         '-no docstring-'
#         #return Levels
#


class ShapeNodes(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493486-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Item(self, Index: hints.Incomplete) -> 'ShapeNode': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def Delete(self, Index: hints.Incomplete) -> hints.Hresult: ...
        def Insert(self, Index: hints.Incomplete, SegmentType: hints.Incomplete, EditingType: hints.Incomplete, X1: hints.Incomplete, Y1: hints.Incomplete, X2: hints.Incomplete = ..., Y2: hints.Incomplete = ..., X3: hints.Incomplete = ..., Y3: hints.Incomplete = ...) -> hints.Hresult: ...
        def SetEditingType(self, Index: hints.Incomplete, EditingType: hints.Incomplete) -> hints.Hresult: ...
        def SetPosition(self, Index: hints.Incomplete, X1: hints.Incomplete, Y1: hints.Incomplete) -> hints.Hresult: ...
        def SetSegmentType(self, Index: hints.Incomplete, SegmentType: hints.Incomplete) -> hints.Hresult: ...


class OLEFormat(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493488-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_ObjectVerbs(self) -> 'ObjectVerbs': ...
        ObjectVerbs = hints.normal_property(_get_ObjectVerbs)
        def _get_Object(self) -> hints.Incomplete: ...
        Object = hints.normal_property(_get_Object)
        def _get_ProgID(self) -> hints.Incomplete: ...
        ProgID = hints.normal_property(_get_ProgID)
        def _get_FollowColors(self) -> hints.Incomplete: ...
        def _set_FollowColors(self, FollowColors: hints.Incomplete) -> hints.Hresult: ...
        FollowColors = hints.normal_property(_get_FollowColors, _set_FollowColors)
        def DoVerb(self, Index: hints.Incomplete = ...) -> hints.Hresult: ...
        def Activate(self) -> hints.Hresult: ...


class LinkFormat(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493489-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_SourceFullName(self) -> hints.Incomplete: ...
        def _set_SourceFullName(self, SourceFullName: hints.Incomplete) -> hints.Hresult: ...
        SourceFullName = hints.normal_property(_get_SourceFullName, _set_SourceFullName)
        def _get_AutoUpdate(self) -> hints.Incomplete: ...
        def _set_AutoUpdate(self, AutoUpdate: hints.Incomplete) -> hints.Hresult: ...
        AutoUpdate = hints.normal_property(_get_AutoUpdate, _set_AutoUpdate)
        def Update(self) -> hints.Hresult: ...
        def BreakLink(self) -> hints.Hresult: ...


class PlaceholderFormat(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493477-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Type(self) -> hints.Incomplete: ...
        Type = hints.normal_property(_get_Type)
        def _get_Name(self) -> hints.Incomplete: ...
        def _set_Name(self, Name: hints.Incomplete) -> hints.Hresult: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def _get_ContainedType(self) -> hints.Incomplete: ...
        ContainedType = hints.normal_property(_get_ContainedType)
        def _get_Position(self) -> hints.Incomplete: ...
        Position = hints.normal_property(_get_Position)


class AnimationSettings(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{9149348B-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_DimColor(self) -> 'ColorFormat': ...
        DimColor = hints.normal_property(_get_DimColor)
        def _get_SoundEffect(self) -> 'SoundEffect': ...
        SoundEffect = hints.normal_property(_get_SoundEffect)
        def _get_EntryEffect(self) -> hints.Incomplete: ...
        def _set_EntryEffect(self, EntryEffect: hints.Incomplete) -> hints.Hresult: ...
        EntryEffect = hints.normal_property(_get_EntryEffect, _set_EntryEffect)
        def _get_AfterEffect(self) -> hints.Incomplete: ...
        def _set_AfterEffect(self, AfterEffect: hints.Incomplete) -> hints.Hresult: ...
        AfterEffect = hints.normal_property(_get_AfterEffect, _set_AfterEffect)
        def _get_AnimationOrder(self) -> hints.Incomplete: ...
        def _set_AnimationOrder(self, AnimationOrder: hints.Incomplete) -> hints.Hresult: ...
        AnimationOrder = hints.normal_property(_get_AnimationOrder, _set_AnimationOrder)
        def _get_AdvanceMode(self) -> hints.Incomplete: ...
        def _set_AdvanceMode(self, AdvanceMode: hints.Incomplete) -> hints.Hresult: ...
        AdvanceMode = hints.normal_property(_get_AdvanceMode, _set_AdvanceMode)
        def _get_AdvanceTime(self) -> hints.Incomplete: ...
        def _set_AdvanceTime(self, AdvanceTime: hints.Incomplete) -> hints.Hresult: ...
        AdvanceTime = hints.normal_property(_get_AdvanceTime, _set_AdvanceTime)
        def _get_PlaySettings(self) -> 'PlaySettings': ...
        PlaySettings = hints.normal_property(_get_PlaySettings)
        def _get_TextLevelEffect(self) -> hints.Incomplete: ...
        def _set_TextLevelEffect(self, TextLevelEffect: hints.Incomplete) -> hints.Hresult: ...
        TextLevelEffect = hints.normal_property(_get_TextLevelEffect, _set_TextLevelEffect)
        def _get_TextUnitEffect(self) -> hints.Incomplete: ...
        def _set_TextUnitEffect(self, TextUnitEffect: hints.Incomplete) -> hints.Hresult: ...
        TextUnitEffect = hints.normal_property(_get_TextUnitEffect, _set_TextUnitEffect)
        def _get_Animate(self) -> hints.Incomplete: ...
        def _set_Animate(self, Animate: hints.Incomplete) -> hints.Hresult: ...
        Animate = hints.normal_property(_get_Animate, _set_Animate)
        def _get_AnimateBackground(self) -> hints.Incomplete: ...
        def _set_AnimateBackground(self, AnimateBackground: hints.Incomplete) -> hints.Hresult: ...
        AnimateBackground = hints.normal_property(_get_AnimateBackground, _set_AnimateBackground)
        def _get_AnimateTextInReverse(self) -> hints.Incomplete: ...
        def _set_AnimateTextInReverse(self, AnimateTextInReverse: hints.Incomplete) -> hints.Hresult: ...
        AnimateTextInReverse = hints.normal_property(_get_AnimateTextInReverse, _set_AnimateTextInReverse)
        def _get_ChartUnitEffect(self) -> hints.Incomplete: ...
        def _set_ChartUnitEffect(self, ChartUnitEffect: hints.Incomplete) -> hints.Hresult: ...
        ChartUnitEffect = hints.normal_property(_get_ChartUnitEffect, _set_ChartUnitEffect)


class ActionSettings(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{9149348C-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Item(self, Index: hints.Incomplete) -> 'ActionSetting': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)


class Chart(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A55-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def ApplyDataLabels(self, Type: hints.Incomplete = ..., LegendKey: hints.Incomplete = ..., AutoText: hints.Incomplete = ..., HasLeaderLines: hints.Incomplete = ..., ShowSeriesName: hints.Incomplete = ..., ShowCategoryName: hints.Incomplete = ..., ShowValue: hints.Incomplete = ..., ShowPercentage: hints.Incomplete = ..., ShowBubbleSize: hints.Incomplete = ..., Separator: hints.Incomplete = ...) -> hints.Hresult: ...
        def _get_ChartType(self) -> hints.Incomplete: ...
        def _set_ChartType(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ChartType = hints.normal_property(_get_ChartType, _set_ChartType)
        def _get_HasDataTable(self) -> hints.Incomplete: ...
        def _set_HasDataTable(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        HasDataTable = hints.normal_property(_get_HasDataTable, _set_HasDataTable)
        def ApplyCustomType(self, ChartType: hints.Incomplete, TypeName: hints.Incomplete = ...) -> hints.Hresult: ...
        def GetChartElement(self, X: hints.Incomplete, Y: hints.Incomplete, ElementID: hints.Incomplete, Arg1: hints.Incomplete, Arg2: hints.Incomplete) -> hints.Tuple[hints.Incomplete, hints.Incomplete, hints.Incomplete]: ...
        def SetSourceData(self, Source: hints.Incomplete, PlotBy: hints.Incomplete = ...) -> hints.Hresult: ...
        def _get_PlotBy(self) -> hints.Incomplete: ...
        def _set_PlotBy(self, PlotBy: hints.Incomplete) -> hints.Hresult: ...
        PlotBy = hints.normal_property(_get_PlotBy, _set_PlotBy)
        def AutoFormat(self, Gallery: hints.Incomplete, Format: hints.Incomplete = ...) -> hints.Hresult: ...
        def SetBackgroundPicture(self, FileName: hints.Incomplete) -> hints.Hresult: ...
        def _get_DataTable(self) -> 'DataTable': ...
        DataTable = hints.normal_property(_get_DataTable)
        def Paste(self, Type: hints.Incomplete = ...) -> hints.Hresult: ...
        def _get_BarShape(self) -> hints.Incomplete: ...
        def _set_BarShape(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        BarShape = hints.normal_property(_get_BarShape, _set_BarShape)
        def SetDefaultChart(self, Name: hints.Incomplete) -> hints.Hresult: ...
        def ApplyChartTemplate(self, FileName: hints.Incomplete) -> hints.Hresult: ...
        def SaveChartTemplate(self, FileName: hints.Incomplete) -> hints.Hresult: ...
        def _get_SideWall(self) -> 'Walls': ...
        SideWall = hints.normal_property(_get_SideWall)
        def _get_BackWall(self) -> 'Walls': ...
        BackWall = hints.normal_property(_get_BackWall)
        def _get_ChartStyle(self) -> hints.Incomplete: ...
        def _set_ChartStyle(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ChartStyle = hints.normal_property(_get_ChartStyle, _set_ChartStyle)
        def ClearToMatchStyle(self) -> hints.Hresult: ...
        def _get_HasPivotFields(self) -> hints.Incomplete: ...
        def _set_HasPivotFields(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        HasPivotFields = hints.normal_property(_get_HasPivotFields, _set_HasPivotFields)
        def _get_ShowDataLabelsOverMaximum(self) -> hints.Incomplete: ...
        def _set_ShowDataLabelsOverMaximum(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ShowDataLabelsOverMaximum = hints.normal_property(_get_ShowDataLabelsOverMaximum, _set_ShowDataLabelsOverMaximum)
        def ApplyLayout(self, Layout: hints.Incomplete, ChartType: hints.Incomplete = ...) -> hints.Hresult: ...
        def Refresh(self) -> hints.Hresult: ...
        def _get_ChartData(self) -> 'ChartData': ...
        ChartData = hints.normal_property(_get_ChartData)
        def _get_Shapes(self) -> 'Shapes': ...
        Shapes = hints.normal_property(_get_Shapes)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Area3DGroup(self) -> 'ChartGroup': ...
        Area3DGroup = hints.normal_property(_get_Area3DGroup)
        def AreaGroups(self, Index: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _get_Bar3DGroup(self) -> 'ChartGroup': ...
        Bar3DGroup = hints.normal_property(_get_Bar3DGroup)
        def BarGroups(self, Index: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _get_Column3DGroup(self) -> 'ChartGroup': ...
        Column3DGroup = hints.normal_property(_get_Column3DGroup)
        def ColumnGroups(self, Index: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _get_Line3DGroup(self) -> 'ChartGroup': ...
        Line3DGroup = hints.normal_property(_get_Line3DGroup)
        def LineGroups(self, Index: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _get_Pie3DGroup(self) -> 'ChartGroup': ...
        Pie3DGroup = hints.normal_property(_get_Pie3DGroup)
        def PieGroups(self, Index: hints.Incomplete = ...) -> hints.Incomplete: ...
        def DoughnutGroups(self, Index: hints.Incomplete = ...) -> hints.Incomplete: ...
        def RadarGroups(self, Index: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _get_SurfaceGroup(self) -> 'ChartGroup': ...
        SurfaceGroup = hints.normal_property(_get_SurfaceGroup)
        def XYGroups(self, Index: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _ApplyDataLabels(self, Type: hints.Incomplete = ..., LegendKey: hints.Incomplete = ..., AutoText: hints.Incomplete = ..., HasLeaderLines: hints.Incomplete = ...) -> hints.Hresult: ...
        def _get_AutoScaling(self) -> hints.Incomplete: ...
        def _set_AutoScaling(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        AutoScaling = hints.normal_property(_get_AutoScaling, _set_AutoScaling)
        def Axes(self, Type: hints.Incomplete = ..., AxisGroup: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _get_ChartArea(self) -> 'ChartArea': ...
        ChartArea = hints.normal_property(_get_ChartArea)
        def ChartGroups(self, Index: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _get_ChartTitle(self) -> 'ChartTitle': ...
        ChartTitle = hints.normal_property(_get_ChartTitle)
        def ChartWizard(self, Source: hints.Incomplete = ..., Gallery: hints.Incomplete = ..., Format: hints.Incomplete = ..., PlotBy: hints.Incomplete = ..., CategoryLabels: hints.Incomplete = ..., SeriesLabels: hints.Incomplete = ..., HasLegend: hints.Incomplete = ..., Title: hints.Incomplete = ..., CategoryTitle: hints.Incomplete = ..., ValueTitle: hints.Incomplete = ..., ExtraTitle: hints.Incomplete = ...) -> hints.Hresult: ...
        def Copy(self, Before: hints.Incomplete = ..., After: hints.Incomplete = ...) -> hints.Hresult: ...
        def CopyPicture(self, Appearance: hints.Incomplete = ..., Format: hints.Incomplete = ..., Size: hints.Incomplete = ...) -> hints.Hresult: ...
        def _get_Corners(self) -> 'Corners': ...
        Corners = hints.normal_property(_get_Corners)
        def Delete(self) -> hints.Hresult: ...
        def _get_DepthPercent(self) -> hints.Incomplete: ...
        def _set_DepthPercent(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        DepthPercent = hints.normal_property(_get_DepthPercent, _set_DepthPercent)
        def _get_DisplayBlanksAs(self) -> hints.Incomplete: ...
        def _set_DisplayBlanksAs(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        DisplayBlanksAs = hints.normal_property(_get_DisplayBlanksAs, _set_DisplayBlanksAs)
        def _get_Elevation(self) -> hints.Incomplete: ...
        def _set_Elevation(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Elevation = hints.normal_property(_get_Elevation, _set_Elevation)
        def Export(self, FileName: hints.Incomplete, FilterName: hints.Incomplete = ..., Interactive: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _get_Floor(self) -> 'Floor': ...
        Floor = hints.normal_property(_get_Floor)
        def _get_GapDepth(self) -> hints.Incomplete: ...
        def _set_GapDepth(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        GapDepth = hints.normal_property(_get_GapDepth, _set_GapDepth)
        def _get_HasAxis(self, Index1: hints.Incomplete = ..., Index2: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _set_HasAxis(self, Index1: hints.Incomplete = ..., Index2: hints.Incomplete = ..., **kwargs: hints.Any) -> hints.Hresult: ...
        HasAxis = hints.named_property('HasAxis', _get_HasAxis, _set_HasAxis)
        def _get_HasLegend(self) -> hints.Incomplete: ...
        def _set_HasLegend(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        HasLegend = hints.normal_property(_get_HasLegend, _set_HasLegend)
        def _get_HasTitle(self) -> hints.Incomplete: ...
        def _set_HasTitle(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        HasTitle = hints.normal_property(_get_HasTitle, _set_HasTitle)
        def _get_HeightPercent(self) -> hints.Incomplete: ...
        def _set_HeightPercent(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        HeightPercent = hints.normal_property(_get_HeightPercent, _set_HeightPercent)
        def _get_Legend(self) -> 'Legend': ...
        Legend = hints.normal_property(_get_Legend)
        def _get_Name(self) -> hints.Incomplete: ...
        def _set_Name(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def _get_Perspective(self) -> hints.Incomplete: ...
        def _set_Perspective(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Perspective = hints.normal_property(_get_Perspective, _set_Perspective)
        def _get_PlotArea(self) -> 'PlotArea': ...
        PlotArea = hints.normal_property(_get_PlotArea)
        def _get_PlotVisibleOnly(self) -> hints.Incomplete: ...
        def _set_PlotVisibleOnly(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        PlotVisibleOnly = hints.normal_property(_get_PlotVisibleOnly, _set_PlotVisibleOnly)
        def _get_RightAngleAxes(self) -> hints.Incomplete: ...
        def _set_RightAngleAxes(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        RightAngleAxes = hints.normal_property(_get_RightAngleAxes, _set_RightAngleAxes)
        def _get_Rotation(self) -> hints.Incomplete: ...
        def _set_Rotation(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Rotation = hints.normal_property(_get_Rotation, _set_Rotation)
        def Select(self, Replace: hints.Incomplete = ...) -> hints.Hresult: ...
        def SeriesCollection(self, Index: hints.Incomplete = ...) -> hints.Incomplete: ...
        def SetElement(self, Element: hints.Incomplete) -> hints.Hresult: ...
        def _get_Subtype(self) -> hints.Incomplete: ...
        def _set_Subtype(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Subtype = hints.normal_property(_get_Subtype, _set_Subtype)
        def _get_Type(self) -> hints.Incomplete: ...
        def _set_Type(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Type = hints.normal_property(_get_Type, _set_Type)
        def _get_Walls(self) -> 'Walls': ...
        Walls = hints.normal_property(_get_Walls)
        def _get_Format(self) -> 'ChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_ShowReportFilterFieldButtons(self) -> hints.Incomplete: ...
        def _set_ShowReportFilterFieldButtons(self, res: hints.Incomplete) -> hints.Hresult: ...
        ShowReportFilterFieldButtons = hints.normal_property(_get_ShowReportFilterFieldButtons, _set_ShowReportFilterFieldButtons)
        def _get_ShowLegendFieldButtons(self) -> hints.Incomplete: ...
        def _set_ShowLegendFieldButtons(self, res: hints.Incomplete) -> hints.Hresult: ...
        ShowLegendFieldButtons = hints.normal_property(_get_ShowLegendFieldButtons, _set_ShowLegendFieldButtons)
        def _get_ShowAxisFieldButtons(self) -> hints.Incomplete: ...
        def _set_ShowAxisFieldButtons(self, res: hints.Incomplete) -> hints.Hresult: ...
        ShowAxisFieldButtons = hints.normal_property(_get_ShowAxisFieldButtons, _set_ShowAxisFieldButtons)
        def _get_ShowValueFieldButtons(self) -> hints.Incomplete: ...
        def _set_ShowValueFieldButtons(self, res: hints.Incomplete) -> hints.Hresult: ...
        ShowValueFieldButtons = hints.normal_property(_get_ShowValueFieldButtons, _set_ShowValueFieldButtons)
        def _get_ShowAllFieldButtons(self) -> hints.Incomplete: ...
        def _set_ShowAllFieldButtons(self, res: hints.Incomplete) -> hints.Hresult: ...
        ShowAllFieldButtons = hints.normal_property(_get_ShowAllFieldButtons, _set_ShowAllFieldButtons)
        def _get_AlternativeText(self) -> hints.Incomplete: ...
        def _set_AlternativeText(self, AlternativeText: hints.Incomplete) -> hints.Hresult: ...
        AlternativeText = hints.normal_property(_get_AlternativeText, _set_AlternativeText)
        def _get_Title(self) -> hints.Incomplete: ...
        def _set_Title(self, Title: hints.Incomplete) -> hints.Hresult: ...
        Title = hints.normal_property(_get_Title, _set_Title)
        def FullSeriesCollection(self, Index: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _get_CategoryLabelLevel(self) -> hints.Incomplete: ...
        def _set_CategoryLabelLevel(self, plevel: hints.Incomplete) -> hints.Hresult: ...
        CategoryLabelLevel = hints.normal_property(_get_CategoryLabelLevel, _set_CategoryLabelLevel)
        def _get_SeriesNameLevel(self) -> hints.Incomplete: ...
        def _set_SeriesNameLevel(self, plevel: hints.Incomplete) -> hints.Hresult: ...
        SeriesNameLevel = hints.normal_property(_get_SeriesNameLevel, _set_SeriesNameLevel)
        def _get_HasHiddenContent(self) -> hints.Incomplete: ...
        HasHiddenContent = hints.normal_property(_get_HasHiddenContent)
        def DeleteHiddenContent(self) -> hints.Hresult: ...
        def _get_ChartColor(self) -> hints.Incomplete: ...
        def _set_ChartColor(self, pColor: hints.Incomplete) -> hints.Hresult: ...
        ChartColor = hints.normal_property(_get_ChartColor, _set_ChartColor)
        def ClearToMatchColorStyle(self) -> hints.Hresult: ...
        def GetProperty(self, Id: hints.Incomplete) -> hints.Incomplete: ...
        def SetProperty(self, Id: hints.Incomplete, Value: hints.Incomplete) -> hints.Hresult: ...


Shape._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'plCreator')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD([dispid(10)], HRESULT, 'Apply'),
    COMMETHOD([dispid(11)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'Flip',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoFlipCmd,
            'FlipCmd',
        )
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'IncrementLeft',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'IncrementRotation',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'IncrementTop',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD([dispid(17)], HRESULT, 'PickUp'),
    COMMETHOD([dispid(18)], HRESULT, 'RerouteConnections'),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'ScaleHeight',
        (['in'], c_float, 'Factor'),
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'RelativeToOriginalSize',
        ),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoScaleFrom,
            'fScale',
            0
        )
    ),
    COMMETHOD(
        [dispid(20)],
        HRESULT,
        'ScaleWidth',
        (['in'], c_float, 'Factor'),
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'RelativeToOriginalSize',
        ),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoScaleFrom,
            'fScale',
            0
        )
    ),
    COMMETHOD([dispid(22)], HRESULT, 'SetShapesDefaultProperties'),
    COMMETHOD(
        [dispid(23)],
        HRESULT,
        'Ungroup',
        (['out', 'retval'], POINTER(POINTER(ShapeRange)), 'Ungroup')
    ),
    COMMETHOD(
        [dispid(24)],
        HRESULT,
        'ZOrder',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoZOrderCmd,
            'ZOrderCmd',
        )
    ),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'Adjustments',
        (['out', 'retval'], POINTER(POINTER(Adjustments)), 'Adjustments')
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'AutoShapeType',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoAutoShapeType),
            'AutoShapeType',
        )
    ),
    COMMETHOD(
        [dispid(101), 'propput'],
        HRESULT,
        'AutoShapeType',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoAutoShapeType,
            'AutoShapeType',
        )
    ),
    COMMETHOD(
        [dispid(102), 'propget'],
        HRESULT,
        'BlackWhiteMode',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoBlackWhiteMode),
            'BlackWhiteMode',
        )
    ),
    COMMETHOD(
        [dispid(102), 'propput'],
        HRESULT,
        'BlackWhiteMode',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoBlackWhiteMode,
            'BlackWhiteMode',
        )
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'Callout',
        (['out', 'retval'], POINTER(POINTER(CalloutFormat)), 'Callout')
    ),
    COMMETHOD(
        [dispid(104), 'propget'],
        HRESULT,
        'ConnectionSiteCount',
        (['out', 'retval'], POINTER(c_int), 'ConnectionSiteCount')
    ),
    COMMETHOD(
        [dispid(105), 'propget'],
        HRESULT,
        'Connector',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Connector',
        )
    ),
    COMMETHOD(
        [dispid(106), 'propget'],
        HRESULT,
        'ConnectorFormat',
        (
            ['out', 'retval'],
            POINTER(POINTER(ConnectorFormat)),
            'ConnectorFormat',
        )
    ),
    COMMETHOD(
        [dispid(107), 'propget'],
        HRESULT,
        'Fill',
        (['out', 'retval'], POINTER(POINTER(FillFormat)), 'Fill')
    ),
    COMMETHOD(
        [dispid(108), 'propget'],
        HRESULT,
        'GroupItems',
        (['out', 'retval'], POINTER(POINTER(GroupShapes)), 'GroupItems')
    ),
    COMMETHOD(
        [dispid(109), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_float), 'Height')
    ),
    COMMETHOD(
        [dispid(109), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_float, 'Height')
    ),
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'HorizontalFlip',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'HorizontalFlip',
        )
    ),
    COMMETHOD(
        [dispid(111), 'propget'],
        HRESULT,
        'Left',
        (['out', 'retval'], POINTER(c_float), 'Left')
    ),
    COMMETHOD(
        [dispid(111), 'propput'],
        HRESULT,
        'Left',
        (['in'], c_float, 'Left')
    ),
    COMMETHOD(
        [dispid(112), 'propget'],
        HRESULT,
        'Line',
        (['out', 'retval'], POINTER(POINTER(LineFormat)), 'Line')
    ),
    COMMETHOD(
        [dispid(113), 'propget'],
        HRESULT,
        'LockAspectRatio',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'LockAspectRatio',
        )
    ),
    COMMETHOD(
        [dispid(113), 'propput'],
        HRESULT,
        'LockAspectRatio',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'LockAspectRatio',
        )
    ),
    COMMETHOD(
        [dispid(115), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(115), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'Name')
    ),
    COMMETHOD(
        [dispid(116), 'propget'],
        HRESULT,
        'Nodes',
        (['out', 'retval'], POINTER(POINTER(ShapeNodes)), 'Nodes')
    ),
    COMMETHOD(
        [dispid(117), 'propget'],
        HRESULT,
        'Rotation',
        (['out', 'retval'], POINTER(c_float), 'Rotation')
    ),
    COMMETHOD(
        [dispid(117), 'propput'],
        HRESULT,
        'Rotation',
        (['in'], c_float, 'Rotation')
    ),
    COMMETHOD(
        [dispid(118), 'propget'],
        HRESULT,
        'PictureFormat',
        (['out', 'retval'], POINTER(POINTER(PictureFormat)), 'Picture')
    ),
    COMMETHOD(
        [dispid(119), 'propget'],
        HRESULT,
        'Shadow',
        (['out', 'retval'], POINTER(POINTER(ShadowFormat)), 'Shadow')
    ),
    COMMETHOD(
        [dispid(120), 'propget'],
        HRESULT,
        'TextEffect',
        (['out', 'retval'], POINTER(POINTER(TextEffectFormat)), 'TextEffect')
    ),
    COMMETHOD(
        [dispid(121), 'propget'],
        HRESULT,
        'TextFrame',
        (['out', 'retval'], POINTER(POINTER(TextFrame)), 'TextFrame')
    ),
    COMMETHOD(
        [dispid(122), 'propget'],
        HRESULT,
        'ThreeD',
        (['out', 'retval'], POINTER(POINTER(ThreeDFormat)), 'ThreeD')
    ),
    COMMETHOD(
        [dispid(123), 'propget'],
        HRESULT,
        'Top',
        (['out', 'retval'], POINTER(c_float), 'Top')
    ),
    COMMETHOD(
        [dispid(123), 'propput'],
        HRESULT,
        'Top',
        (['in'], c_float, 'Top')
    ),
    COMMETHOD(
        [dispid(124), 'propget'],
        HRESULT,
        'Type',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoShapeType),
            'Type',
        )
    ),
    COMMETHOD(
        [dispid(125), 'propget'],
        HRESULT,
        'VerticalFlip',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'VerticalFlip',
        )
    ),
    COMMETHOD(
        [dispid(126), 'propget'],
        HRESULT,
        'Vertices',
        (['out', 'retval'], POINTER(VARIANT), 'Vertices')
    ),
    COMMETHOD(
        [dispid(127), 'propget'],
        HRESULT,
        'Visible',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Visible',
        )
    ),
    COMMETHOD(
        [dispid(127), 'propput'],
        HRESULT,
        'Visible',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Visible',
        )
    ),
    COMMETHOD(
        [dispid(128), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_float), 'Width')
    ),
    COMMETHOD(
        [dispid(128), 'propput'],
        HRESULT,
        'Width',
        (['in'], c_float, 'Width')
    ),
    COMMETHOD(
        [dispid(129), 'propget'],
        HRESULT,
        'ZOrderPosition',
        (['out', 'retval'], POINTER(c_int), 'ZOrderPosition')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'OLEFormat',
        (['out', 'retval'], POINTER(POINTER(OLEFormat)), 'OLEFormat')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'LinkFormat',
        (['out', 'retval'], POINTER(POINTER(LinkFormat)), 'LinkFormat')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'PlaceholderFormat',
        (
            ['out', 'retval'],
            POINTER(POINTER(PlaceholderFormat)),
            'PlaceholderFormat',
        )
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'AnimationSettings',
        (
            ['out', 'retval'],
            POINTER(POINTER(AnimationSettings)),
            'AnimationSettings',
        )
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'ActionSettings',
        (['out', 'retval'], POINTER(POINTER(ActionSettings)), 'ActionSettings')
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'Tags',
        (['out', 'retval'], POINTER(POINTER(Tags)), 'Tags')
    ),
    COMMETHOD([dispid(2009)], HRESULT, 'Cut'),
    COMMETHOD([dispid(2010)], HRESULT, 'Copy'),
    COMMETHOD(
        [dispid(2011)],
        HRESULT,
        'Select',
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Replace',
            -1
        )
    ),
    COMMETHOD(
        [dispid(2012)],
        HRESULT,
        'Duplicate',
        (['out', 'retval'], POINTER(POINTER(ShapeRange)), 'Duplicate')
    ),
    COMMETHOD(
        [dispid(2013), 'propget'],
        HRESULT,
        'MediaType',
        (['out', 'retval'], POINTER(PpMediaType), 'MediaType')
    ),
    COMMETHOD(
        [dispid(2014), 'propget'],
        HRESULT,
        'HasTextFrame',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'HasTextFrame',
        )
    ),
    COMMETHOD(
        [dispid(2015), 'hidden', 'propget'],
        HRESULT,
        'SoundFormat',
        (['out', 'retval'], POINTER(POINTER(SoundFormat)), 'SoundFormat')
    ),
    COMMETHOD(
        [dispid(130), 'hidden', 'propget'],
        HRESULT,
        'Script',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.Script)),
            'Script',
        )
    ),
    COMMETHOD(
        [dispid(131), 'propget'],
        HRESULT,
        'AlternativeText',
        (['out', 'retval'], POINTER(BSTR), 'AlternativeText')
    ),
    COMMETHOD(
        [dispid(131), 'propput'],
        HRESULT,
        'AlternativeText',
        (['in'], BSTR, 'AlternativeText')
    ),
    COMMETHOD(
        [dispid(2016), 'propget'],
        HRESULT,
        'HasTable',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'HasTable',
        )
    ),
    COMMETHOD(
        [dispid(2017), 'propget'],
        HRESULT,
        'Table',
        (['out', 'retval'], POINTER(POINTER(Table)), 'Table')
    ),
    COMMETHOD(
        [dispid(2018), 'hidden'],
        HRESULT,
        'Export',
        (['in'], BSTR, 'PathName'),
        (['in'], PpShapeFormat, 'Filter'),
        (['in', 'optional'], c_int, 'ScaleWidth', 0),
        (['in', 'optional'], c_int, 'ScaleHeight', 0),
        (['in', 'optional'], PpExportMode, 'ExportMode', 1)
    ),
    COMMETHOD(
        [dispid(132), 'hidden', 'propget'],
        HRESULT,
        'HasDiagram',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'pHasDiagram',
        )
    ),
    COMMETHOD(
        [dispid(133), 'hidden', 'propget'],
        HRESULT,
        'Diagram',
        (['out', 'retval'], POINTER(POINTER(Diagram)), 'Diagram')
    ),
    COMMETHOD(
        [dispid(134), 'hidden', 'propget'],
        HRESULT,
        'HasDiagramNode',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'pHasDiagram',
        )
    ),
    COMMETHOD(
        [dispid(135), 'hidden', 'propget'],
        HRESULT,
        'DiagramNode',
        (['out', 'retval'], POINTER(POINTER(DiagramNode)), 'DiagramNode')
    ),
    COMMETHOD(
        [dispid(136), 'propget'],
        HRESULT,
        'Child',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Child',
        )
    ),
    COMMETHOD(
        [dispid(137), 'propget'],
        HRESULT,
        'ParentGroup',
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Parent')
    ),
    COMMETHOD(
        [dispid(138), 'hidden', 'propget'],
        HRESULT,
        'CanvasItems',
        (['out', 'retval'], POINTER(POINTER(CanvasShapes)), 'CanvasShapes')
    ),
    COMMETHOD(
        [dispid(139), 'propget'],
        HRESULT,
        'Id',
        (['out', 'retval'], POINTER(c_int), 'pid')
    ),
    COMMETHOD(
        [dispid(140), 'hidden'],
        HRESULT,
        'CanvasCropLeft',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(141), 'hidden'],
        HRESULT,
        'CanvasCropTop',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(142), 'hidden'],
        HRESULT,
        'CanvasCropRight',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(143), 'hidden'],
        HRESULT,
        'CanvasCropBottom',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(144), 'hidden', 'propput'],
        HRESULT,
        'RTF',
        (['in'], BSTR, 'rhs')
    ),
    COMMETHOD(
        [dispid(2020), 'propget'],
        HRESULT,
        'CustomerData',
        (['out', 'retval'], POINTER(POINTER(CustomerData)), 'CustomerData')
    ),
    COMMETHOD(
        [dispid(145), 'propget'],
        HRESULT,
        'TextFrame2',
        (['out', 'retval'], POINTER(POINTER(TextFrame2)), 'Frame')
    ),
    COMMETHOD(
        [dispid(148), 'propget'],
        HRESULT,
        'HasChart',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'pHasChart',
        )
    ),
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'ShapeStyle',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoShapeStyleIndex),
            'ShapeStyle',
        )
    ),
    COMMETHOD(
        [dispid(150), 'propput'],
        HRESULT,
        'ShapeStyle',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoShapeStyleIndex,
            'ShapeStyle',
        )
    ),
    COMMETHOD(
        [dispid(151), 'propget'],
        HRESULT,
        'BackgroundStyle',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoBackgroundStyleIndex),
            'BackgroundStyle',
        )
    ),
    COMMETHOD(
        [dispid(151), 'propput'],
        HRESULT,
        'BackgroundStyle',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoBackgroundStyleIndex,
            'BackgroundStyle',
        )
    ),
    COMMETHOD(
        [dispid(152), 'propget'],
        HRESULT,
        'SoftEdge',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.SoftEdgeFormat)),
            'SoftEdge',
        )
    ),
    COMMETHOD(
        [dispid(153), 'propget'],
        HRESULT,
        'Glow',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.GlowFormat)),
            'Glow',
        )
    ),
    COMMETHOD(
        [dispid(154), 'propget'],
        HRESULT,
        'Reflection',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.ReflectionFormat)),
            'Reflection',
        )
    ),
    COMMETHOD(
        [dispid(2021), 'propget'],
        HRESULT,
        'Chart',
        (['out', 'retval'], POINTER(POINTER(Chart)), 'Chart')
    ),
    COMMETHOD(
        [dispid(155), 'propget'],
        HRESULT,
        'HasSmartArt',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'HasSmartArt',
        )
    ),
    COMMETHOD(
        [dispid(156), 'propget'],
        HRESULT,
        'SmartArt',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.SmartArt)),
            'SmartArt',
        )
    ),
    COMMETHOD(
        [dispid(157)],
        HRESULT,
        'ConvertTextToSmartArt',
        (
            ['in'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.SmartArtLayout),
            'Layout',
        )
    ),
    COMMETHOD(
        [dispid(158), 'propget'],
        HRESULT,
        'Title',
        (['out', 'retval'], POINTER(BSTR), 'Title')
    ),
    COMMETHOD(
        [dispid(158), 'propput'],
        HRESULT,
        'Title',
        (['in'], BSTR, 'Title')
    ),
    COMMETHOD(
        [dispid(2022), 'propget'],
        HRESULT,
        'MediaFormat',
        (['out', 'retval'], POINTER(POINTER(MediaFormat)), 'MediaFormat')
    ),
    COMMETHOD([dispid(2023)], HRESULT, 'PickupAnimation'),
    COMMETHOD([dispid(2024)], HRESULT, 'ApplyAnimation'),
    COMMETHOD([dispid(2025)], HRESULT, 'UpgradeMedia'),
    COMMETHOD(
        [dispid(2031), 'propget'],
        HRESULT,
        'IsNarration',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'IsNarration',
        )
    ),
    COMMETHOD(
        [dispid(2031), 'propput'],
        HRESULT,
        'IsNarration',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'IsNarration',
        )
    ),
    COMMETHOD(
        [dispid(160), 'propget'],
        HRESULT,
        'InkXML',
        (['out', 'retval'], POINTER(BSTR), 'InkXML')
    ),
    COMMETHOD(
        [dispid(161), 'propget'],
        HRESULT,
        'HasInkXML',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'HasInkXML',
        )
    ),
    COMMETHOD(
        [dispid(162), 'propget'],
        HRESULT,
        'HasSectionZoom',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'HasSectionZoom',
        )
    ),
    COMMETHOD(
        [dispid(163), 'propget'],
        HRESULT,
        'GraphicStyle',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoGraphicStyleIndex),
            'GraphicStyle',
        )
    ),
    COMMETHOD(
        [dispid(163), 'propput'],
        HRESULT,
        'GraphicStyle',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoGraphicStyleIndex,
            'GraphicStyle',
        )
    ),
    COMMETHOD(
        [dispid(164), 'propget'],
        HRESULT,
        'Model3D',
        (['out', 'retval'], POINTER(POINTER(Model3DFormat)), 'Model3D')
    ),
    COMMETHOD(
        [dispid(165), 'propget'],
        HRESULT,
        'Decorative',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'fDecorative',
        )
    ),
    COMMETHOD(
        [dispid(165), 'propput'],
        HRESULT,
        'Decorative',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'fDecorative',
        )
    ),
    COMMETHOD(
        [dispid(166)],
        HRESULT,
        'ConvertInkToText',
        (['out', 'retval'], POINTER(BSTR), 'pConvertedText')
    ),
    COMMETHOD(
        [dispid(167), 'propget'],
        HRESULT,
        'Locked',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'pLocked',
        )
    ),
    COMMETHOD(
        [dispid(167), 'propput'],
        HRESULT,
        'Locked',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'pLocked',
        )
    ),
]

################################################################
# code template for Shape implementation
# class Shape_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return plCreator
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Apply(self):
#         '-no docstring-'
#         #return 
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     def Flip(self, FlipCmd):
#         '-no docstring-'
#         #return 
#
#     def IncrementLeft(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def IncrementRotation(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def IncrementTop(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def PickUp(self):
#         '-no docstring-'
#         #return 
#
#     def RerouteConnections(self):
#         '-no docstring-'
#         #return 
#
#     def ScaleHeight(self, Factor, RelativeToOriginalSize, fScale):
#         '-no docstring-'
#         #return 
#
#     def ScaleWidth(self, Factor, RelativeToOriginalSize, fScale):
#         '-no docstring-'
#         #return 
#
#     def SetShapesDefaultProperties(self):
#         '-no docstring-'
#         #return 
#
#     def Ungroup(self):
#         '-no docstring-'
#         #return Ungroup
#
#     def ZOrder(self, ZOrderCmd):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Adjustments(self):
#         '-no docstring-'
#         #return Adjustments
#
#     def _get(self):
#         '-no docstring-'
#         #return AutoShapeType
#     def _set(self, AutoShapeType):
#         '-no docstring-'
#     AutoShapeType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return BlackWhiteMode
#     def _set(self, BlackWhiteMode):
#         '-no docstring-'
#     BlackWhiteMode = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Callout(self):
#         '-no docstring-'
#         #return Callout
#
#     @property
#     def ConnectionSiteCount(self):
#         '-no docstring-'
#         #return ConnectionSiteCount
#
#     @property
#     def Connector(self):
#         '-no docstring-'
#         #return Connector
#
#     @property
#     def ConnectorFormat(self):
#         '-no docstring-'
#         #return ConnectorFormat
#
#     @property
#     def Fill(self):
#         '-no docstring-'
#         #return Fill
#
#     @property
#     def GroupItems(self):
#         '-no docstring-'
#         #return GroupItems
#
#     def _get(self):
#         '-no docstring-'
#         #return Height
#     def _set(self, Height):
#         '-no docstring-'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def HorizontalFlip(self):
#         '-no docstring-'
#         #return HorizontalFlip
#
#     def _get(self):
#         '-no docstring-'
#         #return Left
#     def _set(self, Left):
#         '-no docstring-'
#     Left = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Line(self):
#         '-no docstring-'
#         #return Line
#
#     def _get(self):
#         '-no docstring-'
#         #return LockAspectRatio
#     def _set(self, LockAspectRatio):
#         '-no docstring-'
#     LockAspectRatio = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Name
#     def _set(self, Name):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Nodes(self):
#         '-no docstring-'
#         #return Nodes
#
#     def _get(self):
#         '-no docstring-'
#         #return Rotation
#     def _set(self, Rotation):
#         '-no docstring-'
#     Rotation = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def PictureFormat(self):
#         '-no docstring-'
#         #return Picture
#
#     @property
#     def Shadow(self):
#         '-no docstring-'
#         #return Shadow
#
#     @property
#     def TextEffect(self):
#         '-no docstring-'
#         #return TextEffect
#
#     @property
#     def TextFrame(self):
#         '-no docstring-'
#         #return TextFrame
#
#     @property
#     def ThreeD(self):
#         '-no docstring-'
#         #return ThreeD
#
#     def _get(self):
#         '-no docstring-'
#         #return Top
#     def _set(self, Top):
#         '-no docstring-'
#     Top = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Type(self):
#         '-no docstring-'
#         #return Type
#
#     @property
#     def VerticalFlip(self):
#         '-no docstring-'
#         #return VerticalFlip
#
#     @property
#     def Vertices(self):
#         '-no docstring-'
#         #return Vertices
#
#     def _get(self):
#         '-no docstring-'
#         #return Visible
#     def _set(self, Visible):
#         '-no docstring-'
#     Visible = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Width
#     def _set(self, Width):
#         '-no docstring-'
#     Width = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def ZOrderPosition(self):
#         '-no docstring-'
#         #return ZOrderPosition
#
#     @property
#     def OLEFormat(self):
#         '-no docstring-'
#         #return OLEFormat
#
#     @property
#     def LinkFormat(self):
#         '-no docstring-'
#         #return LinkFormat
#
#     @property
#     def PlaceholderFormat(self):
#         '-no docstring-'
#         #return PlaceholderFormat
#
#     @property
#     def AnimationSettings(self):
#         '-no docstring-'
#         #return AnimationSettings
#
#     @property
#     def ActionSettings(self):
#         '-no docstring-'
#         #return ActionSettings
#
#     @property
#     def Tags(self):
#         '-no docstring-'
#         #return Tags
#
#     def Cut(self):
#         '-no docstring-'
#         #return 
#
#     def Copy(self):
#         '-no docstring-'
#         #return 
#
#     def Select(self, Replace):
#         '-no docstring-'
#         #return 
#
#     def Duplicate(self):
#         '-no docstring-'
#         #return Duplicate
#
#     @property
#     def MediaType(self):
#         '-no docstring-'
#         #return MediaType
#
#     @property
#     def HasTextFrame(self):
#         '-no docstring-'
#         #return HasTextFrame
#
#     @property
#     def SoundFormat(self):
#         '-no docstring-'
#         #return SoundFormat
#
#     @property
#     def Script(self):
#         '-no docstring-'
#         #return Script
#
#     def _get(self):
#         '-no docstring-'
#         #return AlternativeText
#     def _set(self, AlternativeText):
#         '-no docstring-'
#     AlternativeText = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def HasTable(self):
#         '-no docstring-'
#         #return HasTable
#
#     @property
#     def Table(self):
#         '-no docstring-'
#         #return Table
#
#     def Export(self, PathName, Filter, ScaleWidth, ScaleHeight, ExportMode):
#         '-no docstring-'
#         #return 
#
#     @property
#     def HasDiagram(self):
#         '-no docstring-'
#         #return pHasDiagram
#
#     @property
#     def Diagram(self):
#         '-no docstring-'
#         #return Diagram
#
#     @property
#     def HasDiagramNode(self):
#         '-no docstring-'
#         #return pHasDiagram
#
#     @property
#     def DiagramNode(self):
#         '-no docstring-'
#         #return DiagramNode
#
#     @property
#     def Child(self):
#         '-no docstring-'
#         #return Child
#
#     @property
#     def ParentGroup(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def CanvasItems(self):
#         '-no docstring-'
#         #return CanvasShapes
#
#     @property
#     def Id(self):
#         '-no docstring-'
#         #return pid
#
#     def CanvasCropLeft(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def CanvasCropTop(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def CanvasCropRight(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def CanvasCropBottom(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def _set(self, rhs):
#         '-no docstring-'
#     RTF = property(fset = _set, doc = _set.__doc__)
#
#     @property
#     def CustomerData(self):
#         '-no docstring-'
#         #return CustomerData
#
#     @property
#     def TextFrame2(self):
#         '-no docstring-'
#         #return Frame
#
#     @property
#     def HasChart(self):
#         '-no docstring-'
#         #return pHasChart
#
#     def _get(self):
#         '-no docstring-'
#         #return ShapeStyle
#     def _set(self, ShapeStyle):
#         '-no docstring-'
#     ShapeStyle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return BackgroundStyle
#     def _set(self, BackgroundStyle):
#         '-no docstring-'
#     BackgroundStyle = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def SoftEdge(self):
#         '-no docstring-'
#         #return SoftEdge
#
#     @property
#     def Glow(self):
#         '-no docstring-'
#         #return Glow
#
#     @property
#     def Reflection(self):
#         '-no docstring-'
#         #return Reflection
#
#     @property
#     def Chart(self):
#         '-no docstring-'
#         #return Chart
#
#     @property
#     def HasSmartArt(self):
#         '-no docstring-'
#         #return HasSmartArt
#
#     @property
#     def SmartArt(self):
#         '-no docstring-'
#         #return SmartArt
#
#     def ConvertTextToSmartArt(self, Layout):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return Title
#     def _set(self, Title):
#         '-no docstring-'
#     Title = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def MediaFormat(self):
#         '-no docstring-'
#         #return MediaFormat
#
#     def PickupAnimation(self):
#         '-no docstring-'
#         #return 
#
#     def ApplyAnimation(self):
#         '-no docstring-'
#         #return 
#
#     def UpgradeMedia(self):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return IsNarration
#     def _set(self, IsNarration):
#         '-no docstring-'
#     IsNarration = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def InkXML(self):
#         '-no docstring-'
#         #return InkXML
#
#     @property
#     def HasInkXML(self):
#         '-no docstring-'
#         #return HasInkXML
#
#     @property
#     def HasSectionZoom(self):
#         '-no docstring-'
#         #return HasSectionZoom
#
#     def _get(self):
#         '-no docstring-'
#         #return GraphicStyle
#     def _set(self, GraphicStyle):
#         '-no docstring-'
#     GraphicStyle = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Model3D(self):
#         '-no docstring-'
#         #return Model3D
#
#     def _get(self):
#         '-no docstring-'
#         #return fDecorative
#     def _set(self, fDecorative):
#         '-no docstring-'
#     Decorative = property(_get, _set, doc = _set.__doc__)
#
#     def ConvertInkToText(self):
#         '-no docstring-'
#         #return pConvertedText
#
#     def _get(self):
#         '-no docstring-'
#         #return pLocked
#     def _set(self, pLocked):
#         '-no docstring-'
#     Locked = property(_get, _set, doc = _set.__doc__)
#


class Hyperlink(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493465-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Type(self) -> hints.Incomplete: ...
        Type = hints.normal_property(_get_Type)
        def _get_Address(self) -> hints.Incomplete: ...
        def _set_Address(self, Address: hints.Incomplete) -> hints.Hresult: ...
        Address = hints.normal_property(_get_Address, _set_Address)
        def _get_SubAddress(self) -> hints.Incomplete: ...
        def _set_SubAddress(self, SubAddress: hints.Incomplete) -> hints.Hresult: ...
        SubAddress = hints.normal_property(_get_SubAddress, _set_SubAddress)
        def AddToFavorites(self) -> hints.Hresult: ...
        def _get_EmailSubject(self) -> hints.Incomplete: ...
        def _set_EmailSubject(self, EmailSubject: hints.Incomplete) -> hints.Hresult: ...
        EmailSubject = hints.normal_property(_get_EmailSubject, _set_EmailSubject)
        def _get_ScreenTip(self) -> hints.Incomplete: ...
        def _set_ScreenTip(self, ScreenTip: hints.Incomplete) -> hints.Hresult: ...
        ScreenTip = hints.normal_property(_get_ScreenTip, _set_ScreenTip)
        def _get_TextToDisplay(self) -> hints.Incomplete: ...
        def _set_TextToDisplay(self, TextToDisplay: hints.Incomplete) -> hints.Hresult: ...
        TextToDisplay = hints.normal_property(_get_TextToDisplay, _set_TextToDisplay)
        def _get_ShowAndReturn(self) -> hints.Incomplete: ...
        def _set_ShowAndReturn(self, ShowAndReturn: hints.Incomplete) -> hints.Hresult: ...
        ShowAndReturn = hints.normal_property(_get_ShowAndReturn, _set_ShowAndReturn)
        def Follow(self) -> hints.Hresult: ...
        def CreateNewDocument(self, FileName: hints.Incomplete, EditNow: hints.Incomplete, Overwrite: hints.Incomplete) -> hints.Hresult: ...
        def Delete(self) -> hints.Hresult: ...


Hyperlinks._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(Hyperlink)), 'Item')
    ),
]

################################################################
# code template for Hyperlinks implementation
# class Hyperlinks_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#

TextFrame2._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'plCreator')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'MarginBottom',
        (['out', 'retval'], POINTER(c_float), 'MarginBottom')
    ),
    COMMETHOD(
        [dispid(100), 'propput'],
        HRESULT,
        'MarginBottom',
        (['in'], c_float, 'MarginBottom')
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'MarginLeft',
        (['out', 'retval'], POINTER(c_float), 'MarginLeft')
    ),
    COMMETHOD(
        [dispid(101), 'propput'],
        HRESULT,
        'MarginLeft',
        (['in'], c_float, 'MarginLeft')
    ),
    COMMETHOD(
        [dispid(102), 'propget'],
        HRESULT,
        'MarginRight',
        (['out', 'retval'], POINTER(c_float), 'MarginRight')
    ),
    COMMETHOD(
        [dispid(102), 'propput'],
        HRESULT,
        'MarginRight',
        (['in'], c_float, 'MarginRight')
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'MarginTop',
        (['out', 'retval'], POINTER(c_float), 'MarginTop')
    ),
    COMMETHOD(
        [dispid(103), 'propput'],
        HRESULT,
        'MarginTop',
        (['in'], c_float, 'MarginTop')
    ),
    COMMETHOD(
        [dispid(104), 'propget'],
        HRESULT,
        'Orientation',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTextOrientation),
            'Orientation',
        )
    ),
    COMMETHOD(
        [dispid(104), 'propput'],
        HRESULT,
        'Orientation',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTextOrientation,
            'Orientation',
        )
    ),
    COMMETHOD(
        [dispid(105), 'propget'],
        HRESULT,
        'HorizontalAnchor',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoHorizontalAnchor),
            'HorizontalAnchor',
        )
    ),
    COMMETHOD(
        [dispid(105), 'propput'],
        HRESULT,
        'HorizontalAnchor',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoHorizontalAnchor,
            'HorizontalAnchor',
        )
    ),
    COMMETHOD(
        [dispid(106), 'propget'],
        HRESULT,
        'VerticalAnchor',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoVerticalAnchor),
            'VerticalAnchor',
        )
    ),
    COMMETHOD(
        [dispid(106), 'propput'],
        HRESULT,
        'VerticalAnchor',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoVerticalAnchor,
            'VerticalAnchor',
        )
    ),
    COMMETHOD(
        [dispid(107), 'propget'],
        HRESULT,
        'PathFormat',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPathFormat),
            'PathFormat',
        )
    ),
    COMMETHOD(
        [dispid(107), 'propput'],
        HRESULT,
        'PathFormat',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPathFormat,
            'PathFormat',
        )
    ),
    COMMETHOD(
        [dispid(108), 'propget'],
        HRESULT,
        'WarpFormat',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoWarpFormat),
            'WarpFormat',
        )
    ),
    COMMETHOD(
        [dispid(108), 'propput'],
        HRESULT,
        'WarpFormat',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoWarpFormat,
            'WarpFormat',
        )
    ),
    COMMETHOD(
        [dispid(109), 'propget'],
        HRESULT,
        'WordArtFormat',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPresetTextEffect),
            'WordArtFormat',
        )
    ),
    COMMETHOD(
        [dispid(109), 'propput'],
        HRESULT,
        'WordArtFormat',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPresetTextEffect,
            'WordArtFormat',
        )
    ),
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'WordWrap',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'WordWrap',
        )
    ),
    COMMETHOD(
        [dispid(110), 'propput'],
        HRESULT,
        'WordWrap',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'WordWrap',
        )
    ),
    COMMETHOD(
        [dispid(111), 'propget'],
        HRESULT,
        'AutoSize',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoAutoSize),
            'AutoSize',
        )
    ),
    COMMETHOD(
        [dispid(111), 'propput'],
        HRESULT,
        'AutoSize',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoAutoSize,
            'AutoSize',
        )
    ),
    COMMETHOD(
        [dispid(112), 'propget'],
        HRESULT,
        'ThreeD',
        (['out', 'retval'], POINTER(POINTER(ThreeDFormat)), 'ThreeD')
    ),
    COMMETHOD(
        [dispid(113), 'propget'],
        HRESULT,
        'HasText',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'pHasText',
        )
    ),
    COMMETHOD(
        [dispid(114), 'propget'],
        HRESULT,
        'TextRange',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.TextRange2)),
            'Range',
        )
    ),
    COMMETHOD(
        [dispid(115), 'propget'],
        HRESULT,
        'Column',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.TextColumn2)),
            'Column',
        )
    ),
    COMMETHOD(
        [dispid(116), 'propget'],
        HRESULT,
        'Ruler',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.Ruler2)),
            'Ruler',
        )
    ),
    COMMETHOD([dispid(117)], HRESULT, 'DeleteText'),
    COMMETHOD(
        [dispid(118), 'propget'],
        HRESULT,
        'NoTextRotation',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'NoTextRotation',
        )
    ),
    COMMETHOD(
        [dispid(118), 'propput'],
        HRESULT,
        'NoTextRotation',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'NoTextRotation',
        )
    ),
]

################################################################
# code template for TextFrame2 implementation
# class TextFrame2_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return plCreator
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return MarginBottom
#     def _set(self, MarginBottom):
#         '-no docstring-'
#     MarginBottom = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return MarginLeft
#     def _set(self, MarginLeft):
#         '-no docstring-'
#     MarginLeft = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return MarginRight
#     def _set(self, MarginRight):
#         '-no docstring-'
#     MarginRight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return MarginTop
#     def _set(self, MarginTop):
#         '-no docstring-'
#     MarginTop = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Orientation
#     def _set(self, Orientation):
#         '-no docstring-'
#     Orientation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return HorizontalAnchor
#     def _set(self, HorizontalAnchor):
#         '-no docstring-'
#     HorizontalAnchor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return VerticalAnchor
#     def _set(self, VerticalAnchor):
#         '-no docstring-'
#     VerticalAnchor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return PathFormat
#     def _set(self, PathFormat):
#         '-no docstring-'
#     PathFormat = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return WarpFormat
#     def _set(self, WarpFormat):
#         '-no docstring-'
#     WarpFormat = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return WordArtFormat
#     def _set(self, WordArtFormat):
#         '-no docstring-'
#     WordArtFormat = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return WordWrap
#     def _set(self, WordWrap):
#         '-no docstring-'
#     WordWrap = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return AutoSize
#     def _set(self, AutoSize):
#         '-no docstring-'
#     AutoSize = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def ThreeD(self):
#         '-no docstring-'
#         #return ThreeD
#
#     @property
#     def HasText(self):
#         '-no docstring-'
#         #return pHasText
#
#     @property
#     def TextRange(self):
#         '-no docstring-'
#         #return Range
#
#     @property
#     def Column(self):
#         '-no docstring-'
#         #return Column
#
#     @property
#     def Ruler(self):
#         '-no docstring-'
#         #return Ruler
#
#     def DeleteText(self):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return NoTextRotation
#     def _set(self, NoTextRotation):
#         '-no docstring-'
#     NoTextRotation = property(_get, _set, doc = _set.__doc__)
#

Cell._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Shape',
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Shape')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Borders',
        (['out', 'retval'], POINTER(POINTER(Borders)), 'Borders')
    ),
    COMMETHOD(
        [dispid(2005)],
        HRESULT,
        'Merge',
        (['in'], POINTER(Cell), 'MergeTo')
    ),
    COMMETHOD(
        [dispid(2006)],
        HRESULT,
        'Split',
        (['in'], c_int, 'NumRows'),
        (['in'], c_int, 'NumColumns')
    ),
    COMMETHOD([dispid(2007)], HRESULT, 'Select'),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'Selected',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Selected')
    ),
]

################################################################
# code template for Cell implementation
# class Cell_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Shape(self):
#         '-no docstring-'
#         #return Shape
#
#     @property
#     def Borders(self):
#         '-no docstring-'
#         #return Borders
#
#     def Merge(self, MergeTo):
#         '-no docstring-'
#         #return 
#
#     def Split(self, NumRows, NumColumns):
#         '-no docstring-'
#         #return 
#
#     def Select(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Selected(self):
#         '-no docstring-'
#         #return Selected
#


class ShapeNode(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493487-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_EditingType(self) -> hints.Incomplete: ...
        EditingType = hints.normal_property(_get_EditingType)
        def _get_Points(self) -> hints.Incomplete: ...
        Points = hints.normal_property(_get_Points)
        def _get_SegmentType(self) -> hints.Incomplete: ...
        SegmentType = hints.normal_property(_get_SegmentType)


ShapeNodes._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'plCreator')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(ShapeNode)), 'Item')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), '_NewEnum')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'Delete',
        (['in'], c_int, 'Index')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'Insert',
        (['in'], c_int, 'Index'),
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoSegmentType,
            'SegmentType',
        ),
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoEditingType,
            'EditingType',
        ),
        (['in'], c_float, 'X1'),
        (['in'], c_float, 'Y1'),
        (['in', 'optional'], c_float, 'X2', 0.0),
        (['in', 'optional'], c_float, 'Y2', 0.0),
        (['in', 'optional'], c_float, 'X3', 0.0),
        (['in', 'optional'], c_float, 'Y3', 0.0)
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'SetEditingType',
        (['in'], c_int, 'Index'),
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoEditingType,
            'EditingType',
        )
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'SetPosition',
        (['in'], c_int, 'Index'),
        (['in'], c_float, 'X1'),
        (['in'], c_float, 'Y1')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'SetSegmentType',
        (['in'], c_int, 'Index'),
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoSegmentType,
            'SegmentType',
        )
    ),
]

################################################################
# code template for ShapeNodes implementation
# class ShapeNodes_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return plCreator
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return Count
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return _NewEnum
#
#     def Delete(self, Index):
#         '-no docstring-'
#         #return 
#
#     def Insert(self, Index, SegmentType, EditingType, X1, Y1, X2, Y2, X3, Y3):
#         '-no docstring-'
#         #return 
#
#     def SetEditingType(self, Index, EditingType):
#         '-no docstring-'
#         #return 
#
#     def SetPosition(self, Index, X1, Y1):
#         '-no docstring-'
#         #return 
#
#     def SetSegmentType(self, Index, SegmentType):
#         '-no docstring-'
#         #return 
#

ColorFormat._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'plCreator')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'RGB',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoRGBType),
            'RGB',
        )
    ),
    COMMETHOD(
        [dispid(0), 'propput'],
        HRESULT,
        'RGB',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoRGBType,
            'RGB',
        )
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'Type',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoColorType),
            'Type',
        )
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'SchemeColor',
        (['out', 'retval'], POINTER(PpColorSchemeIndex), 'SchemeColor')
    ),
    COMMETHOD(
        [dispid(2003), 'propput'],
        HRESULT,
        'SchemeColor',
        (['in'], PpColorSchemeIndex, 'SchemeColor')
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'TintAndShade',
        (['out', 'retval'], POINTER(c_float), 'pValue')
    ),
    COMMETHOD(
        [dispid(103), 'propput'],
        HRESULT,
        'TintAndShade',
        (['in'], c_float, 'pValue')
    ),
    COMMETHOD(
        [dispid(104), 'propget'],
        HRESULT,
        'ObjectThemeColor',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoThemeColorIndex),
            'ObjectThemeColor',
        )
    ),
    COMMETHOD(
        [dispid(104), 'propput'],
        HRESULT,
        'ObjectThemeColor',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoThemeColorIndex,
            'ObjectThemeColor',
        )
    ),
    COMMETHOD(
        [dispid(105), 'propget'],
        HRESULT,
        'Brightness',
        (['out', 'retval'], POINTER(c_float), 'Brightness')
    ),
    COMMETHOD(
        [dispid(105), 'propput'],
        HRESULT,
        'Brightness',
        (['in'], c_float, 'Brightness')
    ),
]

################################################################
# code template for ColorFormat implementation
# class ColorFormat_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return plCreator
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return RGB
#     def _set(self, RGB):
#         '-no docstring-'
#     RGB = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Type(self):
#         '-no docstring-'
#         #return Type
#
#     def _get(self):
#         '-no docstring-'
#         #return SchemeColor
#     def _set(self, SchemeColor):
#         '-no docstring-'
#     SchemeColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pValue
#     def _set(self, pValue):
#         '-no docstring-'
#     TintAndShade = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ObjectThemeColor
#     def _set(self, ObjectThemeColor):
#         '-no docstring-'
#     ObjectThemeColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Brightness
#     def _set(self, Brightness):
#         '-no docstring-'
#     Brightness = property(_get, _set, doc = _set.__doc__)
#


class ChartArea(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A58-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def Select(self) -> hints.Incomplete: ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Border(self) -> 'ChartBorder': ...
        Border = hints.normal_property(_get_Border)
        def Clear(self) -> hints.Incomplete: ...
        def ClearContents(self) -> hints.Incomplete: ...
        def Copy(self) -> hints.Incomplete: ...
        def _get_Font(self) -> 'ChartFont': ...
        Font = hints.normal_property(_get_Font)
        def _get_Shadow(self) -> hints.Incomplete: ...
        def _set_Shadow(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Shadow = hints.normal_property(_get_Shadow, _set_Shadow)
        def ClearFormats(self) -> hints.Incomplete: ...
        def _get_Height(self) -> hints.Incomplete: ...
        def _set_Height(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Height = hints.normal_property(_get_Height, _set_Height)
        def _get_Interior(self) -> 'Interior': ...
        Interior = hints.normal_property(_get_Interior)
        def _get_Fill(self) -> 'ChartFillFormat': ...
        Fill = hints.normal_property(_get_Fill)
        def _get_Left(self) -> hints.Incomplete: ...
        def _set_Left(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Left = hints.normal_property(_get_Left, _set_Left)
        def _get_Top(self) -> hints.Incomplete: ...
        def _set_Top(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Top = hints.normal_property(_get_Top, _set_Top)
        def _get_Width(self) -> hints.Incomplete: ...
        def _set_Width(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Width = hints.normal_property(_get_Width, _set_Width)
        def _get_AutoScaleFont(self) -> hints.Incomplete: ...
        def _set_AutoScaleFont(self, pvar: hints.Incomplete) -> hints.Hresult: ...
        AutoScaleFont = hints.normal_property(_get_AutoScaleFont, _set_AutoScaleFont)
        def _get_Format(self) -> 'ChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)


ChartArea._methods_ = [
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(235)],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppparent')
    ),
    COMMETHOD(
        [dispid(128), 'hidden', 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(ChartBorder)), 'ppborder')
    ),
    COMMETHOD(
        [dispid(111)],
        HRESULT,
        'Clear',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(113)],
        HRESULT,
        'ClearContents',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(551)],
        HRESULT,
        'Copy',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(146), 'hidden', 'propget'],
        HRESULT,
        'Font',
        (['out', 'retval'], POINTER(POINTER(ChartFont)), 'ppfont')
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'Shadow',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(103), 'propput'],
        HRESULT,
        'Shadow',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(112)],
        HRESULT,
        'ClearFormats',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(123), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(123), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(129), 'hidden', 'propget'],
        HRESULT,
        'Interior',
        (['out', 'retval'], POINTER(POINTER(Interior)), 'ppinterior')
    ),
    COMMETHOD(
        [dispid(1663), 'hidden', 'propget'],
        HRESULT,
        'Fill',
        (['out', 'retval'], POINTER(POINTER(ChartFillFormat)), 'ppFill')
    ),
    COMMETHOD(
        [dispid(127), 'propget'],
        HRESULT,
        'Left',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(127), 'propput'],
        HRESULT,
        'Left',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(126), 'propget'],
        HRESULT,
        'Top',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(126), 'propput'],
        HRESULT,
        'Top',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(122), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(122), 'propput'],
        HRESULT,
        'Width',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(1525), 'hidden', 'propget'],
        HRESULT,
        'AutoScaleFont',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(1525), 'hidden', 'propput'],
        HRESULT,
        'AutoScaleFont',
        (['in'], VARIANT, 'pvar')
    ),
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(ChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
]

################################################################
# code template for ChartArea implementation
# class ChartArea_Impl(object):
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return RHS
#
#     def Select(self):
#         '-no docstring-'
#         #return pvar
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppparent
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return ppborder
#
#     def Clear(self):
#         '-no docstring-'
#         #return pvar
#
#     def ClearContents(self):
#         '-no docstring-'
#         #return pvar
#
#     def Copy(self):
#         '-no docstring-'
#         #return pvar
#
#     @property
#     def Font(self):
#         '-no docstring-'
#         #return ppfont
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Shadow = property(_get, _set, doc = _set.__doc__)
#
#     def ClearFormats(self):
#         '-no docstring-'
#         #return pvar
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Interior(self):
#         '-no docstring-'
#         #return ppinterior
#
#     @property
#     def Fill(self):
#         '-no docstring-'
#         #return ppFill
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Left = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Top = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Width = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pvar
#     def _set(self, pvar):
#         '-no docstring-'
#     AutoScaleFont = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#

TextFrame._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'plCreator')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'MarginBottom',
        (['out', 'retval'], POINTER(c_float), 'MarginBottom')
    ),
    COMMETHOD(
        [dispid(100), 'propput'],
        HRESULT,
        'MarginBottom',
        (['in'], c_float, 'MarginBottom')
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'MarginLeft',
        (['out', 'retval'], POINTER(c_float), 'MarginLeft')
    ),
    COMMETHOD(
        [dispid(101), 'propput'],
        HRESULT,
        'MarginLeft',
        (['in'], c_float, 'MarginLeft')
    ),
    COMMETHOD(
        [dispid(102), 'propget'],
        HRESULT,
        'MarginRight',
        (['out', 'retval'], POINTER(c_float), 'MarginRight')
    ),
    COMMETHOD(
        [dispid(102), 'propput'],
        HRESULT,
        'MarginRight',
        (['in'], c_float, 'MarginRight')
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'MarginTop',
        (['out', 'retval'], POINTER(c_float), 'MarginTop')
    ),
    COMMETHOD(
        [dispid(103), 'propput'],
        HRESULT,
        'MarginTop',
        (['in'], c_float, 'MarginTop')
    ),
    COMMETHOD(
        [dispid(104), 'propget'],
        HRESULT,
        'Orientation',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTextOrientation),
            'Orientation',
        )
    ),
    COMMETHOD(
        [dispid(104), 'propput'],
        HRESULT,
        'Orientation',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTextOrientation,
            'Orientation',
        )
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'HasText',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'HasText',
        )
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'TextRange',
        (['out', 'retval'], POINTER(POINTER(TextRange)), 'TextRange')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'Ruler',
        (['out', 'retval'], POINTER(POINTER(Ruler)), 'Ruler')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'HorizontalAnchor',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoHorizontalAnchor),
            'HorizontalAnchor',
        )
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'HorizontalAnchor',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoHorizontalAnchor,
            'HorizontalAnchor',
        )
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'VerticalAnchor',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoVerticalAnchor),
            'VerticalAnchor',
        )
    ),
    COMMETHOD(
        [dispid(2007), 'propput'],
        HRESULT,
        'VerticalAnchor',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoVerticalAnchor,
            'VerticalAnchor',
        )
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'AutoSize',
        (['out', 'retval'], POINTER(PpAutoSize), 'AutoSize')
    ),
    COMMETHOD(
        [dispid(2008), 'propput'],
        HRESULT,
        'AutoSize',
        (['in'], PpAutoSize, 'AutoSize')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'WordWrap',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'WordWrap',
        )
    ),
    COMMETHOD(
        [dispid(2009), 'propput'],
        HRESULT,
        'WordWrap',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'WordWrap',
        )
    ),
    COMMETHOD([dispid(2010)], HRESULT, 'DeleteText'),
]

################################################################
# code template for TextFrame implementation
# class TextFrame_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return plCreator
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return MarginBottom
#     def _set(self, MarginBottom):
#         '-no docstring-'
#     MarginBottom = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return MarginLeft
#     def _set(self, MarginLeft):
#         '-no docstring-'
#     MarginLeft = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return MarginRight
#     def _set(self, MarginRight):
#         '-no docstring-'
#     MarginRight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return MarginTop
#     def _set(self, MarginTop):
#         '-no docstring-'
#     MarginTop = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Orientation
#     def _set(self, Orientation):
#         '-no docstring-'
#     Orientation = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def HasText(self):
#         '-no docstring-'
#         #return HasText
#
#     @property
#     def TextRange(self):
#         '-no docstring-'
#         #return TextRange
#
#     @property
#     def Ruler(self):
#         '-no docstring-'
#         #return Ruler
#
#     def _get(self):
#         '-no docstring-'
#         #return HorizontalAnchor
#     def _set(self, HorizontalAnchor):
#         '-no docstring-'
#     HorizontalAnchor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return VerticalAnchor
#     def _set(self, VerticalAnchor):
#         '-no docstring-'
#     VerticalAnchor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return AutoSize
#     def _set(self, AutoSize):
#         '-no docstring-'
#     AutoSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return WordWrap
#     def _set(self, WordWrap):
#         '-no docstring-'
#     WordWrap = property(_get, _set, doc = _set.__doc__)
#
#     def DeleteText(self):
#         '-no docstring-'
#         #return 
#

ThreeDFormat._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'plCreator')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'IncrementRotationX',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'IncrementRotationY',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD([dispid(12)], HRESULT, 'ResetRotation'),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'SetThreeDFormat',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPresetThreeDFormat,
            'PresetThreeDFormat',
        )
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'SetExtrusionDirection',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPresetExtrusionDirection,
            'PresetExtrusionDirection',
        )
    ),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'Depth',
        (['out', 'retval'], POINTER(c_float), 'Depth')
    ),
    COMMETHOD(
        [dispid(100), 'propput'],
        HRESULT,
        'Depth',
        (['in'], c_float, 'Depth')
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'ExtrusionColor',
        (['out', 'retval'], POINTER(POINTER(ColorFormat)), 'ExtrusionColor')
    ),
    COMMETHOD(
        [dispid(102), 'propget'],
        HRESULT,
        'ExtrusionColorType',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoExtrusionColorType),
            'ExtrusionColorType',
        )
    ),
    COMMETHOD(
        [dispid(102), 'propput'],
        HRESULT,
        'ExtrusionColorType',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoExtrusionColorType,
            'ExtrusionColorType',
        )
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'Perspective',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Perspective',
        )
    ),
    COMMETHOD(
        [dispid(103), 'propput'],
        HRESULT,
        'Perspective',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Perspective',
        )
    ),
    COMMETHOD(
        [dispid(104), 'propget'],
        HRESULT,
        'PresetExtrusionDirection',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPresetExtrusionDirection),
            'PresetExtrusionDirection',
        )
    ),
    COMMETHOD(
        [dispid(105), 'propget'],
        HRESULT,
        'PresetLightingDirection',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPresetLightingDirection),
            'PresetLightingDirection',
        )
    ),
    COMMETHOD(
        [dispid(105), 'propput'],
        HRESULT,
        'PresetLightingDirection',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPresetLightingDirection,
            'PresetLightingDirection',
        )
    ),
    COMMETHOD(
        [dispid(106), 'propget'],
        HRESULT,
        'PresetLightingSoftness',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPresetLightingSoftness),
            'PresetLightingSoftness',
        )
    ),
    COMMETHOD(
        [dispid(106), 'propput'],
        HRESULT,
        'PresetLightingSoftness',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPresetLightingSoftness,
            'PresetLightingSoftness',
        )
    ),
    COMMETHOD(
        [dispid(107), 'propget'],
        HRESULT,
        'PresetMaterial',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPresetMaterial),
            'PresetMaterial',
        )
    ),
    COMMETHOD(
        [dispid(107), 'propput'],
        HRESULT,
        'PresetMaterial',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPresetMaterial,
            'PresetMaterial',
        )
    ),
    COMMETHOD(
        [dispid(108), 'propget'],
        HRESULT,
        'PresetThreeDFormat',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPresetThreeDFormat),
            'PresetThreeDFormat',
        )
    ),
    COMMETHOD(
        [dispid(109), 'propget'],
        HRESULT,
        'RotationX',
        (['out', 'retval'], POINTER(c_float), 'RotationX')
    ),
    COMMETHOD(
        [dispid(109), 'propput'],
        HRESULT,
        'RotationX',
        (['in'], c_float, 'RotationX')
    ),
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'RotationY',
        (['out', 'retval'], POINTER(c_float), 'RotationY')
    ),
    COMMETHOD(
        [dispid(110), 'propput'],
        HRESULT,
        'RotationY',
        (['in'], c_float, 'RotationY')
    ),
    COMMETHOD(
        [dispid(111), 'propget'],
        HRESULT,
        'Visible',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Visible',
        )
    ),
    COMMETHOD(
        [dispid(111), 'propput'],
        HRESULT,
        'Visible',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Visible',
        )
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'SetPresetCamera',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPresetCamera,
            'PresetCamera',
        )
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'IncrementRotationZ',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'IncrementRotationHorizontal',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'IncrementRotationVertical',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(112), 'propget'],
        HRESULT,
        'PresetLighting',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoLightRigType),
            'PresetLightRigType',
        )
    ),
    COMMETHOD(
        [dispid(112), 'propput'],
        HRESULT,
        'PresetLighting',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoLightRigType,
            'PresetLightRigType',
        )
    ),
    COMMETHOD(
        [dispid(113), 'propget'],
        HRESULT,
        'Z',
        (['out', 'retval'], POINTER(c_float), 'Z')
    ),
    COMMETHOD(
        [dispid(113), 'propput'],
        HRESULT,
        'Z',
        (['in'], c_float, 'Z')
    ),
    COMMETHOD(
        [dispid(114), 'propget'],
        HRESULT,
        'BevelTopType',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoBevelType),
            'BevelTopType',
        )
    ),
    COMMETHOD(
        [dispid(114), 'propput'],
        HRESULT,
        'BevelTopType',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoBevelType,
            'BevelTopType',
        )
    ),
    COMMETHOD(
        [dispid(115), 'propget'],
        HRESULT,
        'BevelTopInset',
        (['out', 'retval'], POINTER(c_float), 'BevelTopInset')
    ),
    COMMETHOD(
        [dispid(115), 'propput'],
        HRESULT,
        'BevelTopInset',
        (['in'], c_float, 'BevelTopInset')
    ),
    COMMETHOD(
        [dispid(116), 'propget'],
        HRESULT,
        'BevelTopDepth',
        (['out', 'retval'], POINTER(c_float), 'BevelTopDepth')
    ),
    COMMETHOD(
        [dispid(116), 'propput'],
        HRESULT,
        'BevelTopDepth',
        (['in'], c_float, 'BevelTopDepth')
    ),
    COMMETHOD(
        [dispid(117), 'propget'],
        HRESULT,
        'BevelBottomType',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoBevelType),
            'BevelBottomType',
        )
    ),
    COMMETHOD(
        [dispid(117), 'propput'],
        HRESULT,
        'BevelBottomType',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoBevelType,
            'BevelBottomType',
        )
    ),
    COMMETHOD(
        [dispid(118), 'propget'],
        HRESULT,
        'BevelBottomInset',
        (['out', 'retval'], POINTER(c_float), 'BevelBottomInset')
    ),
    COMMETHOD(
        [dispid(118), 'propput'],
        HRESULT,
        'BevelBottomInset',
        (['in'], c_float, 'BevelBottomInset')
    ),
    COMMETHOD(
        [dispid(119), 'propget'],
        HRESULT,
        'BevelBottomDepth',
        (['out', 'retval'], POINTER(c_float), 'BevelBottomDepth')
    ),
    COMMETHOD(
        [dispid(119), 'propput'],
        HRESULT,
        'BevelBottomDepth',
        (['in'], c_float, 'BevelBottomDepth')
    ),
    COMMETHOD(
        [dispid(120), 'propget'],
        HRESULT,
        'PresetCamera',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoPresetCamera),
            'PresetCamera',
        )
    ),
    COMMETHOD(
        [dispid(121), 'propget'],
        HRESULT,
        'RotationZ',
        (['out', 'retval'], POINTER(c_float), 'RotationZ')
    ),
    COMMETHOD(
        [dispid(121), 'propput'],
        HRESULT,
        'RotationZ',
        (['in'], c_float, 'RotationZ')
    ),
    COMMETHOD(
        [dispid(122), 'propget'],
        HRESULT,
        'ContourWidth',
        (['out', 'retval'], POINTER(c_float), 'Width')
    ),
    COMMETHOD(
        [dispid(122), 'propput'],
        HRESULT,
        'ContourWidth',
        (['in'], c_float, 'Width')
    ),
    COMMETHOD(
        [dispid(123), 'propget'],
        HRESULT,
        'ContourColor',
        (['out', 'retval'], POINTER(POINTER(ColorFormat)), 'ContourColor')
    ),
    COMMETHOD(
        [dispid(124), 'propget'],
        HRESULT,
        'FieldOfView',
        (['out', 'retval'], POINTER(c_float), 'FOV')
    ),
    COMMETHOD(
        [dispid(124), 'propput'],
        HRESULT,
        'FieldOfView',
        (['in'], c_float, 'FOV')
    ),
    COMMETHOD(
        [dispid(125), 'propget'],
        HRESULT,
        'ProjectText',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'ProjectText',
        )
    ),
    COMMETHOD(
        [dispid(125), 'propput'],
        HRESULT,
        'ProjectText',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'ProjectText',
        )
    ),
    COMMETHOD(
        [dispid(126), 'propget'],
        HRESULT,
        'LightAngle',
        (['out', 'retval'], POINTER(c_float), 'LightAngle')
    ),
    COMMETHOD(
        [dispid(126), 'propput'],
        HRESULT,
        'LightAngle',
        (['in'], c_float, 'LightAngle')
    ),
]

################################################################
# code template for ThreeDFormat implementation
# class ThreeDFormat_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return plCreator
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def IncrementRotationX(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def IncrementRotationY(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def ResetRotation(self):
#         '-no docstring-'
#         #return 
#
#     def SetThreeDFormat(self, PresetThreeDFormat):
#         '-no docstring-'
#         #return 
#
#     def SetExtrusionDirection(self, PresetExtrusionDirection):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return Depth
#     def _set(self, Depth):
#         '-no docstring-'
#     Depth = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def ExtrusionColor(self):
#         '-no docstring-'
#         #return ExtrusionColor
#
#     def _get(self):
#         '-no docstring-'
#         #return ExtrusionColorType
#     def _set(self, ExtrusionColorType):
#         '-no docstring-'
#     ExtrusionColorType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Perspective
#     def _set(self, Perspective):
#         '-no docstring-'
#     Perspective = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def PresetExtrusionDirection(self):
#         '-no docstring-'
#         #return PresetExtrusionDirection
#
#     def _get(self):
#         '-no docstring-'
#         #return PresetLightingDirection
#     def _set(self, PresetLightingDirection):
#         '-no docstring-'
#     PresetLightingDirection = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return PresetLightingSoftness
#     def _set(self, PresetLightingSoftness):
#         '-no docstring-'
#     PresetLightingSoftness = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return PresetMaterial
#     def _set(self, PresetMaterial):
#         '-no docstring-'
#     PresetMaterial = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def PresetThreeDFormat(self):
#         '-no docstring-'
#         #return PresetThreeDFormat
#
#     def _get(self):
#         '-no docstring-'
#         #return RotationX
#     def _set(self, RotationX):
#         '-no docstring-'
#     RotationX = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RotationY
#     def _set(self, RotationY):
#         '-no docstring-'
#     RotationY = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Visible
#     def _set(self, Visible):
#         '-no docstring-'
#     Visible = property(_get, _set, doc = _set.__doc__)
#
#     def SetPresetCamera(self, PresetCamera):
#         '-no docstring-'
#         #return 
#
#     def IncrementRotationZ(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def IncrementRotationHorizontal(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def IncrementRotationVertical(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return PresetLightRigType
#     def _set(self, PresetLightRigType):
#         '-no docstring-'
#     PresetLighting = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Z
#     def _set(self, Z):
#         '-no docstring-'
#     Z = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return BevelTopType
#     def _set(self, BevelTopType):
#         '-no docstring-'
#     BevelTopType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return BevelTopInset
#     def _set(self, BevelTopInset):
#         '-no docstring-'
#     BevelTopInset = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return BevelTopDepth
#     def _set(self, BevelTopDepth):
#         '-no docstring-'
#     BevelTopDepth = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return BevelBottomType
#     def _set(self, BevelBottomType):
#         '-no docstring-'
#     BevelBottomType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return BevelBottomInset
#     def _set(self, BevelBottomInset):
#         '-no docstring-'
#     BevelBottomInset = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return BevelBottomDepth
#     def _set(self, BevelBottomDepth):
#         '-no docstring-'
#     BevelBottomDepth = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def PresetCamera(self):
#         '-no docstring-'
#         #return PresetCamera
#
#     def _get(self):
#         '-no docstring-'
#         #return RotationZ
#     def _set(self, RotationZ):
#         '-no docstring-'
#     RotationZ = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Width
#     def _set(self, Width):
#         '-no docstring-'
#     ContourWidth = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def ContourColor(self):
#         '-no docstring-'
#         #return ContourColor
#
#     def _get(self):
#         '-no docstring-'
#         #return FOV
#     def _set(self, FOV):
#         '-no docstring-'
#     FieldOfView = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ProjectText
#     def _set(self, ProjectText):
#         '-no docstring-'
#     ProjectText = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return LightAngle
#     def _set(self, LightAngle):
#         '-no docstring-'
#     LightAngle = property(_get, _set, doc = _set.__doc__)
#


class TextStyleLevel(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{9149349B-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_ParagraphFormat(self) -> 'ParagraphFormat': ...
        ParagraphFormat = hints.normal_property(_get_ParagraphFormat)
        def _get_Font(self) -> 'Font': ...
        Font = hints.normal_property(_get_Font)


TextStyleLevels._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], c_int, 'Level'),
        (['out', 'retval'], POINTER(POINTER(TextStyleLevel)), 'Item')
    ),
]

################################################################
# code template for TextStyleLevels implementation
# class TextStyleLevels_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Item(self, Level):
#         '-no docstring-'
#         #return Item
#

DiagramNodeChildren._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'plCreator')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppunkEnum')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(DiagramNode)), 'Node')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'AddNode',
        (['in', 'optional'], VARIANT, 'Index', -1),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoDiagramNodeType,
            'NodeType',
            1
        ),
        (['out', 'retval'], POINTER(POINTER(DiagramNode)), 'NewNode')
    ),
    COMMETHOD([dispid(11)], HRESULT, 'SelectAll'),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'iDiagramNodes')
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'FirstChild',
        (['out', 'retval'], POINTER(POINTER(DiagramNode)), 'First')
    ),
    COMMETHOD(
        [dispid(104), 'propget'],
        HRESULT,
        'LastChild',
        (['out', 'retval'], POINTER(POINTER(DiagramNode)), 'Last')
    ),
]

################################################################
# code template for DiagramNodeChildren implementation
# class DiagramNodeChildren_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return plCreator
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppunkEnum
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Node
#
#     def AddNode(self, Index, NodeType):
#         '-no docstring-'
#         #return NewNode
#
#     def SelectAll(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return iDiagramNodes
#
#     @property
#     def FirstChild(self):
#         '-no docstring-'
#         #return First
#
#     @property
#     def LastChild(self):
#         '-no docstring-'
#         #return Last
#

ShapeNode._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'plCreator')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'EditingType',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoEditingType),
            'EditingType',
        )
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'Points',
        (['out', 'retval'], POINTER(VARIANT), 'Points')
    ),
    COMMETHOD(
        [dispid(102), 'propget'],
        HRESULT,
        'SegmentType',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoSegmentType),
            'SegmentType',
        )
    ),
]

################################################################
# code template for ShapeNode implementation
# class ShapeNode_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return plCreator
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def EditingType(self):
#         '-no docstring-'
#         #return EditingType
#
#     @property
#     def Points(self):
#         '-no docstring-'
#         #return Points
#
#     @property
#     def SegmentType(self):
#         '-no docstring-'
#         #return SegmentType
#

Borders._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], PpBorderType, 'BorderType'),
        (['out', 'retval'], POINTER(POINTER(LineFormat)), 'Item')
    ),
]

################################################################
# code template for Borders implementation
# class Borders_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Item(self, BorderType):
#         '-no docstring-'
#         #return Item
#

ShapeRange._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'plCreator')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD([dispid(10)], HRESULT, 'Apply'),
    COMMETHOD([dispid(11)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'Flip',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoFlipCmd,
            'FlipCmd',
        )
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'IncrementLeft',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'IncrementRotation',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'IncrementTop',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD([dispid(17)], HRESULT, 'PickUp'),
    COMMETHOD([dispid(18)], HRESULT, 'RerouteConnections'),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'ScaleHeight',
        (['in'], c_float, 'Factor'),
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'RelativeToOriginalSize',
        ),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoScaleFrom,
            'fScale',
            0
        )
    ),
    COMMETHOD(
        [dispid(20)],
        HRESULT,
        'ScaleWidth',
        (['in'], c_float, 'Factor'),
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'RelativeToOriginalSize',
        ),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoScaleFrom,
            'fScale',
            0
        )
    ),
    COMMETHOD([dispid(22)], HRESULT, 'SetShapesDefaultProperties'),
    COMMETHOD(
        [dispid(23)],
        HRESULT,
        'Ungroup',
        (['out', 'retval'], POINTER(POINTER(ShapeRange)), 'Ungroup')
    ),
    COMMETHOD(
        [dispid(24)],
        HRESULT,
        'ZOrder',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoZOrderCmd,
            'ZOrderCmd',
        )
    ),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'Adjustments',
        (['out', 'retval'], POINTER(POINTER(Adjustments)), 'Adjustments')
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'AutoShapeType',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoAutoShapeType),
            'AutoShapeType',
        )
    ),
    COMMETHOD(
        [dispid(101), 'propput'],
        HRESULT,
        'AutoShapeType',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoAutoShapeType,
            'AutoShapeType',
        )
    ),
    COMMETHOD(
        [dispid(102), 'propget'],
        HRESULT,
        'BlackWhiteMode',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoBlackWhiteMode),
            'BlackWhiteMode',
        )
    ),
    COMMETHOD(
        [dispid(102), 'propput'],
        HRESULT,
        'BlackWhiteMode',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoBlackWhiteMode,
            'BlackWhiteMode',
        )
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'Callout',
        (['out', 'retval'], POINTER(POINTER(CalloutFormat)), 'Callout')
    ),
    COMMETHOD(
        [dispid(104), 'propget'],
        HRESULT,
        'ConnectionSiteCount',
        (['out', 'retval'], POINTER(c_int), 'ConnectionSiteCount')
    ),
    COMMETHOD(
        [dispid(105), 'propget'],
        HRESULT,
        'Connector',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Connector',
        )
    ),
    COMMETHOD(
        [dispid(106), 'propget'],
        HRESULT,
        'ConnectorFormat',
        (
            ['out', 'retval'],
            POINTER(POINTER(ConnectorFormat)),
            'ConnectorFormat',
        )
    ),
    COMMETHOD(
        [dispid(107), 'propget'],
        HRESULT,
        'Fill',
        (['out', 'retval'], POINTER(POINTER(FillFormat)), 'Fill')
    ),
    COMMETHOD(
        [dispid(108), 'propget'],
        HRESULT,
        'GroupItems',
        (['out', 'retval'], POINTER(POINTER(GroupShapes)), 'GroupItems')
    ),
    COMMETHOD(
        [dispid(109), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_float), 'Height')
    ),
    COMMETHOD(
        [dispid(109), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_float, 'Height')
    ),
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'HorizontalFlip',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'HorizontalFlip',
        )
    ),
    COMMETHOD(
        [dispid(111), 'propget'],
        HRESULT,
        'Left',
        (['out', 'retval'], POINTER(c_float), 'Left')
    ),
    COMMETHOD(
        [dispid(111), 'propput'],
        HRESULT,
        'Left',
        (['in'], c_float, 'Left')
    ),
    COMMETHOD(
        [dispid(112), 'propget'],
        HRESULT,
        'Line',
        (['out', 'retval'], POINTER(POINTER(LineFormat)), 'Line')
    ),
    COMMETHOD(
        [dispid(113), 'propget'],
        HRESULT,
        'LockAspectRatio',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'LockAspectRatio',
        )
    ),
    COMMETHOD(
        [dispid(113), 'propput'],
        HRESULT,
        'LockAspectRatio',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'LockAspectRatio',
        )
    ),
    COMMETHOD(
        [dispid(115), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(115), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'Name')
    ),
    COMMETHOD(
        [dispid(116), 'propget'],
        HRESULT,
        'Nodes',
        (['out', 'retval'], POINTER(POINTER(ShapeNodes)), 'Nodes')
    ),
    COMMETHOD(
        [dispid(117), 'propget'],
        HRESULT,
        'Rotation',
        (['out', 'retval'], POINTER(c_float), 'Rotation')
    ),
    COMMETHOD(
        [dispid(117), 'propput'],
        HRESULT,
        'Rotation',
        (['in'], c_float, 'Rotation')
    ),
    COMMETHOD(
        [dispid(118), 'propget'],
        HRESULT,
        'PictureFormat',
        (['out', 'retval'], POINTER(POINTER(PictureFormat)), 'Picture')
    ),
    COMMETHOD(
        [dispid(119), 'propget'],
        HRESULT,
        'Shadow',
        (['out', 'retval'], POINTER(POINTER(ShadowFormat)), 'Shadow')
    ),
    COMMETHOD(
        [dispid(120), 'propget'],
        HRESULT,
        'TextEffect',
        (['out', 'retval'], POINTER(POINTER(TextEffectFormat)), 'TextEffect')
    ),
    COMMETHOD(
        [dispid(121), 'propget'],
        HRESULT,
        'TextFrame',
        (['out', 'retval'], POINTER(POINTER(TextFrame)), 'TextFrame')
    ),
    COMMETHOD(
        [dispid(122), 'propget'],
        HRESULT,
        'ThreeD',
        (['out', 'retval'], POINTER(POINTER(ThreeDFormat)), 'ThreeD')
    ),
    COMMETHOD(
        [dispid(123), 'propget'],
        HRESULT,
        'Top',
        (['out', 'retval'], POINTER(c_float), 'Top')
    ),
    COMMETHOD(
        [dispid(123), 'propput'],
        HRESULT,
        'Top',
        (['in'], c_float, 'Top')
    ),
    COMMETHOD(
        [dispid(124), 'propget'],
        HRESULT,
        'Type',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoShapeType),
            'Type',
        )
    ),
    COMMETHOD(
        [dispid(125), 'propget'],
        HRESULT,
        'VerticalFlip',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'VerticalFlip',
        )
    ),
    COMMETHOD(
        [dispid(126), 'propget'],
        HRESULT,
        'Vertices',
        (['out', 'retval'], POINTER(VARIANT), 'Vertices')
    ),
    COMMETHOD(
        [dispid(127), 'propget'],
        HRESULT,
        'Visible',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Visible',
        )
    ),
    COMMETHOD(
        [dispid(127), 'propput'],
        HRESULT,
        'Visible',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Visible',
        )
    ),
    COMMETHOD(
        [dispid(128), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_float), 'Width')
    ),
    COMMETHOD(
        [dispid(128), 'propput'],
        HRESULT,
        'Width',
        (['in'], c_float, 'Width')
    ),
    COMMETHOD(
        [dispid(129), 'propget'],
        HRESULT,
        'ZOrderPosition',
        (['out', 'retval'], POINTER(c_int), 'ZOrderPosition')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'OLEFormat',
        (['out', 'retval'], POINTER(POINTER(OLEFormat)), 'OLEFormat')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'LinkFormat',
        (['out', 'retval'], POINTER(POINTER(LinkFormat)), 'LinkFormat')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'PlaceholderFormat',
        (
            ['out', 'retval'],
            POINTER(POINTER(PlaceholderFormat)),
            'PlaceholderFormat',
        )
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'AnimationSettings',
        (
            ['out', 'retval'],
            POINTER(POINTER(AnimationSettings)),
            'AnimationSettings',
        )
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'ActionSettings',
        (['out', 'retval'], POINTER(POINTER(ActionSettings)), 'ActionSettings')
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'Tags',
        (['out', 'retval'], POINTER(POINTER(Tags)), 'Tags')
    ),
    COMMETHOD([dispid(2009)], HRESULT, 'Cut'),
    COMMETHOD([dispid(2010)], HRESULT, 'Copy'),
    COMMETHOD(
        [dispid(2011)],
        HRESULT,
        'Select',
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Replace',
            -1
        )
    ),
    COMMETHOD(
        [dispid(2012)],
        HRESULT,
        'Duplicate',
        (['out', 'retval'], POINTER(POINTER(ShapeRange)), 'Duplicate')
    ),
    COMMETHOD(
        [dispid(2013), 'propget'],
        HRESULT,
        'MediaType',
        (['out', 'retval'], POINTER(PpMediaType), 'MediaType')
    ),
    COMMETHOD(
        [dispid(2014), 'propget'],
        HRESULT,
        'HasTextFrame',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'HasTextFrame',
        )
    ),
    COMMETHOD(
        [dispid(2015), 'hidden', 'propget'],
        HRESULT,
        'SoundFormat',
        (['out', 'retval'], POINTER(POINTER(SoundFormat)), 'SoundFormat')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Item')
    ),
    COMMETHOD(
        [dispid(-4), 'restricted', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), '_NewEnum')
    ),
    COMMETHOD(
        [dispid(8), 'restricted'],
        HRESULT,
        '_Index',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(VARIANT), '_Index')
    ),
    COMMETHOD(
        [dispid(9), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
    COMMETHOD(
        [dispid(2016)],
        HRESULT,
        'Group',
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Group')
    ),
    COMMETHOD(
        [dispid(2017)],
        HRESULT,
        'Regroup',
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Regroup')
    ),
    COMMETHOD(
        [dispid(2018)],
        HRESULT,
        'Align',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoAlignCmd,
            'AlignCmd',
        ),
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'RelativeTo',
        )
    ),
    COMMETHOD(
        [dispid(2019)],
        HRESULT,
        'Distribute',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoDistributeCmd,
            'DistributeCmd',
        ),
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'RelativeTo',
        )
    ),
    COMMETHOD(
        [dispid(2020), 'restricted'],
        HRESULT,
        'GetPolygonalRepresentation',
        (['in'], c_ulong, 'maxPointsInBuffer'),
        (['in'], POINTER(c_float), 'pPoints'),
        (['out'], POINTER(c_ulong), 'numPointsInPolygon'),
        (
            ['out'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'IsOpen',
        )
    ),
    COMMETHOD(
        [dispid(130), 'hidden', 'propget'],
        HRESULT,
        'Script',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.Script)),
            'Script',
        )
    ),
    COMMETHOD(
        [dispid(131), 'propget'],
        HRESULT,
        'AlternativeText',
        (['out', 'retval'], POINTER(BSTR), 'AlternativeText')
    ),
    COMMETHOD(
        [dispid(131), 'propput'],
        HRESULT,
        'AlternativeText',
        (['in'], BSTR, 'AlternativeText')
    ),
    COMMETHOD(
        [dispid(2021), 'propget'],
        HRESULT,
        'HasTable',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'HasTable',
        )
    ),
    COMMETHOD(
        [dispid(2022), 'propget'],
        HRESULT,
        'Table',
        (['out', 'retval'], POINTER(POINTER(Table)), 'Table')
    ),
    COMMETHOD(
        [dispid(2023), 'hidden'],
        HRESULT,
        'Export',
        (['in'], BSTR, 'PathName'),
        (['in'], PpShapeFormat, 'Filter'),
        (['in', 'optional'], c_int, 'ScaleWidth', 0),
        (['in', 'optional'], c_int, 'ScaleHeight', 0),
        (['in', 'optional'], PpExportMode, 'ExportMode', 1)
    ),
    COMMETHOD(
        [dispid(132), 'hidden', 'propget'],
        HRESULT,
        'HasDiagram',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'pHasDiagram',
        )
    ),
    COMMETHOD(
        [dispid(133), 'hidden', 'propget'],
        HRESULT,
        'Diagram',
        (['out', 'retval'], POINTER(POINTER(Diagram)), 'Diagram')
    ),
    COMMETHOD(
        [dispid(134), 'hidden', 'propget'],
        HRESULT,
        'HasDiagramNode',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'pHasDiagram',
        )
    ),
    COMMETHOD(
        [dispid(135), 'hidden', 'propget'],
        HRESULT,
        'DiagramNode',
        (['out', 'retval'], POINTER(POINTER(DiagramNode)), 'DiagramNode')
    ),
    COMMETHOD(
        [dispid(136), 'propget'],
        HRESULT,
        'Child',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Child',
        )
    ),
    COMMETHOD(
        [dispid(137), 'propget'],
        HRESULT,
        'ParentGroup',
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Parent')
    ),
    COMMETHOD(
        [dispid(138), 'hidden', 'propget'],
        HRESULT,
        'CanvasItems',
        (['out', 'retval'], POINTER(POINTER(CanvasShapes)), 'CanvasShapes')
    ),
    COMMETHOD(
        [dispid(139), 'propget'],
        HRESULT,
        'Id',
        (['out', 'retval'], POINTER(c_int), 'pid')
    ),
    COMMETHOD(
        [dispid(140), 'hidden'],
        HRESULT,
        'CanvasCropLeft',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(141), 'hidden'],
        HRESULT,
        'CanvasCropTop',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(142), 'hidden'],
        HRESULT,
        'CanvasCropRight',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(143), 'hidden'],
        HRESULT,
        'CanvasCropBottom',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(144), 'hidden', 'propput'],
        HRESULT,
        'RTF',
        (['in'], BSTR, 'rhs')
    ),
    COMMETHOD(
        [dispid(2025), 'propget'],
        HRESULT,
        'CustomerData',
        (['out', 'retval'], POINTER(POINTER(CustomerData)), 'CustomerData')
    ),
    COMMETHOD(
        [dispid(145), 'propget'],
        HRESULT,
        'TextFrame2',
        (['out', 'retval'], POINTER(POINTER(TextFrame2)), 'Frame')
    ),
    COMMETHOD(
        [dispid(148), 'propget'],
        HRESULT,
        'HasChart',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'pHasChart',
        )
    ),
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'ShapeStyle',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoShapeStyleIndex),
            'ShapeStyle',
        )
    ),
    COMMETHOD(
        [dispid(150), 'propput'],
        HRESULT,
        'ShapeStyle',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoShapeStyleIndex,
            'ShapeStyle',
        )
    ),
    COMMETHOD(
        [dispid(151), 'propget'],
        HRESULT,
        'BackgroundStyle',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoBackgroundStyleIndex),
            'BackgroundStyle',
        )
    ),
    COMMETHOD(
        [dispid(151), 'propput'],
        HRESULT,
        'BackgroundStyle',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoBackgroundStyleIndex,
            'BackgroundStyle',
        )
    ),
    COMMETHOD(
        [dispid(152), 'propget'],
        HRESULT,
        'SoftEdge',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.SoftEdgeFormat)),
            'SoftEdge',
        )
    ),
    COMMETHOD(
        [dispid(153), 'propget'],
        HRESULT,
        'Glow',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.GlowFormat)),
            'Glow',
        )
    ),
    COMMETHOD(
        [dispid(154), 'propget'],
        HRESULT,
        'Reflection',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.ReflectionFormat)),
            'Reflection',
        )
    ),
    COMMETHOD(
        [dispid(2026), 'propget'],
        HRESULT,
        'Chart',
        (['out', 'retval'], POINTER(POINTER(Chart)), 'Chart')
    ),
    COMMETHOD(
        [dispid(155), 'propget'],
        HRESULT,
        'HasSmartArt',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'HasSmartArt',
        )
    ),
    COMMETHOD(
        [dispid(156), 'propget'],
        HRESULT,
        'SmartArt',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.SmartArt)),
            'SmartArt',
        )
    ),
    COMMETHOD(
        [dispid(157)],
        HRESULT,
        'ConvertTextToSmartArt',
        (
            ['in'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.SmartArtLayout),
            'Layout',
        )
    ),
    COMMETHOD(
        [dispid(158), 'propget'],
        HRESULT,
        'Title',
        (['out', 'retval'], POINTER(BSTR), 'Title')
    ),
    COMMETHOD(
        [dispid(158), 'propput'],
        HRESULT,
        'Title',
        (['in'], BSTR, 'Title')
    ),
    COMMETHOD(
        [dispid(2027), 'propget'],
        HRESULT,
        'MediaFormat',
        (['out', 'retval'], POINTER(POINTER(MediaFormat)), 'MediaFormat')
    ),
    COMMETHOD([dispid(2028)], HRESULT, 'PickupAnimation'),
    COMMETHOD([dispid(2029)], HRESULT, 'ApplyAnimation'),
    COMMETHOD([dispid(2030)], HRESULT, 'UpgradeMedia'),
    COMMETHOD(
        [dispid(159)],
        HRESULT,
        'MergeShapes',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoMergeCmd,
            'MergeCmd',
        ),
        (['in', 'optional'], POINTER(Shape), 'PrimaryShape', 0)
    ),
    COMMETHOD(
        [dispid(2031), 'propget'],
        HRESULT,
        'IsNarration',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'IsNarration',
        )
    ),
    COMMETHOD(
        [dispid(2031), 'propput'],
        HRESULT,
        'IsNarration',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'IsNarration',
        )
    ),
    COMMETHOD(
        [dispid(160), 'propget'],
        HRESULT,
        'InkXML',
        (['out', 'retval'], POINTER(BSTR), 'InkXML')
    ),
    COMMETHOD(
        [dispid(161), 'propget'],
        HRESULT,
        'HasInkXML',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'HasInkXML',
        )
    ),
    COMMETHOD(
        [dispid(162), 'propget'],
        HRESULT,
        'HasSectionZoom',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'HasSectionZoom',
        )
    ),
    COMMETHOD(
        [dispid(163), 'propget'],
        HRESULT,
        'GraphicStyle',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoGraphicStyleIndex),
            'GraphicStyle',
        )
    ),
    COMMETHOD(
        [dispid(163), 'propput'],
        HRESULT,
        'GraphicStyle',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoGraphicStyleIndex,
            'GraphicStyle',
        )
    ),
    COMMETHOD(
        [dispid(164), 'propget'],
        HRESULT,
        'Model3D',
        (['out', 'retval'], POINTER(POINTER(Model3DFormat)), 'Model3D')
    ),
    COMMETHOD(
        [dispid(165), 'propget'],
        HRESULT,
        'Decorative',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'fDecorative',
        )
    ),
    COMMETHOD(
        [dispid(165), 'propput'],
        HRESULT,
        'Decorative',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'fDecorative',
        )
    ),
    COMMETHOD(
        [dispid(166)],
        HRESULT,
        'ConvertInkToText',
        (['out', 'retval'], POINTER(BSTR), 'ConvertedText')
    ),
    COMMETHOD(
        [dispid(167), 'propget'],
        HRESULT,
        'Locked',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'pLocked',
        )
    ),
    COMMETHOD(
        [dispid(167), 'propput'],
        HRESULT,
        'Locked',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'pLocked',
        )
    ),
]

################################################################
# code template for ShapeRange implementation
# class ShapeRange_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return plCreator
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Apply(self):
#         '-no docstring-'
#         #return 
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     def Flip(self, FlipCmd):
#         '-no docstring-'
#         #return 
#
#     def IncrementLeft(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def IncrementRotation(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def IncrementTop(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def PickUp(self):
#         '-no docstring-'
#         #return 
#
#     def RerouteConnections(self):
#         '-no docstring-'
#         #return 
#
#     def ScaleHeight(self, Factor, RelativeToOriginalSize, fScale):
#         '-no docstring-'
#         #return 
#
#     def ScaleWidth(self, Factor, RelativeToOriginalSize, fScale):
#         '-no docstring-'
#         #return 
#
#     def SetShapesDefaultProperties(self):
#         '-no docstring-'
#         #return 
#
#     def Ungroup(self):
#         '-no docstring-'
#         #return Ungroup
#
#     def ZOrder(self, ZOrderCmd):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Adjustments(self):
#         '-no docstring-'
#         #return Adjustments
#
#     def _get(self):
#         '-no docstring-'
#         #return AutoShapeType
#     def _set(self, AutoShapeType):
#         '-no docstring-'
#     AutoShapeType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return BlackWhiteMode
#     def _set(self, BlackWhiteMode):
#         '-no docstring-'
#     BlackWhiteMode = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Callout(self):
#         '-no docstring-'
#         #return Callout
#
#     @property
#     def ConnectionSiteCount(self):
#         '-no docstring-'
#         #return ConnectionSiteCount
#
#     @property
#     def Connector(self):
#         '-no docstring-'
#         #return Connector
#
#     @property
#     def ConnectorFormat(self):
#         '-no docstring-'
#         #return ConnectorFormat
#
#     @property
#     def Fill(self):
#         '-no docstring-'
#         #return Fill
#
#     @property
#     def GroupItems(self):
#         '-no docstring-'
#         #return GroupItems
#
#     def _get(self):
#         '-no docstring-'
#         #return Height
#     def _set(self, Height):
#         '-no docstring-'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def HorizontalFlip(self):
#         '-no docstring-'
#         #return HorizontalFlip
#
#     def _get(self):
#         '-no docstring-'
#         #return Left
#     def _set(self, Left):
#         '-no docstring-'
#     Left = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Line(self):
#         '-no docstring-'
#         #return Line
#
#     def _get(self):
#         '-no docstring-'
#         #return LockAspectRatio
#     def _set(self, LockAspectRatio):
#         '-no docstring-'
#     LockAspectRatio = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Name
#     def _set(self, Name):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Nodes(self):
#         '-no docstring-'
#         #return Nodes
#
#     def _get(self):
#         '-no docstring-'
#         #return Rotation
#     def _set(self, Rotation):
#         '-no docstring-'
#     Rotation = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def PictureFormat(self):
#         '-no docstring-'
#         #return Picture
#
#     @property
#     def Shadow(self):
#         '-no docstring-'
#         #return Shadow
#
#     @property
#     def TextEffect(self):
#         '-no docstring-'
#         #return TextEffect
#
#     @property
#     def TextFrame(self):
#         '-no docstring-'
#         #return TextFrame
#
#     @property
#     def ThreeD(self):
#         '-no docstring-'
#         #return ThreeD
#
#     def _get(self):
#         '-no docstring-'
#         #return Top
#     def _set(self, Top):
#         '-no docstring-'
#     Top = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Type(self):
#         '-no docstring-'
#         #return Type
#
#     @property
#     def VerticalFlip(self):
#         '-no docstring-'
#         #return VerticalFlip
#
#     @property
#     def Vertices(self):
#         '-no docstring-'
#         #return Vertices
#
#     def _get(self):
#         '-no docstring-'
#         #return Visible
#     def _set(self, Visible):
#         '-no docstring-'
#     Visible = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Width
#     def _set(self, Width):
#         '-no docstring-'
#     Width = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def ZOrderPosition(self):
#         '-no docstring-'
#         #return ZOrderPosition
#
#     @property
#     def OLEFormat(self):
#         '-no docstring-'
#         #return OLEFormat
#
#     @property
#     def LinkFormat(self):
#         '-no docstring-'
#         #return LinkFormat
#
#     @property
#     def PlaceholderFormat(self):
#         '-no docstring-'
#         #return PlaceholderFormat
#
#     @property
#     def AnimationSettings(self):
#         '-no docstring-'
#         #return AnimationSettings
#
#     @property
#     def ActionSettings(self):
#         '-no docstring-'
#         #return ActionSettings
#
#     @property
#     def Tags(self):
#         '-no docstring-'
#         #return Tags
#
#     def Cut(self):
#         '-no docstring-'
#         #return 
#
#     def Copy(self):
#         '-no docstring-'
#         #return 
#
#     def Select(self, Replace):
#         '-no docstring-'
#         #return 
#
#     def Duplicate(self):
#         '-no docstring-'
#         #return Duplicate
#
#     @property
#     def MediaType(self):
#         '-no docstring-'
#         #return MediaType
#
#     @property
#     def HasTextFrame(self):
#         '-no docstring-'
#         #return HasTextFrame
#
#     @property
#     def SoundFormat(self):
#         '-no docstring-'
#         #return SoundFormat
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return _NewEnum
#
#     def _Index(self, Index):
#         '-no docstring-'
#         #return _Index
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return Count
#
#     def Group(self):
#         '-no docstring-'
#         #return Group
#
#     def Regroup(self):
#         '-no docstring-'
#         #return Regroup
#
#     def Align(self, AlignCmd, RelativeTo):
#         '-no docstring-'
#         #return 
#
#     def Distribute(self, DistributeCmd, RelativeTo):
#         '-no docstring-'
#         #return 
#
#     def GetPolygonalRepresentation(self, maxPointsInBuffer, pPoints):
#         '-no docstring-'
#         #return numPointsInPolygon, IsOpen
#
#     @property
#     def Script(self):
#         '-no docstring-'
#         #return Script
#
#     def _get(self):
#         '-no docstring-'
#         #return AlternativeText
#     def _set(self, AlternativeText):
#         '-no docstring-'
#     AlternativeText = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def HasTable(self):
#         '-no docstring-'
#         #return HasTable
#
#     @property
#     def Table(self):
#         '-no docstring-'
#         #return Table
#
#     def Export(self, PathName, Filter, ScaleWidth, ScaleHeight, ExportMode):
#         '-no docstring-'
#         #return 
#
#     @property
#     def HasDiagram(self):
#         '-no docstring-'
#         #return pHasDiagram
#
#     @property
#     def Diagram(self):
#         '-no docstring-'
#         #return Diagram
#
#     @property
#     def HasDiagramNode(self):
#         '-no docstring-'
#         #return pHasDiagram
#
#     @property
#     def DiagramNode(self):
#         '-no docstring-'
#         #return DiagramNode
#
#     @property
#     def Child(self):
#         '-no docstring-'
#         #return Child
#
#     @property
#     def ParentGroup(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def CanvasItems(self):
#         '-no docstring-'
#         #return CanvasShapes
#
#     @property
#     def Id(self):
#         '-no docstring-'
#         #return pid
#
#     def CanvasCropLeft(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def CanvasCropTop(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def CanvasCropRight(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def CanvasCropBottom(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def _set(self, rhs):
#         '-no docstring-'
#     RTF = property(fset = _set, doc = _set.__doc__)
#
#     @property
#     def CustomerData(self):
#         '-no docstring-'
#         #return CustomerData
#
#     @property
#     def TextFrame2(self):
#         '-no docstring-'
#         #return Frame
#
#     @property
#     def HasChart(self):
#         '-no docstring-'
#         #return pHasChart
#
#     def _get(self):
#         '-no docstring-'
#         #return ShapeStyle
#     def _set(self, ShapeStyle):
#         '-no docstring-'
#     ShapeStyle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return BackgroundStyle
#     def _set(self, BackgroundStyle):
#         '-no docstring-'
#     BackgroundStyle = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def SoftEdge(self):
#         '-no docstring-'
#         #return SoftEdge
#
#     @property
#     def Glow(self):
#         '-no docstring-'
#         #return Glow
#
#     @property
#     def Reflection(self):
#         '-no docstring-'
#         #return Reflection
#
#     @property
#     def Chart(self):
#         '-no docstring-'
#         #return Chart
#
#     @property
#     def HasSmartArt(self):
#         '-no docstring-'
#         #return HasSmartArt
#
#     @property
#     def SmartArt(self):
#         '-no docstring-'
#         #return SmartArt
#
#     def ConvertTextToSmartArt(self, Layout):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return Title
#     def _set(self, Title):
#         '-no docstring-'
#     Title = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def MediaFormat(self):
#         '-no docstring-'
#         #return MediaFormat
#
#     def PickupAnimation(self):
#         '-no docstring-'
#         #return 
#
#     def ApplyAnimation(self):
#         '-no docstring-'
#         #return 
#
#     def UpgradeMedia(self):
#         '-no docstring-'
#         #return 
#
#     def MergeShapes(self, MergeCmd, PrimaryShape):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return IsNarration
#     def _set(self, IsNarration):
#         '-no docstring-'
#     IsNarration = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def InkXML(self):
#         '-no docstring-'
#         #return InkXML
#
#     @property
#     def HasInkXML(self):
#         '-no docstring-'
#         #return HasInkXML
#
#     @property
#     def HasSectionZoom(self):
#         '-no docstring-'
#         #return HasSectionZoom
#
#     def _get(self):
#         '-no docstring-'
#         #return GraphicStyle
#     def _set(self, GraphicStyle):
#         '-no docstring-'
#     GraphicStyle = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Model3D(self):
#         '-no docstring-'
#         #return Model3D
#
#     def _get(self):
#         '-no docstring-'
#         #return fDecorative
#     def _set(self, fDecorative):
#         '-no docstring-'
#     Decorative = property(_get, _set, doc = _set.__doc__)
#
#     def ConvertInkToText(self):
#         '-no docstring-'
#         #return ConvertedText
#
#     def _get(self):
#         '-no docstring-'
#         #return pLocked
#     def _set(self, pLocked):
#         '-no docstring-'
#     Locked = property(_get, _set, doc = _set.__doc__)
#


class Comment(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934D5-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Author(self) -> hints.Incomplete: ...
        Author = hints.normal_property(_get_Author)
        def _get_AuthorInitials(self) -> hints.Incomplete: ...
        AuthorInitials = hints.normal_property(_get_AuthorInitials)
        def _get_Text(self) -> hints.Incomplete: ...
        Text = hints.normal_property(_get_Text)
        def _get_DateTime(self) -> hints.Incomplete: ...
        DateTime = hints.normal_property(_get_DateTime)
        def _get_AuthorIndex(self) -> hints.Incomplete: ...
        AuthorIndex = hints.normal_property(_get_AuthorIndex)
        def _get_Left(self) -> hints.Incomplete: ...
        Left = hints.normal_property(_get_Left)
        def _get_Top(self) -> hints.Incomplete: ...
        Top = hints.normal_property(_get_Top)
        def Delete(self) -> hints.Hresult: ...
        def _get_ProviderID(self) -> hints.Incomplete: ...
        ProviderID = hints.normal_property(_get_ProviderID)
        def _get_UserID(self) -> hints.Incomplete: ...
        UserID = hints.normal_property(_get_UserID)
        def _get_TimeZoneBias(self) -> hints.Incomplete: ...
        TimeZoneBias = hints.normal_property(_get_TimeZoneBias)
        def _get_Replies(self) -> 'Comments': ...
        Replies = hints.normal_property(_get_Replies)
        def _get_Collapsed(self) -> hints.Incomplete: ...
        Collapsed = hints.normal_property(_get_Collapsed)


Comments._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(Comment)), 'Item')
    ),
    COMMETHOD(
        [dispid(2003), 'hidden'],
        HRESULT,
        'Add',
        (['in'], c_float, 'Left'),
        (['in'], c_float, 'Top'),
        (['in'], BSTR, 'Author'),
        (['in'], BSTR, 'AuthorInitials'),
        (['in'], BSTR, 'Text'),
        (['out', 'retval'], POINTER(POINTER(Comment)), 'Add')
    ),
    COMMETHOD(
        [dispid(2004)],
        HRESULT,
        'Add2',
        (['in'], c_float, 'Left'),
        (['in'], c_float, 'Top'),
        (['in'], BSTR, 'Author'),
        (['in'], BSTR, 'AuthorInitials'),
        (['in'], BSTR, 'Text'),
        (['in'], BSTR, 'ProviderID'),
        (['in'], BSTR, 'UserID'),
        (['out', 'retval'], POINTER(POINTER(Comment)), 'Add')
    ),
]

################################################################
# code template for Comments implementation
# class Comments_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     def Add(self, Left, Top, Author, AuthorInitials, Text):
#         '-no docstring-'
#         #return Add
#
#     def Add2(self, Left, Top, Author, AuthorInitials, Text, ProviderID, UserID):
#         '-no docstring-'
#         #return Add
#


class ParagraphFormat(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493496-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Alignment(self) -> hints.Incomplete: ...
        def _set_Alignment(self, Alignment: hints.Incomplete) -> hints.Hresult: ...
        Alignment = hints.normal_property(_get_Alignment, _set_Alignment)
        def _get_Bullet(self) -> 'BulletFormat': ...
        Bullet = hints.normal_property(_get_Bullet)
        def _get_LineRuleBefore(self) -> hints.Incomplete: ...
        def _set_LineRuleBefore(self, LineRuleBefore: hints.Incomplete) -> hints.Hresult: ...
        LineRuleBefore = hints.normal_property(_get_LineRuleBefore, _set_LineRuleBefore)
        def _get_LineRuleAfter(self) -> hints.Incomplete: ...
        def _set_LineRuleAfter(self, LineRuleAfter: hints.Incomplete) -> hints.Hresult: ...
        LineRuleAfter = hints.normal_property(_get_LineRuleAfter, _set_LineRuleAfter)
        def _get_LineRuleWithin(self) -> hints.Incomplete: ...
        def _set_LineRuleWithin(self, LineRuleWithin: hints.Incomplete) -> hints.Hresult: ...
        LineRuleWithin = hints.normal_property(_get_LineRuleWithin, _set_LineRuleWithin)
        def _get_SpaceBefore(self) -> hints.Incomplete: ...
        def _set_SpaceBefore(self, SpaceBefore: hints.Incomplete) -> hints.Hresult: ...
        SpaceBefore = hints.normal_property(_get_SpaceBefore, _set_SpaceBefore)
        def _get_SpaceAfter(self) -> hints.Incomplete: ...
        def _set_SpaceAfter(self, SpaceAfter: hints.Incomplete) -> hints.Hresult: ...
        SpaceAfter = hints.normal_property(_get_SpaceAfter, _set_SpaceAfter)
        def _get_SpaceWithin(self) -> hints.Incomplete: ...
        def _set_SpaceWithin(self, SpaceWithin: hints.Incomplete) -> hints.Hresult: ...
        SpaceWithin = hints.normal_property(_get_SpaceWithin, _set_SpaceWithin)
        def _get_BaseLineAlignment(self) -> hints.Incomplete: ...
        def _set_BaseLineAlignment(self, BaseLineAlignment: hints.Incomplete) -> hints.Hresult: ...
        BaseLineAlignment = hints.normal_property(_get_BaseLineAlignment, _set_BaseLineAlignment)
        def _get_FarEastLineBreakControl(self) -> hints.Incomplete: ...
        def _set_FarEastLineBreakControl(self, FarEastLineBreakControl: hints.Incomplete) -> hints.Hresult: ...
        FarEastLineBreakControl = hints.normal_property(_get_FarEastLineBreakControl, _set_FarEastLineBreakControl)
        def _get_WordWrap(self) -> hints.Incomplete: ...
        def _set_WordWrap(self, WordWrap: hints.Incomplete) -> hints.Hresult: ...
        WordWrap = hints.normal_property(_get_WordWrap, _set_WordWrap)
        def _get_HangingPunctuation(self) -> hints.Incomplete: ...
        def _set_HangingPunctuation(self, HangingPunctuation: hints.Incomplete) -> hints.Hresult: ...
        HangingPunctuation = hints.normal_property(_get_HangingPunctuation, _set_HangingPunctuation)
        def _get_TextDirection(self) -> hints.Incomplete: ...
        def _set_TextDirection(self, TextDirection: hints.Incomplete) -> hints.Hresult: ...
        TextDirection = hints.normal_property(_get_TextDirection, _set_TextDirection)


class Font(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493495-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Color(self) -> 'ColorFormat': ...
        Color = hints.normal_property(_get_Color)
        def _get_Bold(self) -> hints.Incomplete: ...
        def _set_Bold(self, Bold: hints.Incomplete) -> hints.Hresult: ...
        Bold = hints.normal_property(_get_Bold, _set_Bold)
        def _get_Italic(self) -> hints.Incomplete: ...
        def _set_Italic(self, Italic: hints.Incomplete) -> hints.Hresult: ...
        Italic = hints.normal_property(_get_Italic, _set_Italic)
        def _get_Shadow(self) -> hints.Incomplete: ...
        def _set_Shadow(self, Shadow: hints.Incomplete) -> hints.Hresult: ...
        Shadow = hints.normal_property(_get_Shadow, _set_Shadow)
        def _get_Emboss(self) -> hints.Incomplete: ...
        def _set_Emboss(self, Emboss: hints.Incomplete) -> hints.Hresult: ...
        Emboss = hints.normal_property(_get_Emboss, _set_Emboss)
        def _get_Underline(self) -> hints.Incomplete: ...
        def _set_Underline(self, Underline: hints.Incomplete) -> hints.Hresult: ...
        Underline = hints.normal_property(_get_Underline, _set_Underline)
        def _get_Subscript(self) -> hints.Incomplete: ...
        def _set_Subscript(self, Subscript: hints.Incomplete) -> hints.Hresult: ...
        Subscript = hints.normal_property(_get_Subscript, _set_Subscript)
        def _get_Superscript(self) -> hints.Incomplete: ...
        def _set_Superscript(self, Superscript: hints.Incomplete) -> hints.Hresult: ...
        Superscript = hints.normal_property(_get_Superscript, _set_Superscript)
        def _get_BaselineOffset(self) -> hints.Incomplete: ...
        def _set_BaselineOffset(self, BaselineOffset: hints.Incomplete) -> hints.Hresult: ...
        BaselineOffset = hints.normal_property(_get_BaselineOffset, _set_BaselineOffset)
        def _get_Embedded(self) -> hints.Incomplete: ...
        Embedded = hints.normal_property(_get_Embedded)
        def _get_Embeddable(self) -> hints.Incomplete: ...
        Embeddable = hints.normal_property(_get_Embeddable)
        def _get_Size(self) -> hints.Incomplete: ...
        def _set_Size(self, Size: hints.Incomplete) -> hints.Hresult: ...
        Size = hints.normal_property(_get_Size, _set_Size)
        def _get_Name(self) -> hints.Incomplete: ...
        def _set_Name(self, Name: hints.Incomplete) -> hints.Hresult: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def _get_NameFarEast(self) -> hints.Incomplete: ...
        def _set_NameFarEast(self, NameFarEast: hints.Incomplete) -> hints.Hresult: ...
        NameFarEast = hints.normal_property(_get_NameFarEast, _set_NameFarEast)
        def _get_NameAscii(self) -> hints.Incomplete: ...
        def _set_NameAscii(self, NameAscii: hints.Incomplete) -> hints.Hresult: ...
        NameAscii = hints.normal_property(_get_NameAscii, _set_NameAscii)
        def _get_AutoRotateNumbers(self) -> hints.Incomplete: ...
        def _set_AutoRotateNumbers(self, AutoRotateNumbers: hints.Incomplete) -> hints.Hresult: ...
        AutoRotateNumbers = hints.normal_property(_get_AutoRotateNumbers, _set_AutoRotateNumbers)
        def _get_NameOther(self) -> hints.Incomplete: ...
        def _set_NameOther(self, NameOther: hints.Incomplete) -> hints.Hresult: ...
        NameOther = hints.normal_property(_get_NameOther, _set_NameOther)
        def _get_NameComplexScript(self) -> hints.Incomplete: ...
        def _set_NameComplexScript(self, NameComplexScript: hints.Incomplete) -> hints.Hresult: ...
        NameComplexScript = hints.normal_property(_get_NameComplexScript, _set_NameComplexScript)


TextStyleLevel._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'ParagraphFormat',
        (
            ['out', 'retval'],
            POINTER(POINTER(ParagraphFormat)),
            'ParagraphFormat',
        )
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Font',
        (['out', 'retval'], POINTER(POINTER(Font)), 'Font')
    ),
]

################################################################
# code template for TextStyleLevel implementation
# class TextStyleLevel_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def ParagraphFormat(self):
#         '-no docstring-'
#         #return ParagraphFormat
#
#     @property
#     def Font(self):
#         '-no docstring-'
#         #return Font
#

SlideShowWindows._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(SlideShowWindow)), 'Item')
    ),
]

################################################################
# code template for SlideShowWindows implementation
# class SlideShowWindows_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#


class Library(object):
    """Microsoft PowerPoint 16.0 Object Library"""
    name = 'PowerPoint'
    _reg_typelib_ = ('{91493440-5A91-11CF-8700-00AA0060263B}', 2, 12)


class ResampleMediaTask(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{BA72E553-4FF5-48F4-8215-5505F990966F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_profile(self) -> hints.Incomplete: ...
        profile = hints.normal_property(_get_profile)
        def _get_IsLinked(self) -> hints.Incomplete: ...
        IsLinked = hints.normal_property(_get_IsLinked)
        def _get_IsEmbedded(self) -> hints.Incomplete: ...
        IsEmbedded = hints.normal_property(_get_IsEmbedded)
        def _get_AudioSamplingRate(self) -> hints.Incomplete: ...
        AudioSamplingRate = hints.normal_property(_get_AudioSamplingRate)
        def _get_VideoFrameRate(self) -> hints.Incomplete: ...
        VideoFrameRate = hints.normal_property(_get_VideoFrameRate)
        def _get_SampleHeight(self) -> hints.Incomplete: ...
        SampleHeight = hints.normal_property(_get_SampleHeight)
        def _get_SampleWidth(self) -> hints.Incomplete: ...
        SampleWidth = hints.normal_property(_get_SampleWidth)
        def _get_ContainerType(self) -> hints.Incomplete: ...
        ContainerType = hints.normal_property(_get_ContainerType)
        def _get_VideoCompressionType(self) -> hints.Incomplete: ...
        VideoCompressionType = hints.normal_property(_get_VideoCompressionType)
        def _get_AudioCompressionType(self) -> hints.Incomplete: ...
        AudioCompressionType = hints.normal_property(_get_AudioCompressionType)
        def _get_Shape(self) -> 'Shape': ...
        Shape = hints.normal_property(_get_Shape)


ResampleMediaTask._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'profile',
        (['out', 'retval'], POINTER(PpResampleMediaProfile), 'profile')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'IsLinked',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'IsLinked')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'IsEmbedded',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'IsEmbedded')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'AudioSamplingRate',
        (['out', 'retval'], POINTER(c_int), 'AudioSamplingRate')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'VideoFrameRate',
        (['out', 'retval'], POINTER(c_int), 'VideoFrameRate')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'SampleHeight',
        (['out', 'retval'], POINTER(c_int), 'SampleHeight')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'SampleWidth',
        (['out', 'retval'], POINTER(c_int), 'SampleWidth')
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'ContainerType',
        (['out', 'retval'], POINTER(BSTR), 'ContainerType')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'VideoCompressionType',
        (['out', 'retval'], POINTER(BSTR), 'VideoCompressionType')
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'AudioCompressionType',
        (['out', 'retval'], POINTER(BSTR), 'AudioCompressionType')
    ),
    COMMETHOD(
        [dispid(2011), 'propget'],
        HRESULT,
        'Shape',
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Shape')
    ),
]

################################################################
# code template for ResampleMediaTask implementation
# class ResampleMediaTask_Impl(object):
#     @property
#     def profile(self):
#         '-no docstring-'
#         #return profile
#
#     @property
#     def IsLinked(self):
#         '-no docstring-'
#         #return IsLinked
#
#     @property
#     def IsEmbedded(self):
#         '-no docstring-'
#         #return IsEmbedded
#
#     @property
#     def AudioSamplingRate(self):
#         '-no docstring-'
#         #return AudioSamplingRate
#
#     @property
#     def VideoFrameRate(self):
#         '-no docstring-'
#         #return VideoFrameRate
#
#     @property
#     def SampleHeight(self):
#         '-no docstring-'
#         #return SampleHeight
#
#     @property
#     def SampleWidth(self):
#         '-no docstring-'
#         #return SampleWidth
#
#     @property
#     def ContainerType(self):
#         '-no docstring-'
#         #return ContainerType
#
#     @property
#     def VideoCompressionType(self):
#         '-no docstring-'
#         #return VideoCompressionType
#
#     @property
#     def AudioCompressionType(self):
#         '-no docstring-'
#         #return AudioCompressionType
#
#     @property
#     def Shape(self):
#         '-no docstring-'
#         #return Shape
#

Comment._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Author',
        (['out', 'retval'], POINTER(BSTR), 'Author')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'AuthorInitials',
        (['out', 'retval'], POINTER(BSTR), 'AuthorInitials')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'Text',
        (['out', 'retval'], POINTER(BSTR), 'Text')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'DateTime',
        (['out', 'retval'], POINTER(c_double), 'DateTime')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'AuthorIndex',
        (['out', 'retval'], POINTER(c_int), 'AuthorIndex')
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'Left',
        (['out', 'retval'], POINTER(c_float), 'Left')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'Top',
        (['out', 'retval'], POINTER(c_float), 'Top')
    ),
    COMMETHOD([dispid(2010)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(2011), 'propget'],
        HRESULT,
        'ProviderID',
        (['out', 'retval'], POINTER(BSTR), 'ProviderID')
    ),
    COMMETHOD(
        [dispid(2012), 'propget'],
        HRESULT,
        'UserID',
        (['out', 'retval'], POINTER(BSTR), 'UserID')
    ),
    COMMETHOD(
        [dispid(2013), 'propget'],
        HRESULT,
        'TimeZoneBias',
        (['out', 'retval'], POINTER(c_int), 'TimeZoneBias')
    ),
    COMMETHOD(
        [dispid(2014), 'propget'],
        HRESULT,
        'Replies',
        (['out', 'retval'], POINTER(POINTER(Comments)), 'Comments')
    ),
    COMMETHOD(
        [dispid(2015), 'propget'],
        HRESULT,
        'Collapsed',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Comments')
    ),
]

################################################################
# code template for Comment implementation
# class Comment_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Author(self):
#         '-no docstring-'
#         #return Author
#
#     @property
#     def AuthorInitials(self):
#         '-no docstring-'
#         #return AuthorInitials
#
#     @property
#     def Text(self):
#         '-no docstring-'
#         #return Text
#
#     @property
#     def DateTime(self):
#         '-no docstring-'
#         #return DateTime
#
#     @property
#     def AuthorIndex(self):
#         '-no docstring-'
#         #return AuthorIndex
#
#     @property
#     def Left(self):
#         '-no docstring-'
#         #return Left
#
#     @property
#     def Top(self):
#         '-no docstring-'
#         #return Top
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def ProviderID(self):
#         '-no docstring-'
#         #return ProviderID
#
#     @property
#     def UserID(self):
#         '-no docstring-'
#         #return UserID
#
#     @property
#     def TimeZoneBias(self):
#         '-no docstring-'
#         #return TimeZoneBias
#
#     @property
#     def Replies(self):
#         '-no docstring-'
#         #return Comments
#
#     @property
#     def Collapsed(self):
#         '-no docstring-'
#         #return Comments
#


class PageSetup(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493466-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_FirstSlideNumber(self) -> hints.Incomplete: ...
        def _set_FirstSlideNumber(self, FirstSlideNumber: hints.Incomplete) -> hints.Hresult: ...
        FirstSlideNumber = hints.normal_property(_get_FirstSlideNumber, _set_FirstSlideNumber)
        def _get_SlideHeight(self) -> hints.Incomplete: ...
        def _set_SlideHeight(self, SlideHeight: hints.Incomplete) -> hints.Hresult: ...
        SlideHeight = hints.normal_property(_get_SlideHeight, _set_SlideHeight)
        def _get_SlideWidth(self) -> hints.Incomplete: ...
        def _set_SlideWidth(self, SlideWidth: hints.Incomplete) -> hints.Hresult: ...
        SlideWidth = hints.normal_property(_get_SlideWidth, _set_SlideWidth)
        def _get_SlideSize(self) -> hints.Incomplete: ...
        def _set_SlideSize(self, SlideSize: hints.Incomplete) -> hints.Hresult: ...
        SlideSize = hints.normal_property(_get_SlideSize, _set_SlideSize)
        def _get_NotesOrientation(self) -> hints.Incomplete: ...
        def _set_NotesOrientation(self, NotesOrientation: hints.Incomplete) -> hints.Hresult: ...
        NotesOrientation = hints.normal_property(_get_NotesOrientation, _set_NotesOrientation)
        def _get_SlideOrientation(self) -> hints.Incomplete: ...
        def _set_SlideOrientation(self, SlideOrientation: hints.Incomplete) -> hints.Hresult: ...
        SlideOrientation = hints.normal_property(_get_SlideOrientation, _set_SlideOrientation)



PageSetup._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'FirstSlideNumber',
        (['out', 'retval'], POINTER(c_int), 'FirstSlideNumber')
    ),
    COMMETHOD(
        [dispid(2003), 'propput'],
        HRESULT,
        'FirstSlideNumber',
        (['in'], c_int, 'FirstSlideNumber')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'SlideHeight',
        (['out', 'retval'], POINTER(c_float), 'SlideHeight')
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'SlideHeight',
        (['in'], c_float, 'SlideHeight')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'SlideWidth',
        (['out', 'retval'], POINTER(c_float), 'SlideWidth')
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'SlideWidth',
        (['in'], c_float, 'SlideWidth')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'SlideSize',
        (['out', 'retval'], POINTER(PpSlideSizeType), 'SlideSize')
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'SlideSize',
        (['in'], PpSlideSizeType, 'SlideSize')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'NotesOrientation',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoOrientation),
            'NotesOrientation',
        )
    ),
    COMMETHOD(
        [dispid(2007), 'propput'],
        HRESULT,
        'NotesOrientation',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoOrientation,
            'NotesOrientation',
        )
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'SlideOrientation',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoOrientation),
            'SlideOrientation',
        )
    ),
    COMMETHOD(
        [dispid(2008), 'propput'],
        HRESULT,
        'SlideOrientation',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoOrientation,
            'SlideOrientation',
        )
    ),
]

################################################################
# code template for PageSetup implementation
# class PageSetup_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return FirstSlideNumber
#     def _set(self, FirstSlideNumber):
#         '-no docstring-'
#     FirstSlideNumber = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return SlideHeight
#     def _set(self, SlideHeight):
#         '-no docstring-'
#     SlideHeight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return SlideWidth
#     def _set(self, SlideWidth):
#         '-no docstring-'
#     SlideWidth = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return SlideSize
#     def _set(self, SlideSize):
#         '-no docstring-'
#     SlideSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return NotesOrientation
#     def _set(self, NotesOrientation):
#         '-no docstring-'
#     NotesOrientation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return SlideOrientation
#     def _set(self, SlideOrientation):
#         '-no docstring-'
#     SlideOrientation = property(_get, _set, doc = _set.__doc__)
#

TextRange._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'ActionSettings',
        (['out', 'retval'], POINTER(POINTER(ActionSettings)), 'ActionSettings')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Start',
        (['out', 'retval'], POINTER(c_int), 'Start')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'Length',
        (['out', 'retval'], POINTER(c_int), 'Length')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'BoundLeft',
        (['out', 'retval'], POINTER(c_float), 'BoundLeft')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'BoundTop',
        (['out', 'retval'], POINTER(c_float), 'BoundTop')
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'BoundWidth',
        (['out', 'retval'], POINTER(c_float), 'BoundWidth')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'BoundHeight',
        (['out', 'retval'], POINTER(c_float), 'BoundHeight')
    ),
    COMMETHOD(
        [dispid(2010)],
        HRESULT,
        'Paragraphs',
        (['in', 'optional'], c_int, 'Start', -1),
        (['in', 'optional'], c_int, 'Length', -1),
        (['out', 'retval'], POINTER(POINTER(TextRange)), 'Paragraphs')
    ),
    COMMETHOD(
        [dispid(2011)],
        HRESULT,
        'Sentences',
        (['in', 'optional'], c_int, 'Start', -1),
        (['in', 'optional'], c_int, 'Length', -1),
        (['out', 'retval'], POINTER(POINTER(TextRange)), 'Sentences')
    ),
    COMMETHOD(
        [dispid(2012)],
        HRESULT,
        'Words',
        (['in', 'optional'], c_int, 'Start', -1),
        (['in', 'optional'], c_int, 'Length', -1),
        (['out', 'retval'], POINTER(POINTER(TextRange)), 'Words')
    ),
    COMMETHOD(
        [dispid(2013)],
        HRESULT,
        'Characters',
        (['in', 'optional'], c_int, 'Start', -1),
        (['in', 'optional'], c_int, 'Length', -1),
        (['out', 'retval'], POINTER(POINTER(TextRange)), 'Characters')
    ),
    COMMETHOD(
        [dispid(2014)],
        HRESULT,
        'Lines',
        (['in', 'optional'], c_int, 'Start', -1),
        (['in', 'optional'], c_int, 'Length', -1),
        (['out', 'retval'], POINTER(POINTER(TextRange)), 'Lines')
    ),
    COMMETHOD(
        [dispid(2015)],
        HRESULT,
        'Runs',
        (['in', 'optional'], c_int, 'Start', -1),
        (['in', 'optional'], c_int, 'Length', -1),
        (['out', 'retval'], POINTER(POINTER(TextRange)), 'Runs')
    ),
    COMMETHOD(
        [dispid(2016)],
        HRESULT,
        'TrimText',
        (['out', 'retval'], POINTER(POINTER(TextRange)), 'TrimText')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Text',
        (['out', 'retval'], POINTER(BSTR), 'Text')
    ),
    COMMETHOD(
        [dispid(0), 'propput'],
        HRESULT,
        'Text',
        (['in'], BSTR, 'Text')
    ),
    COMMETHOD(
        [dispid(2017)],
        HRESULT,
        'InsertAfter',
        (['in', 'optional'], BSTR, 'NewText', ''),
        (['out', 'retval'], POINTER(POINTER(TextRange)), 'After')
    ),
    COMMETHOD(
        [dispid(2018)],
        HRESULT,
        'InsertBefore',
        (['in', 'optional'], BSTR, 'NewText', ''),
        (['out', 'retval'], POINTER(POINTER(TextRange)), 'Before')
    ),
    COMMETHOD(
        [dispid(2019)],
        HRESULT,
        'InsertDateTime',
        (['in'], PpDateTimeFormat, 'DateTimeFormat'),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'InsertAsField',
            0
        ),
        (['out', 'retval'], POINTER(POINTER(TextRange)), 'DateTime')
    ),
    COMMETHOD(
        [dispid(2020)],
        HRESULT,
        'InsertSlideNumber',
        (['out', 'retval'], POINTER(POINTER(TextRange)), 'SlideNumber')
    ),
    COMMETHOD(
        [dispid(2021)],
        HRESULT,
        'InsertSymbol',
        (['in'], BSTR, 'FontName'),
        (['in'], c_int, 'CharNumber'),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Unicode',
            0
        ),
        (['out', 'retval'], POINTER(POINTER(TextRange)), 'Symbol')
    ),
    COMMETHOD(
        [dispid(2022), 'propget'],
        HRESULT,
        'Font',
        (['out', 'retval'], POINTER(POINTER(Font)), 'Font')
    ),
    COMMETHOD(
        [dispid(2023), 'propget'],
        HRESULT,
        'ParagraphFormat',
        (
            ['out', 'retval'],
            POINTER(POINTER(ParagraphFormat)),
            'ParagraphFormat',
        )
    ),
    COMMETHOD(
        [dispid(2024), 'propget'],
        HRESULT,
        'IndentLevel',
        (['out', 'retval'], POINTER(c_int), 'IndentLevel')
    ),
    COMMETHOD(
        [dispid(2024), 'propput'],
        HRESULT,
        'IndentLevel',
        (['in'], c_int, 'IndentLevel')
    ),
    COMMETHOD([dispid(2025)], HRESULT, 'Select'),
    COMMETHOD([dispid(2026)], HRESULT, 'Cut'),
    COMMETHOD([dispid(2027)], HRESULT, 'Copy'),
    COMMETHOD([dispid(2028)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(2029)],
        HRESULT,
        'Paste',
        (['out', 'retval'], POINTER(POINTER(TextRange)), 'Paste')
    ),
    COMMETHOD(
        [dispid(2030)],
        HRESULT,
        'ChangeCase',
        (['in'], PpChangeCase, 'Type')
    ),
    COMMETHOD([dispid(2031)], HRESULT, 'AddPeriods'),
    COMMETHOD([dispid(2032)], HRESULT, 'RemovePeriods'),
    COMMETHOD(
        [dispid(2033)],
        HRESULT,
        'Find',
        (['in'], BSTR, 'FindWhat'),
        (['in', 'optional'], c_int, 'After', 0),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'MatchCase',
            0
        ),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'WholeWords',
            0
        ),
        (['out', 'retval'], POINTER(POINTER(TextRange)), 'Find')
    ),
    COMMETHOD(
        [dispid(2034)],
        HRESULT,
        'Replace',
        (['in'], BSTR, 'FindWhat'),
        (['in'], BSTR, 'ReplaceWhat'),
        (['in', 'optional'], c_int, 'After', 0),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'MatchCase',
            0
        ),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'WholeWords',
            0
        ),
        (['out', 'retval'], POINTER(POINTER(TextRange)), 'Replace')
    ),
    COMMETHOD(
        [dispid(2035)],
        HRESULT,
        'RotatedBounds',
        (['out'], POINTER(c_float), 'X1'),
        (['out'], POINTER(c_float), 'Y1'),
        (['out'], POINTER(c_float), 'X2'),
        (['out'], POINTER(c_float), 'Y2'),
        (['out'], POINTER(c_float), 'X3'),
        (['out'], POINTER(c_float), 'Y3'),
        (['out'], POINTER(c_float), 'x4'),
        (['out'], POINTER(c_float), 'y4')
    ),
    COMMETHOD(
        [dispid(2036), 'propget'],
        HRESULT,
        'LanguageID',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoLanguageID),
            'LanguageID',
        )
    ),
    COMMETHOD(
        [dispid(2036), 'propput'],
        HRESULT,
        'LanguageID',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoLanguageID,
            'LanguageID',
        )
    ),
    COMMETHOD([dispid(2037)], HRESULT, 'RtlRun'),
    COMMETHOD([dispid(2038)], HRESULT, 'LtrRun'),
    COMMETHOD(
        [dispid(2039)],
        HRESULT,
        'PasteSpecial',
        (['in', 'optional'], PpPasteDataType, 'DataType', 0),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'DisplayAsIcon',
            0
        ),
        (['in', 'optional'], BSTR, 'IconFileName', ''),
        (['in', 'optional'], c_int, 'IconIndex', 0),
        (['in', 'optional'], BSTR, 'IconLabel', ''),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Link',
            0
        ),
        (['out', 'retval'], POINTER(POINTER(TextRange)), 'PasteSpecial')
    ),
]

################################################################
# code template for TextRange implementation
# class TextRange_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def ActionSettings(self):
#         '-no docstring-'
#         #return ActionSettings
#
#     @property
#     def Start(self):
#         '-no docstring-'
#         #return Start
#
#     @property
#     def Length(self):
#         '-no docstring-'
#         #return Length
#
#     @property
#     def BoundLeft(self):
#         '-no docstring-'
#         #return BoundLeft
#
#     @property
#     def BoundTop(self):
#         '-no docstring-'
#         #return BoundTop
#
#     @property
#     def BoundWidth(self):
#         '-no docstring-'
#         #return BoundWidth
#
#     @property
#     def BoundHeight(self):
#         '-no docstring-'
#         #return BoundHeight
#
#     def Paragraphs(self, Start, Length):
#         '-no docstring-'
#         #return Paragraphs
#
#     def Sentences(self, Start, Length):
#         '-no docstring-'
#         #return Sentences
#
#     def Words(self, Start, Length):
#         '-no docstring-'
#         #return Words
#
#     def Characters(self, Start, Length):
#         '-no docstring-'
#         #return Characters
#
#     def Lines(self, Start, Length):
#         '-no docstring-'
#         #return Lines
#
#     def Runs(self, Start, Length):
#         '-no docstring-'
#         #return Runs
#
#     def TrimText(self):
#         '-no docstring-'
#         #return TrimText
#
#     def _get(self):
#         '-no docstring-'
#         #return Text
#     def _set(self, Text):
#         '-no docstring-'
#     Text = property(_get, _set, doc = _set.__doc__)
#
#     def InsertAfter(self, NewText):
#         '-no docstring-'
#         #return After
#
#     def InsertBefore(self, NewText):
#         '-no docstring-'
#         #return Before
#
#     def InsertDateTime(self, DateTimeFormat, InsertAsField):
#         '-no docstring-'
#         #return DateTime
#
#     def InsertSlideNumber(self):
#         '-no docstring-'
#         #return SlideNumber
#
#     def InsertSymbol(self, FontName, CharNumber, Unicode):
#         '-no docstring-'
#         #return Symbol
#
#     @property
#     def Font(self):
#         '-no docstring-'
#         #return Font
#
#     @property
#     def ParagraphFormat(self):
#         '-no docstring-'
#         #return ParagraphFormat
#
#     def _get(self):
#         '-no docstring-'
#         #return IndentLevel
#     def _set(self, IndentLevel):
#         '-no docstring-'
#     IndentLevel = property(_get, _set, doc = _set.__doc__)
#
#     def Select(self):
#         '-no docstring-'
#         #return 
#
#     def Cut(self):
#         '-no docstring-'
#         #return 
#
#     def Copy(self):
#         '-no docstring-'
#         #return 
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     def Paste(self):
#         '-no docstring-'
#         #return Paste
#
#     def ChangeCase(self, Type):
#         '-no docstring-'
#         #return 
#
#     def AddPeriods(self):
#         '-no docstring-'
#         #return 
#
#     def RemovePeriods(self):
#         '-no docstring-'
#         #return 
#
#     def Find(self, FindWhat, After, MatchCase, WholeWords):
#         '-no docstring-'
#         #return Find
#
#     def Replace(self, FindWhat, ReplaceWhat, After, MatchCase, WholeWords):
#         '-no docstring-'
#         #return Replace
#
#     def RotatedBounds(self):
#         '-no docstring-'
#         #return X1, Y1, X2, Y2, X3, Y3, x4, y4
#
#     def _get(self):
#         '-no docstring-'
#         #return LanguageID
#     def _set(self, LanguageID):
#         '-no docstring-'
#     LanguageID = property(_get, _set, doc = _set.__doc__)
#
#     def RtlRun(self):
#         '-no docstring-'
#         #return 
#
#     def LtrRun(self):
#         '-no docstring-'
#         #return 
#
#     def PasteSpecial(self, DataType, DisplayAsIcon, IconFileName, IconIndex, IconLabel, Link):
#         '-no docstring-'
#         #return PasteSpecial
#


class Player(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{BA72E552-4FF5-48F4-8215-5505F990966F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Play(self) -> hints.Hresult: ...
        def Pause(self) -> hints.Hresult: ...
        def Stop(self) -> hints.Hresult: ...
        def GoToNextBookmark(self) -> hints.Hresult: ...
        def GoToPreviousBookmark(self) -> hints.Hresult: ...
        def _get_CurrentPosition(self) -> hints.Incomplete: ...
        def _set_CurrentPosition(self, CurrentPosition: hints.Incomplete) -> hints.Hresult: ...
        CurrentPosition = hints.normal_property(_get_CurrentPosition, _set_CurrentPosition)
        def _get_State(self) -> hints.Incomplete: ...
        State = hints.normal_property(_get_State)



Player._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD([dispid(2003)], HRESULT, 'Play'),
    COMMETHOD([dispid(2004)], HRESULT, 'Pause'),
    COMMETHOD([dispid(2005)], HRESULT, 'Stop'),
    COMMETHOD([dispid(2006)], HRESULT, 'GoToNextBookmark'),
    COMMETHOD([dispid(2007)], HRESULT, 'GoToPreviousBookmark'),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'CurrentPosition',
        (['out', 'retval'], POINTER(c_int), 'CurrentPosition')
    ),
    COMMETHOD(
        [dispid(2008), 'propput'],
        HRESULT,
        'CurrentPosition',
        (['in'], c_int, 'CurrentPosition')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'State',
        (['out', 'retval'], POINTER(PpPlayerState), 'State')
    ),
]

################################################################
# code template for Player implementation
# class Player_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Play(self):
#         '-no docstring-'
#         #return 
#
#     def Pause(self):
#         '-no docstring-'
#         #return 
#
#     def Stop(self):
#         '-no docstring-'
#         #return 
#
#     def GoToNextBookmark(self):
#         '-no docstring-'
#         #return 
#
#     def GoToPreviousBookmark(self):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return CurrentPosition
#     def _set(self, CurrentPosition):
#         '-no docstring-'
#     CurrentPosition = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def State(self):
#         '-no docstring-'
#         #return State
#


class ChartData(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A5A-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Workbook(self) -> hints.Incomplete: ...
        Workbook = hints.normal_property(_get_Workbook)
        def Activate(self) -> hints.Hresult: ...
        def _get_IsLinked(self) -> hints.Incomplete: ...
        IsLinked = hints.normal_property(_get_IsLinked)
        def BreakLink(self) -> hints.Hresult: ...
        def ActivateChartDataWindow(self) -> hints.Hresult: ...


ChartData._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Workbook',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppdispWorkbook')
    ),
    COMMETHOD([dispid(2002)], HRESULT, 'Activate'),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'IsLinked',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pfIsLinked')
    ),
    COMMETHOD([dispid(2004)], HRESULT, 'BreakLink'),
    COMMETHOD([dispid(2005)], HRESULT, 'ActivateChartDataWindow'),
]

################################################################
# code template for ChartData implementation
# class ChartData_Impl(object):
#     @property
#     def Workbook(self):
#         '-no docstring-'
#         #return ppdispWorkbook
#
#     def Activate(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def IsLinked(self):
#         '-no docstring-'
#         #return pfIsLinked
#
#     def BreakLink(self):
#         '-no docstring-'
#         #return 
#
#     def ActivateChartDataWindow(self):
#         '-no docstring-'
#         #return 
#

Design._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'SlideMaster',
        (['out', 'retval'], POINTER(POINTER(_Master)), 'SlideMaster')
    ),
    COMMETHOD(
        [dispid(2004), 'hidden', 'propget'],
        HRESULT,
        'TitleMaster',
        (['out', 'retval'], POINTER(POINTER(_Master)), 'TitleMaster')
    ),
    COMMETHOD(
        [dispid(2005), 'hidden', 'propget'],
        HRESULT,
        'HasTitleMaster',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'HasTitleMaster',
        )
    ),
    COMMETHOD(
        [dispid(2006), 'hidden'],
        HRESULT,
        'AddTitleMaster',
        (['out', 'retval'], POINTER(POINTER(_Master)), 'TitleMaster')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'Index',
        (['out', 'retval'], POINTER(c_int), 'Index')
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(2008), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'Name')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'Preserved',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Preserved',
        )
    ),
    COMMETHOD(
        [dispid(2009), 'propput'],
        HRESULT,
        'Preserved',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Preserved',
        )
    ),
    COMMETHOD(
        [dispid(2010)],
        HRESULT,
        'MoveTo',
        (['in'], c_int, 'toPos')
    ),
    COMMETHOD([dispid(2011)], HRESULT, 'Delete'),
]

################################################################
# code template for Design implementation
# class Design_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def SlideMaster(self):
#         '-no docstring-'
#         #return SlideMaster
#
#     @property
#     def TitleMaster(self):
#         '-no docstring-'
#         #return TitleMaster
#
#     @property
#     def HasTitleMaster(self):
#         '-no docstring-'
#         #return HasTitleMaster
#
#     def AddTitleMaster(self):
#         '-no docstring-'
#         #return TitleMaster
#
#     @property
#     def Index(self):
#         '-no docstring-'
#         #return Index
#
#     def _get(self):
#         '-no docstring-'
#         #return Name
#     def _set(self, Name):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Preserved
#     def _set(self, Preserved):
#         '-no docstring-'
#     Preserved = property(_get, _set, doc = _set.__doc__)
#
#     def MoveTo(self, toPos):
#         '-no docstring-'
#         #return 
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#


class PropertyEffect(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934E9-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Property(self) -> hints.Incomplete: ...
        def _set_Property(self, Property: hints.Incomplete) -> hints.Hresult: ...
        Property = hints.normal_property(_get_Property, _set_Property)
        def _get_Points(self) -> 'AnimationPoints': ...
        Points = hints.normal_property(_get_Points)
        def _get_From(self) -> hints.Incomplete: ...
        def _set_From(self, From: hints.Incomplete) -> hints.Hresult: ...
        From = hints.normal_property(_get_From, _set_From)
        def _get_To(self) -> hints.Incomplete: ...
        def _set_To(self, To: hints.Incomplete) -> hints.Hresult: ...
        To = hints.normal_property(_get_To, _set_To)




class AnimationPoints(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{914934EA-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Item(self, Index: hints.Incomplete) -> 'AnimationPoint': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def Add(self, Index: hints.Incomplete = ...) -> 'AnimationPoint': ...
        def _get_Smooth(self) -> hints.Incomplete: ...
        def _set_Smooth(self, Smooth: hints.Incomplete) -> hints.Hresult: ...
        Smooth = hints.normal_property(_get_Smooth, _set_Smooth)


PropertyEffect._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Property',
        (['out', 'retval'], POINTER(MsoAnimProperty), 'Property')
    ),
    COMMETHOD(
        [dispid(2003), 'propput'],
        HRESULT,
        'Property',
        (['in'], MsoAnimProperty, 'Property')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Points',
        (['out', 'retval'], POINTER(POINTER(AnimationPoints)), 'Points')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'From',
        (['out', 'retval'], POINTER(VARIANT), 'From')
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'From',
        (['in'], VARIANT, 'From')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'To',
        (['out', 'retval'], POINTER(VARIANT), 'To')
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'To',
        (['in'], VARIANT, 'To')
    ),
]

################################################################
# code template for PropertyEffect implementation
# class PropertyEffect_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return Property
#     def _set(self, Property):
#         '-no docstring-'
#     Property = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Points(self):
#         '-no docstring-'
#         #return Points
#
#     def _get(self):
#         '-no docstring-'
#         #return From
#     def _set(self, From):
#         '-no docstring-'
#     From = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return To
#     def _set(self, To):
#         '-no docstring-'
#     To = property(_get, _set, doc = _set.__doc__)
#


class Legend(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A6E-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def Select(self) -> hints.Incomplete: ...
        def _get_Border(self) -> 'ChartBorder': ...
        Border = hints.normal_property(_get_Border)
        def Delete(self) -> hints.Incomplete: ...
        def _get_Font(self) -> 'ChartFont': ...
        Font = hints.normal_property(_get_Font)
        def LegendEntries(self, Index: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _get_Position(self) -> hints.Incomplete: ...
        def _set_Position(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Position = hints.normal_property(_get_Position, _set_Position)
        def _get_Shadow(self) -> hints.Incomplete: ...
        def _set_Shadow(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Shadow = hints.normal_property(_get_Shadow, _set_Shadow)
        def Clear(self) -> hints.Incomplete: ...
        def _get_Height(self) -> hints.Incomplete: ...
        def _set_Height(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Height = hints.normal_property(_get_Height, _set_Height)
        def _get_Interior(self) -> 'Interior': ...
        Interior = hints.normal_property(_get_Interior)
        def _get_Fill(self) -> 'ChartFillFormat': ...
        Fill = hints.normal_property(_get_Fill)
        def _get_Left(self) -> hints.Incomplete: ...
        def _set_Left(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Left = hints.normal_property(_get_Left, _set_Left)
        def _get_Top(self) -> hints.Incomplete: ...
        def _set_Top(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Top = hints.normal_property(_get_Top, _set_Top)
        def _get_Width(self) -> hints.Incomplete: ...
        def _set_Width(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Width = hints.normal_property(_get_Width, _set_Width)
        def _get_AutoScaleFont(self) -> hints.Incomplete: ...
        def _set_AutoScaleFont(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        AutoScaleFont = hints.normal_property(_get_AutoScaleFont, _set_AutoScaleFont)
        def _get_IncludeInLayout(self) -> hints.Incomplete: ...
        def _set_IncludeInLayout(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        IncludeInLayout = hints.normal_property(_get_IncludeInLayout, _set_IncludeInLayout)
        def _get_Format(self) -> 'ChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def GetProperty(self, Id: hints.Incomplete) -> hints.Incomplete: ...
        def SetProperty(self, Id: hints.Incomplete, Value: hints.Incomplete) -> hints.Hresult: ...



Legend._methods_ = [
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(235)],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(128), 'hidden', 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(ChartBorder)), 'RHS')
    ),
    COMMETHOD(
        [dispid(117)],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(146), 'hidden', 'propget'],
        HRESULT,
        'Font',
        (['out', 'retval'], POINTER(POINTER(ChartFont)), 'RHS')
    ),
    COMMETHOD(
        [dispid(173)],
        HRESULT,
        'LegendEntries',
        (['in', 'optional'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(133), 'propget'],
        HRESULT,
        'Position',
        (['out', 'retval'], POINTER(XlLegendPosition), 'RHS')
    ),
    COMMETHOD(
        [dispid(133), 'propput'],
        HRESULT,
        'Position',
        (['in'], XlLegendPosition, 'RHS')
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'Shadow',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(103), 'propput'],
        HRESULT,
        'Shadow',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(111)],
        HRESULT,
        'Clear',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(123), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(123), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(129), 'hidden', 'propget'],
        HRESULT,
        'Interior',
        (['out', 'retval'], POINTER(POINTER(Interior)), 'RHS')
    ),
    COMMETHOD(
        [dispid(1663), 'hidden', 'propget'],
        HRESULT,
        'Fill',
        (['out', 'retval'], POINTER(POINTER(ChartFillFormat)), 'RHS')
    ),
    COMMETHOD(
        [dispid(127), 'propget'],
        HRESULT,
        'Left',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(127), 'propput'],
        HRESULT,
        'Left',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(126), 'propget'],
        HRESULT,
        'Top',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(126), 'propput'],
        HRESULT,
        'Top',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(122), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(122), 'propput'],
        HRESULT,
        'Width',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(1525), 'hidden', 'propget'],
        HRESULT,
        'AutoScaleFont',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(1525), 'hidden', 'propput'],
        HRESULT,
        'AutoScaleFont',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2418), 'propget'],
        HRESULT,
        'IncludeInLayout',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2418), 'propput'],
        HRESULT,
        'IncludeInLayout',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(ChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2003)],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'Id'),
        (['out', 'retval'], POINTER(VARIANT), 'pValue')
    ),
    COMMETHOD(
        [dispid(2004)],
        HRESULT,
        'SetProperty',
        (['in'], BSTR, 'Id'),
        (['in'], VARIANT, 'Value')
    ),
]

################################################################
# code template for Legend implementation
# class Legend_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return RHS
#
#     def Select(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return RHS
#
#     def Delete(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Font(self):
#         '-no docstring-'
#         #return RHS
#
#     def LegendEntries(self, Index):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Position = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Shadow = property(_get, _set, doc = _set.__doc__)
#
#     def Clear(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Interior(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Fill(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Left = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Top = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Width = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     AutoScaleFont = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     IncludeInLayout = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     def GetProperty(self, Id):
#         '-no docstring-'
#         #return pValue
#
#     def SetProperty(self, Id, Value):
#         '-no docstring-'
#         #return 
#


class ActionSetting(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{9149348D-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Action(self) -> hints.Incomplete: ...
        def _set_Action(self, Action: hints.Incomplete) -> hints.Hresult: ...
        Action = hints.normal_property(_get_Action, _set_Action)
        def _get_ActionVerb(self) -> hints.Incomplete: ...
        def _set_ActionVerb(self, ActionVerb: hints.Incomplete) -> hints.Hresult: ...
        ActionVerb = hints.normal_property(_get_ActionVerb, _set_ActionVerb)
        def _get_AnimateAction(self) -> hints.Incomplete: ...
        def _set_AnimateAction(self, AnimateAction: hints.Incomplete) -> hints.Hresult: ...
        AnimateAction = hints.normal_property(_get_AnimateAction, _set_AnimateAction)
        def _get_Run(self) -> hints.Incomplete: ...
        def _set_Run(self, Run: hints.Incomplete) -> hints.Hresult: ...
        Run = hints.normal_property(_get_Run, _set_Run)
        def _get_SlideShowName(self) -> hints.Incomplete: ...
        def _set_SlideShowName(self, SlideShowName: hints.Incomplete) -> hints.Hresult: ...
        SlideShowName = hints.normal_property(_get_SlideShowName, _set_SlideShowName)
        def _get_Hyperlink(self) -> 'Hyperlink': ...
        Hyperlink = hints.normal_property(_get_Hyperlink)
        def _get_SoundEffect(self) -> 'SoundEffect': ...
        SoundEffect = hints.normal_property(_get_SoundEffect)
        def _get_ShowAndReturn(self) -> hints.Incomplete: ...
        def _set_ShowAndReturn(self, ShowAndReturn: hints.Incomplete) -> hints.Hresult: ...
        ShowAndReturn = hints.normal_property(_get_ShowAndReturn, _set_ShowAndReturn)


ActionSettings._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], PpMouseActivation, 'Index'),
        (['out', 'retval'], POINTER(POINTER(ActionSetting)), 'Item')
    ),
]

################################################################
# code template for ActionSettings implementation
# class ActionSettings_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#


class ChartTitle(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A5F-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Caption(self) -> hints.Incomplete: ...
        def _set_Caption(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Caption = hints.normal_property(_get_Caption, _set_Caption)
        def _get_Characters(self, Start: hints.Incomplete = ..., Length: hints.Incomplete = ...) -> 'ChartCharacters': ...
        Characters = hints.named_property('Characters', _get_Characters)
        def _get_Font(self) -> 'ChartFont': ...
        Font = hints.normal_property(_get_Font)
        def _get_HorizontalAlignment(self) -> hints.Incomplete: ...
        def _set_HorizontalAlignment(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        HorizontalAlignment = hints.normal_property(_get_HorizontalAlignment, _set_HorizontalAlignment)
        def _get_Left(self) -> hints.Incomplete: ...
        def _set_Left(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Left = hints.normal_property(_get_Left, _set_Left)
        def _get_Orientation(self) -> hints.Incomplete: ...
        def _set_Orientation(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Orientation = hints.normal_property(_get_Orientation, _set_Orientation)
        def _get_Shadow(self) -> hints.Incomplete: ...
        def _set_Shadow(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Shadow = hints.normal_property(_get_Shadow, _set_Shadow)
        def _get_Text(self) -> hints.Incomplete: ...
        def _set_Text(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Text = hints.normal_property(_get_Text, _set_Text)
        def _get_Top(self) -> hints.Incomplete: ...
        def _set_Top(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Top = hints.normal_property(_get_Top, _set_Top)
        def _get_VerticalAlignment(self) -> hints.Incomplete: ...
        def _set_VerticalAlignment(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        VerticalAlignment = hints.normal_property(_get_VerticalAlignment, _set_VerticalAlignment)
        def _get_AutoScaleFont(self) -> hints.Incomplete: ...
        def _set_AutoScaleFont(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        AutoScaleFont = hints.normal_property(_get_AutoScaleFont, _set_AutoScaleFont)
        def _get_Interior(self) -> 'Interior': ...
        Interior = hints.normal_property(_get_Interior)
        def _get_Fill(self) -> 'ChartFillFormat': ...
        Fill = hints.normal_property(_get_Fill)
        def Delete(self) -> hints.Incomplete: ...
        def _get_Border(self) -> 'ChartBorder': ...
        Border = hints.normal_property(_get_Border)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Select(self) -> hints.Incomplete: ...
        def _get_IncludeInLayout(self) -> hints.Incomplete: ...
        def _set_IncludeInLayout(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        IncludeInLayout = hints.normal_property(_get_IncludeInLayout, _set_IncludeInLayout)
        def _get_Position(self) -> hints.Incomplete: ...
        def _set_Position(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Position = hints.normal_property(_get_Position, _set_Position)
        def _get_Format(self) -> 'ChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_ReadingOrder(self) -> hints.Incomplete: ...
        def _set_ReadingOrder(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ReadingOrder = hints.normal_property(_get_ReadingOrder, _set_ReadingOrder)
        def _get_Height(self) -> hints.Incomplete: ...
        Height = hints.normal_property(_get_Height)
        def _get_Width(self) -> hints.Incomplete: ...
        Width = hints.normal_property(_get_Width)
        def _get_Formula(self) -> hints.Incomplete: ...
        def _set_Formula(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        Formula = hints.normal_property(_get_Formula, _set_Formula)
        def _get_FormulaR1C1(self) -> hints.Incomplete: ...
        def _set_FormulaR1C1(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        FormulaR1C1 = hints.normal_property(_get_FormulaR1C1, _set_FormulaR1C1)
        def _get_FormulaLocal(self) -> hints.Incomplete: ...
        def _set_FormulaLocal(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        FormulaLocal = hints.normal_property(_get_FormulaLocal, _set_FormulaLocal)
        def _get_FormulaR1C1Local(self) -> hints.Incomplete: ...
        def _set_FormulaR1C1Local(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        FormulaR1C1Local = hints.normal_property(_get_FormulaR1C1Local, _set_FormulaR1C1Local)
        def GetProperty(self, Id: hints.Incomplete) -> hints.Incomplete: ...
        def SetProperty(self, Id: hints.Incomplete, Value: hints.Incomplete) -> hints.Hresult: ...


ChartTitle._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propput'],
        HRESULT,
        'Caption',
        (['in'], BSTR, 'RHS')
    ),
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Caption',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Characters',
        (['in', 'optional'], VARIANT, 'Start'),
        (['in', 'optional'], VARIANT, 'Length'),
        (['out', 'retval'], POINTER(POINTER(ChartCharacters)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2003), 'hidden', 'propget'],
        HRESULT,
        'Font',
        (['out', 'retval'], POINTER(POINTER(ChartFont)), 'ppfont')
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'HorizontalAlignment',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'HorizontalAlignment',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'Left',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'Left',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'Orientation',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'Orientation',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'Shadow',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2007), 'propput'],
        HRESULT,
        'Shadow',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2008), 'propput'],
        HRESULT,
        'Text',
        (['in'], BSTR, 'RHS')
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'Text',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'Top',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(2009), 'propput'],
        HRESULT,
        'Top',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(2010), 'propput'],
        HRESULT,
        'VerticalAlignment',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'VerticalAlignment',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2011), 'hidden', 'propput'],
        HRESULT,
        'AutoScaleFont',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2011), 'hidden', 'propget'],
        HRESULT,
        'AutoScaleFont',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2012), 'hidden', 'propget'],
        HRESULT,
        'Interior',
        (['out', 'retval'], POINTER(POINTER(Interior)), 'ppinterior')
    ),
    COMMETHOD(
        [dispid(2013), 'hidden', 'propget'],
        HRESULT,
        'Fill',
        (['out', 'retval'], POINTER(POINTER(ChartFillFormat)), 'ppinterior')
    ),
    COMMETHOD(
        [dispid(2014)],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2015), 'hidden', 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(ChartBorder)), 'ppborder')
    ),
    COMMETHOD(
        [dispid(2016), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(2017), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        [dispid(2018)],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2418), 'propget'],
        HRESULT,
        'IncludeInLayout',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2418), 'propput'],
        HRESULT,
        'IncludeInLayout',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(1671), 'propget'],
        HRESULT,
        'Position',
        (['out', 'retval'], POINTER(XlChartElementPosition), 'RHS')
    ),
    COMMETHOD(
        [dispid(1671), 'propput'],
        HRESULT,
        'Position',
        (['in'], XlChartElementPosition, 'RHS')
    ),
    COMMETHOD(
        [dispid(2019), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(ChartFormat)), 'RHS')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2020), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2021), 'propget'],
        HRESULT,
        'ReadingOrder',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2021), 'propput'],
        HRESULT,
        'ReadingOrder',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(2022), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_double), 'Height')
    ),
    COMMETHOD(
        [dispid(2023), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_double), 'Width')
    ),
    COMMETHOD(
        [dispid(2024), 'propput'],
        HRESULT,
        'Formula',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(2024), 'propget'],
        HRESULT,
        'Formula',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(2025), 'propput'],
        HRESULT,
        'FormulaR1C1',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(2025), 'propget'],
        HRESULT,
        'FormulaR1C1',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(2026), 'propput'],
        HRESULT,
        'FormulaLocal',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(2026), 'propget'],
        HRESULT,
        'FormulaLocal',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(2027), 'propput'],
        HRESULT,
        'FormulaR1C1Local',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(2027), 'propget'],
        HRESULT,
        'FormulaR1C1Local',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(2028)],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'Id'),
        (['out', 'retval'], POINTER(VARIANT), 'pValue')
    ),
    COMMETHOD(
        [dispid(2029)],
        HRESULT,
        'SetProperty',
        (['in'], BSTR, 'Id'),
        (['in'], VARIANT, 'Value')
    ),
]

################################################################
# code template for ChartTitle implementation
# class ChartTitle_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Caption = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Characters(self, Start, Length):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Font(self):
#         '-no docstring-'
#         #return ppfont
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     HorizontalAlignment = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Left = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Orientation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Shadow = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Text = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Top = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     VerticalAlignment = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     AutoScaleFont = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Interior(self):
#         '-no docstring-'
#         #return ppinterior
#
#     @property
#     def Fill(self):
#         '-no docstring-'
#         #return ppinterior
#
#     def Delete(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return ppborder
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppval
#
#     def Select(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     IncludeInLayout = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Position = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ReadingOrder = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Height(self):
#         '-no docstring-'
#         #return Height
#
#     @property
#     def Width(self):
#         '-no docstring-'
#         #return Width
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     Formula = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     FormulaR1C1 = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     FormulaLocal = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     FormulaR1C1Local = property(_get, _set, doc = _set.__doc__)
#
#     def GetProperty(self, Id):
#         '-no docstring-'
#         #return pValue
#
#     def SetProperty(self, Id, Value):
#         '-no docstring-'
#         #return 
#


class DownBars(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A65-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def Select(self) -> hints.Incomplete: ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Border(self) -> 'ChartBorder': ...
        Border = hints.normal_property(_get_Border)
        def Delete(self) -> hints.Incomplete: ...
        def _get_Interior(self) -> 'Interior': ...
        Interior = hints.normal_property(_get_Interior)
        def _get_Fill(self) -> 'ChartFillFormat': ...
        Fill = hints.normal_property(_get_Fill)
        def _get_Format(self) -> 'ChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def GetProperty(self, Id: hints.Incomplete) -> hints.Incomplete: ...
        def SetProperty(self, Id: hints.Incomplete, Value: hints.Incomplete) -> hints.Hresult: ...


class DropLines(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A66-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Border(self) -> 'ChartBorder': ...
        Border = hints.normal_property(_get_Border)
        def _get_Format(self) -> 'ChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def Delete(self) -> hints.Incomplete: ...
        def Select(self) -> hints.Incomplete: ...


class HiLoLines(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A6B-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Border(self) -> 'ChartBorder': ...
        Border = hints.normal_property(_get_Border)
        def _get_Format(self) -> 'ChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def Delete(self) -> hints.Incomplete: ...
        def Select(self) -> hints.Incomplete: ...


class SeriesLines(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A77-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def Select(self) -> hints.Incomplete: ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Border(self) -> 'ChartBorder': ...
        Border = hints.normal_property(_get_Border)
        def Delete(self) -> hints.Incomplete: ...
        def _get_Format(self) -> 'ChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def GetProperty(self, Id: hints.Incomplete) -> hints.Incomplete: ...
        def SetProperty(self, Id: hints.Incomplete, Value: hints.Incomplete) -> hints.Hresult: ...


class UpBars(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A7B-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def Select(self) -> hints.Incomplete: ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Border(self) -> 'ChartBorder': ...
        Border = hints.normal_property(_get_Border)
        def Delete(self) -> hints.Incomplete: ...
        def _get_Interior(self) -> 'Interior': ...
        Interior = hints.normal_property(_get_Interior)
        def _get_Fill(self) -> 'ChartFillFormat': ...
        Fill = hints.normal_property(_get_Fill)
        def _get_Format(self) -> 'ChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def GetProperty(self, Id: hints.Incomplete) -> hints.Incomplete: ...
        def SetProperty(self, Id: hints.Incomplete, Value: hints.Incomplete) -> hints.Hresult: ...


ChartGroup._methods_ = [
    COMMETHOD(
        [dispid(1610743808), 'propget'],
        HRESULT,
        'DownBars',
        (['out', 'retval'], POINTER(POINTER(DownBars)), 'ppdownbars')
    ),
    COMMETHOD(
        [dispid(1610743809), 'propget'],
        HRESULT,
        'DropLines',
        (['out', 'retval'], POINTER(POINTER(DropLines)), 'ppdroplines')
    ),
    COMMETHOD(
        [dispid(1610743810), 'propput'],
        HRESULT,
        'HasDropLines',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(1610743810), 'propget'],
        HRESULT,
        'HasDropLines',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(1610743812), 'propput'],
        HRESULT,
        'HasHiLoLines',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(1610743812), 'propget'],
        HRESULT,
        'HasHiLoLines',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(1610743814), 'propput'],
        HRESULT,
        'HasRadarAxisLabels',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(1610743814), 'propget'],
        HRESULT,
        'HasRadarAxisLabels',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(1610743816), 'propput'],
        HRESULT,
        'HasSeriesLines',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(1610743816), 'propget'],
        HRESULT,
        'HasSeriesLines',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(1610743818), 'propput'],
        HRESULT,
        'HasUpDownBars',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(1610743818), 'propget'],
        HRESULT,
        'HasUpDownBars',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(1610743820), 'propget'],
        HRESULT,
        'HiLoLines',
        (['out', 'retval'], POINTER(POINTER(HiLoLines)), 'ppHiLoLines')
    ),
    COMMETHOD(
        [dispid(1610743821)],
        HRESULT,
        'SeriesCollection',
        (['in', 'optional'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppSeriesCollection')
    ),
    COMMETHOD(
        [dispid(1610743822), 'propget'],
        HRESULT,
        'SeriesLines',
        (['out', 'retval'], POINTER(POINTER(SeriesLines)), 'ppSeriesLines')
    ),
    COMMETHOD(
        [dispid(1610743823), 'propget'],
        HRESULT,
        'UpBars',
        (['out', 'retval'], POINTER(POINTER(UpBars)), 'ppUpBars')
    ),
    COMMETHOD(
        [dispid(1610743824), 'propput'],
        HRESULT,
        'VaryByCategories',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(1610743824), 'propget'],
        HRESULT,
        'VaryByCategories',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'SizeRepresents',
        (['out', 'retval'], POINTER(XlSizeRepresents), 'RHS')
    ),
    COMMETHOD(
        [dispid(2001), 'propput'],
        HRESULT,
        'SizeRepresents',
        (['in'], XlSizeRepresents, 'RHS')
    ),
    COMMETHOD(
        [dispid(2002), 'propput'],
        HRESULT,
        'ShowNegativeBubbles',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'ShowNegativeBubbles',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2003), 'propput'],
        HRESULT,
        'SplitType',
        (['in'], XlChartSplitType, 'RHS')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'SplitType',
        (['out', 'retval'], POINTER(XlChartSplitType), 'RHS')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'SplitValue',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'SplitValue',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'Has3DShading',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'Has3DShading',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'AxisGroup',
        (['out', 'retval'], POINTER(XlAxisGroup), 'RHS')
    ),
    COMMETHOD(
        [dispid(2007), 'propput'],
        HRESULT,
        'AxisGroup',
        (['in'], XlAxisGroup, 'RHS')
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'BubbleScale',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2008), 'propput'],
        HRESULT,
        'BubbleScale',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'DoughnutHoleSize',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2009), 'propput'],
        HRESULT,
        'DoughnutHoleSize',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'FirstSliceAngle',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2010), 'propput'],
        HRESULT,
        'FirstSliceAngle',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(2011), 'propget'],
        HRESULT,
        'GapWidth',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2011), 'propput'],
        HRESULT,
        'GapWidth',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(2012), 'propget'],
        HRESULT,
        'Index',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2013), 'propget'],
        HRESULT,
        'Overlap',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2013), 'propput'],
        HRESULT,
        'Overlap',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(2014), 'propget'],
        HRESULT,
        'RadarAxisLabels',
        (['out', 'retval'], POINTER(POINTER(TickLabels)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2015), 'hidden', 'propget'],
        HRESULT,
        'Subtype',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2015), 'hidden', 'propput'],
        HRESULT,
        'Subtype',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(2016), 'hidden', 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2016), 'hidden', 'propput'],
        HRESULT,
        'Type',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(2017), 'propget'],
        HRESULT,
        'SecondPlotSize',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2017), 'propput'],
        HRESULT,
        'SecondPlotSize',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(2018)],
        HRESULT,
        'CategoryCollection',
        (['in', 'optional'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2019)],
        HRESULT,
        'FullCategoryCollection',
        (['in', 'optional'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2020), 'propget'],
        HRESULT,
        'BinsType',
        (['out', 'retval'], POINTER(XlBinsType), 'RHS')
    ),
    COMMETHOD(
        [dispid(2020), 'propput'],
        HRESULT,
        'BinsType',
        (['in'], XlBinsType, 'RHS')
    ),
    COMMETHOD(
        [dispid(2021), 'propget'],
        HRESULT,
        'BinWidthValue',
        (['out', 'retval'], POINTER(c_double), 'pval')
    ),
    COMMETHOD(
        [dispid(2021), 'propput'],
        HRESULT,
        'BinWidthValue',
        (['in'], c_double, 'pval')
    ),
    COMMETHOD(
        [dispid(2022), 'propget'],
        HRESULT,
        'BinsCountValue',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(2022), 'propput'],
        HRESULT,
        'BinsCountValue',
        (['in'], c_int, 'pval')
    ),
    COMMETHOD(
        [dispid(2023), 'propget'],
        HRESULT,
        'BinsOverflowEnabled',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pval')
    ),
    COMMETHOD(
        [dispid(2023), 'propput'],
        HRESULT,
        'BinsOverflowEnabled',
        (['in'], VARIANT_BOOL, 'pval')
    ),
    COMMETHOD(
        [dispid(2024), 'propget'],
        HRESULT,
        'BinsOverflowValue',
        (['out', 'retval'], POINTER(c_double), 'pval')
    ),
    COMMETHOD(
        [dispid(2024), 'propput'],
        HRESULT,
        'BinsOverflowValue',
        (['in'], c_double, 'pval')
    ),
    COMMETHOD(
        [dispid(2025), 'propget'],
        HRESULT,
        'BinsUnderflowEnabled',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pval')
    ),
    COMMETHOD(
        [dispid(2025), 'propput'],
        HRESULT,
        'BinsUnderflowEnabled',
        (['in'], VARIANT_BOOL, 'pval')
    ),
    COMMETHOD(
        [dispid(2026), 'propget'],
        HRESULT,
        'BinsUnderflowValue',
        (['out', 'retval'], POINTER(c_double), 'pval')
    ),
    COMMETHOD(
        [dispid(2026), 'propput'],
        HRESULT,
        'BinsUnderflowValue',
        (['in'], c_double, 'pval')
    ),
]

################################################################
# code template for ChartGroup implementation
# class ChartGroup_Impl(object):
#     @property
#     def DownBars(self):
#         '-no docstring-'
#         #return ppdownbars
#
#     @property
#     def DropLines(self):
#         '-no docstring-'
#         #return ppdroplines
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     HasDropLines = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     HasHiLoLines = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     HasRadarAxisLabels = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     HasSeriesLines = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     HasUpDownBars = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def HiLoLines(self):
#         '-no docstring-'
#         #return ppHiLoLines
#
#     def SeriesCollection(self, Index):
#         '-no docstring-'
#         #return ppSeriesCollection
#
#     @property
#     def SeriesLines(self):
#         '-no docstring-'
#         #return ppSeriesLines
#
#     @property
#     def UpBars(self):
#         '-no docstring-'
#         #return ppUpBars
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     VaryByCategories = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     SizeRepresents = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ShowNegativeBubbles = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     SplitType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     SplitValue = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Has3DShading = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     AxisGroup = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     BubbleScale = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     DoughnutHoleSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     FirstSliceAngle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     GapWidth = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Index(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Overlap = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def RadarAxisLabels(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Subtype = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Type = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     SecondPlotSize = property(_get, _set, doc = _set.__doc__)
#
#     def CategoryCollection(self, Index):
#         '-no docstring-'
#         #return RHS
#
#     def FullCategoryCollection(self, Index):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     BinsType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     BinWidthValue = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     BinsCountValue = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     BinsOverflowEnabled = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     BinsOverflowValue = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     BinsUnderflowEnabled = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     BinsUnderflowValue = property(_get, _set, doc = _set.__doc__)
#

Gridlines._methods_ = [
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'bstr')
    ),
    COMMETHOD(
        [dispid(235)],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppparent')
    ),
    COMMETHOD(
        [dispid(128), 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(ChartBorder)), 'ppborder')
    ),
    COMMETHOD(
        [dispid(117)],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(ChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2003)],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'Id'),
        (['out', 'retval'], POINTER(VARIANT), 'pValue')
    ),
    COMMETHOD(
        [dispid(2004)],
        HRESULT,
        'SetProperty',
        (['in'], BSTR, 'Id'),
        (['in'], VARIANT, 'Value')
    ),
]

################################################################
# code template for Gridlines implementation
# class Gridlines_Impl(object):
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return bstr
#
#     def Select(self):
#         '-no docstring-'
#         #return pvar
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppparent
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return ppborder
#
#     def Delete(self):
#         '-no docstring-'
#         #return pvar
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     def GetProperty(self, Id):
#         '-no docstring-'
#         #return pValue
#
#     def SetProperty(self, Id, Value):
#         '-no docstring-'
#         #return 
#


class ThemeVariants(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{9E116A3C-2C6D-4D07-93AF-8675D452FCA2}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Item(self, Index: hints.Incomplete) -> 'ThemeVariant': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)


Theme._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'ThemeVariants',
        (['out', 'retval'], POINTER(POINTER(ThemeVariants)), 'ThemeVariants')
    ),
]

################################################################
# code template for Theme implementation
# class Theme_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def ThemeVariants(self):
#         '-no docstring-'
#         #return ThemeVariants
#


class SoundEffect(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493472-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Name(self) -> hints.Incomplete: ...
        def _set_Name(self, Name: hints.Incomplete) -> hints.Hresult: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def _get_Type(self) -> hints.Incomplete: ...
        def _set_Type(self, Type: hints.Incomplete) -> hints.Hresult: ...
        Type = hints.normal_property(_get_Type, _set_Type)
        def ImportFromFile(self, FileName: hints.Incomplete) -> hints.Hresult: ...
        def Play(self) -> hints.Hresult: ...


ActionSetting._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Action',
        (['out', 'retval'], POINTER(PpActionType), 'Action')
    ),
    COMMETHOD(
        [dispid(2003), 'propput'],
        HRESULT,
        'Action',
        (['in'], PpActionType, 'Action')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'ActionVerb',
        (['out', 'retval'], POINTER(BSTR), 'ActionVerb')
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'ActionVerb',
        (['in'], BSTR, 'ActionVerb')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'AnimateAction',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'AnimateAction',
        )
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'AnimateAction',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'AnimateAction',
        )
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'Run',
        (['out', 'retval'], POINTER(BSTR), 'Run')
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'Run',
        (['in'], BSTR, 'Run')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'SlideShowName',
        (['out', 'retval'], POINTER(BSTR), 'SlideShowName')
    ),
    COMMETHOD(
        [dispid(2007), 'propput'],
        HRESULT,
        'SlideShowName',
        (['in'], BSTR, 'SlideShowName')
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'Hyperlink',
        (['out', 'retval'], POINTER(POINTER(Hyperlink)), 'Hyperlink')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'SoundEffect',
        (['out', 'retval'], POINTER(POINTER(SoundEffect)), 'SoundEffect')
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'ShowAndReturn',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'ShowAndReturn',
        )
    ),
    COMMETHOD(
        [dispid(2010), 'propput'],
        HRESULT,
        'ShowAndReturn',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'ShowAndReturn',
        )
    ),
]

################################################################
# code template for ActionSetting implementation
# class ActionSetting_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return Action
#     def _set(self, Action):
#         '-no docstring-'
#     Action = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ActionVerb
#     def _set(self, ActionVerb):
#         '-no docstring-'
#     ActionVerb = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return AnimateAction
#     def _set(self, AnimateAction):
#         '-no docstring-'
#     AnimateAction = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Run
#     def _set(self, Run):
#         '-no docstring-'
#     Run = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return SlideShowName
#     def _set(self, SlideShowName):
#         '-no docstring-'
#     SlideShowName = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Hyperlink(self):
#         '-no docstring-'
#         #return Hyperlink
#
#     @property
#     def SoundEffect(self):
#         '-no docstring-'
#         #return SoundEffect
#
#     def _get(self):
#         '-no docstring-'
#         #return ShowAndReturn
#     def _set(self, ShowAndReturn):
#         '-no docstring-'
#     ShowAndReturn = property(_get, _set, doc = _set.__doc__)
#


class ColorSchemes(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{9149346E-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Item(self, Index: hints.Incomplete) -> 'ColorScheme': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def Add(self, Scheme: hints.Incomplete = ...) -> 'ColorScheme': ...


ColorSchemes._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(ColorScheme)), 'Item')
    ),
    COMMETHOD(
        [dispid(2003)],
        HRESULT,
        'Add',
        (['in', 'optional'], POINTER(ColorScheme), 'Scheme', 0),
        (['out', 'retval'], POINTER(POINTER(ColorScheme)), 'Add')
    ),
]

################################################################
# code template for ColorSchemes implementation
# class ColorSchemes_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     def Add(self, Scheme):
#         '-no docstring-'
#         #return Add
#

ChartCharacters._methods_ = [
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(139), 'propget'],
        HRESULT,
        'Caption',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(139), 'propput'],
        HRESULT,
        'Caption',
        (['in'], BSTR, 'RHS')
    ),
    COMMETHOD(
        [dispid(118), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(117)],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(146), 'propget'],
        HRESULT,
        'Font',
        (['out', 'retval'], POINTER(POINTER(ChartFont)), 'RHS')
    ),
    COMMETHOD(
        [dispid(252)],
        HRESULT,
        'Insert',
        (['in'], BSTR, 'String'),
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(138), 'propget'],
        HRESULT,
        'Text',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(138), 'propput'],
        HRESULT,
        'Text',
        (['in'], BSTR, 'RHS')
    ),
    COMMETHOD(
        [dispid(1522), 'propget'],
        HRESULT,
        'PhoneticCharacters',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(1522), 'propput'],
        HRESULT,
        'PhoneticCharacters',
        (['in'], BSTR, 'RHS')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
]

################################################################
# code template for ChartCharacters implementation
# class ChartCharacters_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Caption = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return RHS
#
#     def Delete(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Font(self):
#         '-no docstring-'
#         #return RHS
#
#     def Insert(self, String):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Text = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     PhoneticCharacters = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#


class PrintRanges(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{9149345E-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def Add(self, Start: hints.Incomplete, End: hints.Incomplete) -> 'PrintRange': ...
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def ClearAll(self) -> hints.Hresult: ...
        def Item(self, Index: hints.Incomplete) -> 'PrintRange': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)


class PrintRange(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{9149345F-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Start(self) -> hints.Incomplete: ...
        Start = hints.normal_property(_get_Start)
        def _get_End(self) -> hints.Incomplete: ...
        End = hints.normal_property(_get_End)
        def Delete(self) -> hints.Hresult: ...


PrintRanges._methods_ = [
    COMMETHOD(
        [dispid(2001)],
        HRESULT,
        'Add',
        (['in'], c_int, 'Start'),
        (['in'], c_int, 'End'),
        (['out', 'retval'], POINTER(POINTER(PrintRange)), 'Add')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD([dispid(2003)], HRESULT, 'ClearAll'),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(PrintRange)), 'Item')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
]

################################################################
# code template for PrintRanges implementation
# class PrintRanges_Impl(object):
#     def Add(self, Start, End):
#         '-no docstring-'
#         #return Add
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     def ClearAll(self):
#         '-no docstring-'
#         #return 
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#

DownBars._methods_ = [
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'bstr')
    ),
    COMMETHOD(
        [dispid(235)],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppparent')
    ),
    COMMETHOD(
        [dispid(128), 'hidden', 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(ChartBorder)), 'ppborder')
    ),
    COMMETHOD(
        [dispid(117)],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(129), 'hidden', 'propget'],
        HRESULT,
        'Interior',
        (['out', 'retval'], POINTER(POINTER(Interior)), 'ppinterior')
    ),
    COMMETHOD(
        [dispid(1663), 'hidden', 'propget'],
        HRESULT,
        'Fill',
        (['out', 'retval'], POINTER(POINTER(ChartFillFormat)), 'ppFill')
    ),
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(ChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2003)],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'Id'),
        (['out', 'retval'], POINTER(VARIANT), 'pValue')
    ),
    COMMETHOD(
        [dispid(2004)],
        HRESULT,
        'SetProperty',
        (['in'], BSTR, 'Id'),
        (['in'], VARIANT, 'Value')
    ),
]

################################################################
# code template for DownBars implementation
# class DownBars_Impl(object):
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return bstr
#
#     def Select(self):
#         '-no docstring-'
#         #return pvar
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppparent
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return ppborder
#
#     def Delete(self):
#         '-no docstring-'
#         #return pvar
#
#     @property
#     def Interior(self):
#         '-no docstring-'
#         #return ppinterior
#
#     @property
#     def Fill(self):
#         '-no docstring-'
#         #return ppFill
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     def GetProperty(self, Id):
#         '-no docstring-'
#         #return pValue
#
#     def SetProperty(self, Id, Value):
#         '-no docstring-'
#         #return 
#


class ErrorBars(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A67-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def Select(self) -> hints.Incomplete: ...
        def _get_Border(self) -> 'ChartBorder': ...
        Border = hints.normal_property(_get_Border)
        def Delete(self) -> hints.Incomplete: ...
        def ClearFormats(self) -> hints.Incomplete: ...
        def _get_EndStyle(self) -> hints.Incomplete: ...
        def _set_EndStyle(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        EndStyle = hints.normal_property(_get_EndStyle, _set_EndStyle)
        def _get_Format(self) -> 'ChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def GetProperty(self, Id: hints.Incomplete) -> hints.Incomplete: ...
        def SetProperty(self, Id: hints.Incomplete, Value: hints.Incomplete) -> hints.Hresult: ...


ErrorBars._methods_ = [
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(235)],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(128), 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(ChartBorder)), 'RHS')
    ),
    COMMETHOD(
        [dispid(117)],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(112)],
        HRESULT,
        'ClearFormats',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(1124), 'propget'],
        HRESULT,
        'EndStyle',
        (['out', 'retval'], POINTER(XlEndStyleCap), 'RHS')
    ),
    COMMETHOD(
        [dispid(1124), 'propput'],
        HRESULT,
        'EndStyle',
        (['in'], XlEndStyleCap, 'RHS')
    ),
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(ChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2003)],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'Id'),
        (['out', 'retval'], POINTER(VARIANT), 'pValue')
    ),
    COMMETHOD(
        [dispid(2004)],
        HRESULT,
        'SetProperty',
        (['in'], BSTR, 'Id'),
        (['in'], VARIANT, 'Value')
    ),
]

################################################################
# code template for ErrorBars implementation
# class ErrorBars_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return RHS
#
#     def Select(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return RHS
#
#     def Delete(self):
#         '-no docstring-'
#         #return RHS
#
#     def ClearFormats(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     EndStyle = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     def GetProperty(self, Id):
#         '-no docstring-'
#         #return pValue
#
#     def SetProperty(self, Id, Value):
#         '-no docstring-'
#         #return 
#


class PublishObjects(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{914934CF-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Item(self, Index: hints.Incomplete) -> 'PublishObject': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)


class PublishObject(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934D0-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_HTMLVersion(self) -> hints.Incomplete: ...
        def _set_HTMLVersion(self, HTMLVersion: hints.Incomplete) -> hints.Hresult: ...
        HTMLVersion = hints.normal_property(_get_HTMLVersion, _set_HTMLVersion)
        def _get_SourceType(self) -> hints.Incomplete: ...
        def _set_SourceType(self, SourceType: hints.Incomplete) -> hints.Hresult: ...
        SourceType = hints.normal_property(_get_SourceType, _set_SourceType)
        def _get_RangeStart(self) -> hints.Incomplete: ...
        def _set_RangeStart(self, RangeStart: hints.Incomplete) -> hints.Hresult: ...
        RangeStart = hints.normal_property(_get_RangeStart, _set_RangeStart)
        def _get_RangeEnd(self) -> hints.Incomplete: ...
        def _set_RangeEnd(self, RangeEnd: hints.Incomplete) -> hints.Hresult: ...
        RangeEnd = hints.normal_property(_get_RangeEnd, _set_RangeEnd)
        def _get_SlideShowName(self) -> hints.Incomplete: ...
        def _set_SlideShowName(self, SlideShowName: hints.Incomplete) -> hints.Hresult: ...
        SlideShowName = hints.normal_property(_get_SlideShowName, _set_SlideShowName)
        def _get_SpeakerNotes(self) -> hints.Incomplete: ...
        def _set_SpeakerNotes(self, SpeakerNotes: hints.Incomplete) -> hints.Hresult: ...
        SpeakerNotes = hints.normal_property(_get_SpeakerNotes, _set_SpeakerNotes)
        def _get_FileName(self) -> hints.Incomplete: ...
        def _set_FileName(self, FileName: hints.Incomplete) -> hints.Hresult: ...
        FileName = hints.normal_property(_get_FileName, _set_FileName)
        def Publish(self) -> hints.Hresult: ...


PublishObjects._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(PublishObject)), 'Item')
    ),
]

################################################################
# code template for PublishObjects implementation
# class PublishObjects_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#

PrintRange._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Start',
        (['out', 'retval'], POINTER(c_int), 'Start')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'End',
        (['out', 'retval'], POINTER(c_int), 'End')
    ),
    COMMETHOD([dispid(2005)], HRESULT, 'Delete'),
]

################################################################
# code template for PrintRange implementation
# class PrintRange_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Start(self):
#         '-no docstring-'
#         #return Start
#
#     @property
#     def End(self):
#         '-no docstring-'
#         #return End
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#


class ThemeVariant(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{C9195677-B4F9-4228-BFD0-40C1F77D2F6A}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Width(self) -> hints.Incomplete: ...
        Width = hints.normal_property(_get_Width)
        def _get_Height(self) -> hints.Incomplete: ...
        Height = hints.normal_property(_get_Height)
        def _get_Id(self) -> hints.Incomplete: ...
        Id = hints.normal_property(_get_Id)


ThemeVariants._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(ThemeVariant)), 'Item')
    ),
]

################################################################
# code template for ThemeVariants implementation
# class ThemeVariants_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#


class LeaderLines(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A6D-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def Select(self) -> hints.Hresult: ...
        def _get_Border(self) -> 'ChartBorder': ...
        Border = hints.normal_property(_get_Border)
        def Delete(self) -> hints.Hresult: ...
        def _get_Format(self) -> 'ChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)


LeaderLines._methods_ = [
    COMMETHOD([dispid(235)], HRESULT, 'Select'),
    COMMETHOD(
        [dispid(128), 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(ChartBorder)), 'ppborder')
    ),
    COMMETHOD([dispid(117)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(ChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
]

################################################################
# code template for LeaderLines implementation
# class LeaderLines_Impl(object):
#     def Select(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return ppborder
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#


class Sequence(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{914934DE-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Item(self, Index: hints.Incomplete) -> 'Effect': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def AddEffect(self, Shape: hints.Incomplete, effectId: hints.Incomplete, Level: hints.Incomplete = ..., trigger: hints.Incomplete = ..., Index: hints.Incomplete = ...) -> 'Effect': ...
        def Clone(self, Effect: hints.Incomplete, Index: hints.Incomplete = ...) -> 'Effect': ...
        def FindFirstAnimationFor(self, Shape: hints.Incomplete) -> 'Effect': ...
        def FindFirstAnimationForClick(self, click: hints.Incomplete) -> 'Effect': ...
        def ConvertToBuildLevel(self, Effect: hints.Incomplete, Level: hints.Incomplete) -> 'Effect': ...
        def ConvertToAfterEffect(self, Effect: hints.Incomplete, After: hints.Incomplete, DimColor: hints.Incomplete = ..., DimSchemeColor: hints.Incomplete = ...) -> 'Effect': ...
        def ConvertToAnimateBackground(self, Effect: hints.Incomplete, AnimateBackground: hints.Incomplete) -> 'Effect': ...
        def ConvertToAnimateInReverse(self, Effect: hints.Incomplete, animateInReverse: hints.Incomplete) -> 'Effect': ...
        def ConvertToTextUnitEffect(self, Effect: hints.Incomplete, unitEffect: hints.Incomplete) -> 'Effect': ...
        def AddTriggerEffect(self, pShape: hints.Incomplete, effectId: hints.Incomplete, trigger: hints.Incomplete, pTriggerShape: hints.Incomplete, bookmark: hints.Incomplete = ..., Level: hints.Incomplete = ...) -> 'Effect': ...


class Sequences(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{914934DD-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Item(self, Index: hints.Incomplete) -> 'Sequence': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def Add(self, Index: hints.Incomplete = ...) -> 'Sequence': ...


TimeLine._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'MainSequence',
        (['out', 'retval'], POINTER(POINTER(Sequence)), 'MainSequence')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'InteractiveSequences',
        (['out', 'retval'], POINTER(POINTER(Sequences)), 'InteractiveSequences')
    ),
]

################################################################
# code template for TimeLine implementation
# class TimeLine_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def MainSequence(self):
#         '-no docstring-'
#         #return MainSequence
#
#     @property
#     def InteractiveSequences(self):
#         '-no docstring-'
#         #return InteractiveSequences
#


class ExtraColors(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{91493468-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Item(self, Index: hints.Incomplete) -> hints.Incomplete: ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def Add(self, Type: hints.Incomplete) -> hints.Hresult: ...
        def Clear(self) -> hints.Hresult: ...


ExtraColors._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoRGBType),
            'Item',
        )
    ),
    COMMETHOD(
        [dispid(2003)],
        HRESULT,
        'Add',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoRGBType,
            'Type',
        )
    ),
    COMMETHOD([dispid(2004)], HRESULT, 'Clear'),
]

################################################################
# code template for ExtraColors implementation
# class ExtraColors_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     def Add(self, Type):
#         '-no docstring-'
#         #return 
#
#     def Clear(self):
#         '-no docstring-'
#         #return 
#


class DataLabels(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A62-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def Select(self) -> hints.Incomplete: ...
        def _get_Border(self) -> 'ChartBorder': ...
        Border = hints.normal_property(_get_Border)
        def Delete(self) -> hints.Incomplete: ...
        def _get_Interior(self) -> 'Interior': ...
        Interior = hints.normal_property(_get_Interior)
        def _get_Fill(self) -> 'ChartFillFormat': ...
        Fill = hints.normal_property(_get_Fill)
        def _get_Font(self) -> 'ChartFont': ...
        Font = hints.normal_property(_get_Font)
        def _get_HorizontalAlignment(self) -> hints.Incomplete: ...
        def _set_HorizontalAlignment(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        HorizontalAlignment = hints.normal_property(_get_HorizontalAlignment, _set_HorizontalAlignment)
        def _get_Orientation(self) -> hints.Incomplete: ...
        def _set_Orientation(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Orientation = hints.normal_property(_get_Orientation, _set_Orientation)
        def _get_Shadow(self) -> hints.Incomplete: ...
        def _set_Shadow(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Shadow = hints.normal_property(_get_Shadow, _set_Shadow)
        def _get_VerticalAlignment(self) -> hints.Incomplete: ...
        def _set_VerticalAlignment(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        VerticalAlignment = hints.normal_property(_get_VerticalAlignment, _set_VerticalAlignment)
        def _get_ReadingOrder(self) -> hints.Incomplete: ...
        def _set_ReadingOrder(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ReadingOrder = hints.normal_property(_get_ReadingOrder, _set_ReadingOrder)
        def _get_AutoScaleFont(self) -> hints.Incomplete: ...
        def _set_AutoScaleFont(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        AutoScaleFont = hints.normal_property(_get_AutoScaleFont, _set_AutoScaleFont)
        def _get_AutoText(self) -> hints.Incomplete: ...
        def _set_AutoText(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        AutoText = hints.normal_property(_get_AutoText, _set_AutoText)
        def _get_NumberFormat(self) -> hints.Incomplete: ...
        def _set_NumberFormat(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        NumberFormat = hints.normal_property(_get_NumberFormat, _set_NumberFormat)
        def _get_NumberFormatLinked(self) -> hints.Incomplete: ...
        def _set_NumberFormatLinked(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        NumberFormatLinked = hints.normal_property(_get_NumberFormatLinked, _set_NumberFormatLinked)
        def _get_NumberFormatLocal(self) -> hints.Incomplete: ...
        def _set_NumberFormatLocal(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        NumberFormatLocal = hints.normal_property(_get_NumberFormatLocal, _set_NumberFormatLocal)
        def _get_ShowLegendKey(self) -> hints.Incomplete: ...
        def _set_ShowLegendKey(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ShowLegendKey = hints.normal_property(_get_ShowLegendKey, _set_ShowLegendKey)
        def _get_Type(self) -> hints.Incomplete: ...
        def _set_Type(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Type = hints.normal_property(_get_Type, _set_Type)
        def _get_Position(self) -> hints.Incomplete: ...
        def _set_Position(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Position = hints.normal_property(_get_Position, _set_Position)
        def _get_ShowSeriesName(self) -> hints.Incomplete: ...
        def _set_ShowSeriesName(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ShowSeriesName = hints.normal_property(_get_ShowSeriesName, _set_ShowSeriesName)
        def _get_ShowCategoryName(self) -> hints.Incomplete: ...
        def _set_ShowCategoryName(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ShowCategoryName = hints.normal_property(_get_ShowCategoryName, _set_ShowCategoryName)
        def _get_ShowValue(self) -> hints.Incomplete: ...
        def _set_ShowValue(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ShowValue = hints.normal_property(_get_ShowValue, _set_ShowValue)
        def _get_ShowPercentage(self) -> hints.Incomplete: ...
        def _set_ShowPercentage(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ShowPercentage = hints.normal_property(_get_ShowPercentage, _set_ShowPercentage)
        def _get_ShowBubbleSize(self) -> hints.Incomplete: ...
        def _set_ShowBubbleSize(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ShowBubbleSize = hints.normal_property(_get_ShowBubbleSize, _set_ShowBubbleSize)
        def _get_Separator(self) -> hints.Incomplete: ...
        def _set_Separator(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Separator = hints.normal_property(_get_Separator, _set_Separator)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Item(self, Index: hints.Incomplete) -> 'DataLabel': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _NewEnum(self) -> hints.Incomplete: ...
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def _get_Format(self) -> 'ChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _Default(self, Index: hints.Incomplete) -> 'DataLabel': ...
        def Propagate(self, Index: hints.Incomplete) -> hints.Hresult: ...
        def _get_ShowRange(self) -> hints.Incomplete: ...
        def _set_ShowRange(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ShowRange = hints.normal_property(_get_ShowRange, _set_ShowRange)
        def GetProperty(self, Id: hints.Incomplete) -> hints.Incomplete: ...
        def SetProperty(self, Id: hints.Incomplete, Value: hints.Incomplete) -> hints.Hresult: ...


DataLabels._methods_ = [
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(235)],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(128), 'hidden', 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(ChartBorder)), 'RHS')
    ),
    COMMETHOD(
        [dispid(117)],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(129), 'hidden', 'propget'],
        HRESULT,
        'Interior',
        (['out', 'retval'], POINTER(POINTER(Interior)), 'RHS')
    ),
    COMMETHOD(
        [dispid(1663), 'hidden', 'propget'],
        HRESULT,
        'Fill',
        (['out', 'retval'], POINTER(POINTER(ChartFillFormat)), 'RHS')
    ),
    COMMETHOD(
        [dispid(146), 'hidden', 'propget'],
        HRESULT,
        'Font',
        (['out', 'retval'], POINTER(POINTER(ChartFont)), 'RHS')
    ),
    COMMETHOD(
        [dispid(136), 'propget'],
        HRESULT,
        'HorizontalAlignment',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(136), 'propput'],
        HRESULT,
        'HorizontalAlignment',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(134), 'propget'],
        HRESULT,
        'Orientation',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(134), 'propput'],
        HRESULT,
        'Orientation',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'Shadow',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(103), 'propput'],
        HRESULT,
        'Shadow',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(137), 'propget'],
        HRESULT,
        'VerticalAlignment',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(137), 'propput'],
        HRESULT,
        'VerticalAlignment',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(975), 'propget'],
        HRESULT,
        'ReadingOrder',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(975), 'propput'],
        HRESULT,
        'ReadingOrder',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(1525), 'hidden', 'propget'],
        HRESULT,
        'AutoScaleFont',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(1525), 'hidden', 'propput'],
        HRESULT,
        'AutoScaleFont',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(135), 'propget'],
        HRESULT,
        'AutoText',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(135), 'propput'],
        HRESULT,
        'AutoText',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(193), 'propget'],
        HRESULT,
        'NumberFormat',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(193), 'propput'],
        HRESULT,
        'NumberFormat',
        (['in'], BSTR, 'RHS')
    ),
    COMMETHOD(
        [dispid(194), 'propget'],
        HRESULT,
        'NumberFormatLinked',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(194), 'propput'],
        HRESULT,
        'NumberFormatLinked',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(1097), 'propget'],
        HRESULT,
        'NumberFormatLocal',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(1097), 'propput'],
        HRESULT,
        'NumberFormatLocal',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(171), 'propget'],
        HRESULT,
        'ShowLegendKey',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(171), 'propput'],
        HRESULT,
        'ShowLegendKey',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(108), 'hidden', 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(108), 'hidden', 'propput'],
        HRESULT,
        'Type',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(133), 'propget'],
        HRESULT,
        'Position',
        (['out', 'retval'], POINTER(XlDataLabelPosition), 'RHS')
    ),
    COMMETHOD(
        [dispid(133), 'propput'],
        HRESULT,
        'Position',
        (['in'], XlDataLabelPosition, 'RHS')
    ),
    COMMETHOD(
        [dispid(2022), 'propget'],
        HRESULT,
        'ShowSeriesName',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2022), 'propput'],
        HRESULT,
        'ShowSeriesName',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2023), 'propget'],
        HRESULT,
        'ShowCategoryName',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2023), 'propput'],
        HRESULT,
        'ShowCategoryName',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2024), 'propget'],
        HRESULT,
        'ShowValue',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2024), 'propput'],
        HRESULT,
        'ShowValue',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2025), 'propget'],
        HRESULT,
        'ShowPercentage',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2025), 'propput'],
        HRESULT,
        'ShowPercentage',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2026), 'propget'],
        HRESULT,
        'ShowBubbleSize',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2026), 'propput'],
        HRESULT,
        'ShowBubbleSize',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2027), 'propget'],
        HRESULT,
        'Separator',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2027), 'propput'],
        HRESULT,
        'Separator',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(118), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(170)],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(DataLabel)), 'RHS')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(ChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(0), 'nonbrowsable'],
        HRESULT,
        '_Default',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(DataLabel)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2028)],
        HRESULT,
        'Propagate',
        (['in'], VARIANT, 'Index')
    ),
    COMMETHOD(
        [dispid(2029), 'propget'],
        HRESULT,
        'ShowRange',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2029), 'propput'],
        HRESULT,
        'ShowRange',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2030)],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'Id'),
        (['out', 'retval'], POINTER(VARIANT), 'pValue')
    ),
    COMMETHOD(
        [dispid(2031)],
        HRESULT,
        'SetProperty',
        (['in'], BSTR, 'Id'),
        (['in'], VARIANT, 'Value')
    ),
]

################################################################
# code template for DataLabels implementation
# class DataLabels_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return RHS
#
#     def Select(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return RHS
#
#     def Delete(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Interior(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Fill(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Font(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     HorizontalAlignment = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Orientation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Shadow = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     VerticalAlignment = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ReadingOrder = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     AutoScaleFont = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     AutoText = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     NumberFormat = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     NumberFormatLinked = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     NumberFormatLocal = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ShowLegendKey = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Type = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Position = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ShowSeriesName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ShowCategoryName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ShowValue = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ShowPercentage = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ShowBubbleSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Separator = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return RHS
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return RHS
#
#     def _NewEnum(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     def _Default(self, Index):
#         '-no docstring-'
#         #return RHS
#
#     def Propagate(self, Index):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ShowRange = property(_get, _set, doc = _set.__doc__)
#
#     def GetProperty(self, Id):
#         '-no docstring-'
#         #return pValue
#
#     def SetProperty(self, Id, Value):
#         '-no docstring-'
#         #return 
#


class BulletFormat(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493497-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Visible(self) -> hints.Incomplete: ...
        def _set_Visible(self, Visible: hints.Incomplete) -> hints.Hresult: ...
        Visible = hints.normal_property(_get_Visible, _set_Visible)
        def _get_Character(self) -> hints.Incomplete: ...
        def _set_Character(self, Character: hints.Incomplete) -> hints.Hresult: ...
        Character = hints.normal_property(_get_Character, _set_Character)
        def _get_RelativeSize(self) -> hints.Incomplete: ...
        def _set_RelativeSize(self, RelativeSize: hints.Incomplete) -> hints.Hresult: ...
        RelativeSize = hints.normal_property(_get_RelativeSize, _set_RelativeSize)
        def _get_UseTextColor(self) -> hints.Incomplete: ...
        def _set_UseTextColor(self, UseTextColor: hints.Incomplete) -> hints.Hresult: ...
        UseTextColor = hints.normal_property(_get_UseTextColor, _set_UseTextColor)
        def _get_UseTextFont(self) -> hints.Incomplete: ...
        def _set_UseTextFont(self, UseTextFont: hints.Incomplete) -> hints.Hresult: ...
        UseTextFont = hints.normal_property(_get_UseTextFont, _set_UseTextFont)
        def _get_Font(self) -> 'Font': ...
        Font = hints.normal_property(_get_Font)
        def _get_Type(self) -> hints.Incomplete: ...
        def _set_Type(self, Type: hints.Incomplete) -> hints.Hresult: ...
        Type = hints.normal_property(_get_Type, _set_Type)
        def _get_Style(self) -> hints.Incomplete: ...
        def _set_Style(self, Style: hints.Incomplete) -> hints.Hresult: ...
        Style = hints.normal_property(_get_Style, _set_Style)
        def _get_StartValue(self) -> hints.Incomplete: ...
        def _set_StartValue(self, StartValue: hints.Incomplete) -> hints.Hresult: ...
        StartValue = hints.normal_property(_get_StartValue, _set_StartValue)
        def Picture(self, Picture: hints.Incomplete) -> hints.Hresult: ...
        def _get_Number(self) -> hints.Incomplete: ...
        Number = hints.normal_property(_get_Number)



BulletFormat._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(0), 'hidden', 'propget'],
        HRESULT,
        'Visible',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Visible',
        )
    ),
    COMMETHOD(
        [dispid(0), 'hidden', 'propput'],
        HRESULT,
        'Visible',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Visible',
        )
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Character',
        (['out', 'retval'], POINTER(c_int), 'Character')
    ),
    COMMETHOD(
        [dispid(2003), 'propput'],
        HRESULT,
        'Character',
        (['in'], c_int, 'Character')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'RelativeSize',
        (['out', 'retval'], POINTER(c_float), 'RelativeSize')
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'RelativeSize',
        (['in'], c_float, 'RelativeSize')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'UseTextColor',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'UseTextColor',
        )
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'UseTextColor',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'UseTextColor',
        )
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'UseTextFont',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'UseTextFont',
        )
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'UseTextFont',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'UseTextFont',
        )
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'Font',
        (['out', 'retval'], POINTER(POINTER(Font)), 'Font')
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(PpBulletType), 'Type')
    ),
    COMMETHOD(
        [dispid(2008), 'propput'],
        HRESULT,
        'Type',
        (['in'], PpBulletType, 'Type')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'Style',
        (['out', 'retval'], POINTER(PpNumberedBulletStyle), 'Style')
    ),
    COMMETHOD(
        [dispid(2009), 'propput'],
        HRESULT,
        'Style',
        (['in'], PpNumberedBulletStyle, 'Style')
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'StartValue',
        (['out', 'retval'], POINTER(c_int), 'StartValue')
    ),
    COMMETHOD(
        [dispid(2010), 'propput'],
        HRESULT,
        'StartValue',
        (['in'], c_int, 'StartValue')
    ),
    COMMETHOD(
        [dispid(2011)],
        HRESULT,
        'Picture',
        (['in'], BSTR, 'Picture')
    ),
    COMMETHOD(
        [dispid(2012), 'propget'],
        HRESULT,
        'Number',
        (['out', 'retval'], POINTER(c_int), 'Number')
    ),
]

################################################################
# code template for BulletFormat implementation
# class BulletFormat_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return Visible
#     def _set(self, Visible):
#         '-no docstring-'
#     Visible = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Character
#     def _set(self, Character):
#         '-no docstring-'
#     Character = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RelativeSize
#     def _set(self, RelativeSize):
#         '-no docstring-'
#     RelativeSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return UseTextColor
#     def _set(self, UseTextColor):
#         '-no docstring-'
#     UseTextColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return UseTextFont
#     def _set(self, UseTextFont):
#         '-no docstring-'
#     UseTextFont = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Font(self):
#         '-no docstring-'
#         #return Font
#
#     def _get(self):
#         '-no docstring-'
#         #return Type
#     def _set(self, Type):
#         '-no docstring-'
#     Type = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Style
#     def _set(self, Style):
#         '-no docstring-'
#     Style = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return StartValue
#     def _set(self, StartValue):
#         '-no docstring-'
#     StartValue = property(_get, _set, doc = _set.__doc__)
#
#     def Picture(self, Picture):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Number(self):
#         '-no docstring-'
#         #return Number
#

PublishObject._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'HTMLVersion',
        (['out', 'retval'], POINTER(PpHTMLVersion), 'HTMLVersion')
    ),
    COMMETHOD(
        [dispid(2003), 'propput'],
        HRESULT,
        'HTMLVersion',
        (['in'], PpHTMLVersion, 'HTMLVersion')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'SourceType',
        (['out', 'retval'], POINTER(PpPublishSourceType), 'SourceType')
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'SourceType',
        (['in'], PpPublishSourceType, 'SourceType')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'RangeStart',
        (['out', 'retval'], POINTER(c_int), 'RangeStart')
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'RangeStart',
        (['in'], c_int, 'RangeStart')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'RangeEnd',
        (['out', 'retval'], POINTER(c_int), 'RangeEnd')
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'RangeEnd',
        (['in'], c_int, 'RangeEnd')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'SlideShowName',
        (['out', 'retval'], POINTER(BSTR), 'SlideShowName')
    ),
    COMMETHOD(
        [dispid(2007), 'propput'],
        HRESULT,
        'SlideShowName',
        (['in'], BSTR, 'SlideShowName')
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'SpeakerNotes',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'SpeakerNotes',
        )
    ),
    COMMETHOD(
        [dispid(2008), 'propput'],
        HRESULT,
        'SpeakerNotes',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'SpeakerNotes',
        )
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'FileName',
        (['out', 'retval'], POINTER(BSTR), 'FileName')
    ),
    COMMETHOD(
        [dispid(2009), 'propput'],
        HRESULT,
        'FileName',
        (['in'], BSTR, 'FileName')
    ),
    COMMETHOD([dispid(2010)], HRESULT, 'Publish'),
]

################################################################
# code template for PublishObject implementation
# class PublishObject_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return HTMLVersion
#     def _set(self, HTMLVersion):
#         '-no docstring-'
#     HTMLVersion = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return SourceType
#     def _set(self, SourceType):
#         '-no docstring-'
#     SourceType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RangeStart
#     def _set(self, RangeStart):
#         '-no docstring-'
#     RangeStart = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RangeEnd
#     def _set(self, RangeEnd):
#         '-no docstring-'
#     RangeEnd = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return SlideShowName
#     def _set(self, SlideShowName):
#         '-no docstring-'
#     SlideShowName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return SpeakerNotes
#     def _set(self, SpeakerNotes):
#         '-no docstring-'
#     SpeakerNotes = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return FileName
#     def _set(self, FileName):
#         '-no docstring-'
#     FileName = property(_get, _set, doc = _set.__doc__)
#
#     def Publish(self):
#         '-no docstring-'
#         #return 
#

ThemeVariant._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_int), 'Width')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_int), 'Height')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'Id',
        (['out', 'retval'], POINTER(BSTR), 'Id')
    ),
]

################################################################
# code template for ThemeVariant implementation
# class ThemeVariant_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return Name
#
#     @property
#     def Width(self):
#         '-no docstring-'
#         #return Width
#
#     @property
#     def Height(self):
#         '-no docstring-'
#         #return Height
#
#     @property
#     def Id(self):
#         '-no docstring-'
#         #return Id
#


class ObjectVerbs(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{9149348A-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Item(self, Index: hints.Incomplete) -> hints.Incomplete: ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)


OLEFormat._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'ObjectVerbs',
        (['out', 'retval'], POINTER(POINTER(ObjectVerbs)), 'ObjectVerbs')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Object',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Object')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'ProgID',
        (['out', 'retval'], POINTER(BSTR), 'ProgID')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'FollowColors',
        (['out', 'retval'], POINTER(PpFollowColors), 'FollowColors')
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'FollowColors',
        (['in'], PpFollowColors, 'FollowColors')
    ),
    COMMETHOD(
        [dispid(2007)],
        HRESULT,
        'DoVerb',
        (['in', 'optional'], c_int, 'Index', 0)
    ),
    COMMETHOD([dispid(2008)], HRESULT, 'Activate'),
]

################################################################
# code template for OLEFormat implementation
# class OLEFormat_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def ObjectVerbs(self):
#         '-no docstring-'
#         #return ObjectVerbs
#
#     @property
#     def Object(self):
#         '-no docstring-'
#         #return Object
#
#     @property
#     def ProgID(self):
#         '-no docstring-'
#         #return ProgID
#
#     def _get(self):
#         '-no docstring-'
#         #return FollowColors
#     def _set(self, FollowColors):
#         '-no docstring-'
#     FollowColors = property(_get, _set, doc = _set.__doc__)
#
#     def DoVerb(self, Index):
#         '-no docstring-'
#         #return 
#
#     def Activate(self):
#         '-no docstring-'
#         #return 
#

Hyperlink._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Type',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoHyperlinkType),
            'Type',
        )
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Address',
        (['out', 'retval'], POINTER(BSTR), 'Address')
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'Address',
        (['in'], BSTR, 'Address')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'SubAddress',
        (['out', 'retval'], POINTER(BSTR), 'SubAddress')
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'SubAddress',
        (['in'], BSTR, 'SubAddress')
    ),
    COMMETHOD([dispid(2006)], HRESULT, 'AddToFavorites'),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'EmailSubject',
        (['out', 'retval'], POINTER(BSTR), 'EmailSubject')
    ),
    COMMETHOD(
        [dispid(2007), 'propput'],
        HRESULT,
        'EmailSubject',
        (['in'], BSTR, 'EmailSubject')
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'ScreenTip',
        (['out', 'retval'], POINTER(BSTR), 'ScreenTip')
    ),
    COMMETHOD(
        [dispid(2008), 'propput'],
        HRESULT,
        'ScreenTip',
        (['in'], BSTR, 'ScreenTip')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'TextToDisplay',
        (['out', 'retval'], POINTER(BSTR), 'TextToDisplay')
    ),
    COMMETHOD(
        [dispid(2009), 'propput'],
        HRESULT,
        'TextToDisplay',
        (['in'], BSTR, 'TextToDisplay')
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'ShowAndReturn',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'ShowAndReturn',
        )
    ),
    COMMETHOD(
        [dispid(2010), 'propput'],
        HRESULT,
        'ShowAndReturn',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'ShowAndReturn',
        )
    ),
    COMMETHOD([dispid(2011)], HRESULT, 'Follow'),
    COMMETHOD(
        [dispid(2012)],
        HRESULT,
        'CreateNewDocument',
        (['in'], BSTR, 'FileName'),
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'EditNow',
        ),
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Overwrite',
        )
    ),
    COMMETHOD([dispid(2013)], HRESULT, 'Delete'),
]

################################################################
# code template for Hyperlink implementation
# class Hyperlink_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Type(self):
#         '-no docstring-'
#         #return Type
#
#     def _get(self):
#         '-no docstring-'
#         #return Address
#     def _set(self, Address):
#         '-no docstring-'
#     Address = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return SubAddress
#     def _set(self, SubAddress):
#         '-no docstring-'
#     SubAddress = property(_get, _set, doc = _set.__doc__)
#
#     def AddToFavorites(self):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return EmailSubject
#     def _set(self, EmailSubject):
#         '-no docstring-'
#     EmailSubject = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ScreenTip
#     def _set(self, ScreenTip):
#         '-no docstring-'
#     ScreenTip = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return TextToDisplay
#     def _set(self, TextToDisplay):
#         '-no docstring-'
#     TextToDisplay = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ShowAndReturn
#     def _set(self, ShowAndReturn):
#         '-no docstring-'
#     ShowAndReturn = property(_get, _set, doc = _set.__doc__)
#
#     def Follow(self):
#         '-no docstring-'
#         #return 
#
#     def CreateNewDocument(self, FileName, EditNow, Overwrite):
#         '-no docstring-'
#         #return 
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#

Placeholders._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Item')
    ),
    COMMETHOD(
        [dispid(2003)],
        HRESULT,
        'FindByName',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'FindByName')
    ),
]

################################################################
# code template for Placeholders implementation
# class Placeholders_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     def FindByName(self, Index):
#         '-no docstring-'
#         #return FindByName
#


class SlideShowSettings(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{9149345A-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_PointerColor(self) -> 'ColorFormat': ...
        PointerColor = hints.normal_property(_get_PointerColor)
        def _get_NamedSlideShows(self) -> 'NamedSlideShows': ...
        NamedSlideShows = hints.normal_property(_get_NamedSlideShows)
        def _get_StartingSlide(self) -> hints.Incomplete: ...
        def _set_StartingSlide(self, StartingSlide: hints.Incomplete) -> hints.Hresult: ...
        StartingSlide = hints.normal_property(_get_StartingSlide, _set_StartingSlide)
        def _get_EndingSlide(self) -> hints.Incomplete: ...
        def _set_EndingSlide(self, EndingSlide: hints.Incomplete) -> hints.Hresult: ...
        EndingSlide = hints.normal_property(_get_EndingSlide, _set_EndingSlide)
        def _get_AdvanceMode(self) -> hints.Incomplete: ...
        def _set_AdvanceMode(self, AdvanceMode: hints.Incomplete) -> hints.Hresult: ...
        AdvanceMode = hints.normal_property(_get_AdvanceMode, _set_AdvanceMode)
        def Run(self) -> 'SlideShowWindow': ...
        def _get_LoopUntilStopped(self) -> hints.Incomplete: ...
        def _set_LoopUntilStopped(self, LoopUntilStopped: hints.Incomplete) -> hints.Hresult: ...
        LoopUntilStopped = hints.normal_property(_get_LoopUntilStopped, _set_LoopUntilStopped)
        def _get_ShowType(self) -> hints.Incomplete: ...
        def _set_ShowType(self, ShowType: hints.Incomplete) -> hints.Hresult: ...
        ShowType = hints.normal_property(_get_ShowType, _set_ShowType)
        def _get_ShowWithNarration(self) -> hints.Incomplete: ...
        def _set_ShowWithNarration(self, ShowWithNarration: hints.Incomplete) -> hints.Hresult: ...
        ShowWithNarration = hints.normal_property(_get_ShowWithNarration, _set_ShowWithNarration)
        def _get_ShowWithAnimation(self) -> hints.Incomplete: ...
        def _set_ShowWithAnimation(self, ShowWithAnimation: hints.Incomplete) -> hints.Hresult: ...
        ShowWithAnimation = hints.normal_property(_get_ShowWithAnimation, _set_ShowWithAnimation)
        def _get_SlideShowName(self) -> hints.Incomplete: ...
        def _set_SlideShowName(self, SlideShowName: hints.Incomplete) -> hints.Hresult: ...
        SlideShowName = hints.normal_property(_get_SlideShowName, _set_SlideShowName)
        def _get_RangeType(self) -> hints.Incomplete: ...
        def _set_RangeType(self, RangeType: hints.Incomplete) -> hints.Hresult: ...
        RangeType = hints.normal_property(_get_RangeType, _set_RangeType)
        def _get_ShowScrollbar(self) -> hints.Incomplete: ...
        def _set_ShowScrollbar(self, ShowScrollbar: hints.Incomplete) -> hints.Hresult: ...
        ShowScrollbar = hints.normal_property(_get_ShowScrollbar, _set_ShowScrollbar)
        def _get_ShowPresenterView(self) -> hints.Incomplete: ...
        def _set_ShowPresenterView(self, ShowPresenterView: hints.Incomplete) -> hints.Hresult: ...
        ShowPresenterView = hints.normal_property(_get_ShowPresenterView, _set_ShowPresenterView)
        def _get_ShowMediaControls(self) -> hints.Incomplete: ...
        def _set_ShowMediaControls(self, ShowMediaControls: hints.Incomplete) -> hints.Hresult: ...
        ShowMediaControls = hints.normal_property(_get_ShowMediaControls, _set_ShowMediaControls)


class NamedSlideShows(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{9149345B-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Item(self, Index: hints.Incomplete) -> 'NamedSlideShow': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def Add(self, Name: hints.Incomplete, safeArrayOfSlideIDs: hints.Incomplete) -> 'NamedSlideShow': ...


SlideShowSettings._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'PointerColor',
        (['out', 'retval'], POINTER(POINTER(ColorFormat)), 'PointerColor')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'NamedSlideShows',
        (
            ['out', 'retval'],
            POINTER(POINTER(NamedSlideShows)),
            'NamedSlideShows',
        )
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'StartingSlide',
        (['out', 'retval'], POINTER(c_int), 'StartingSlide')
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'StartingSlide',
        (['in'], c_int, 'StartingSlide')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'EndingSlide',
        (['out', 'retval'], POINTER(c_int), 'EndingSlide')
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'EndingSlide',
        (['in'], c_int, 'EndingSlide')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'AdvanceMode',
        (['out', 'retval'], POINTER(PpSlideShowAdvanceMode), 'AdvanceMode')
    ),
    COMMETHOD(
        [dispid(2007), 'propput'],
        HRESULT,
        'AdvanceMode',
        (['in'], PpSlideShowAdvanceMode, 'AdvanceMode')
    ),
    COMMETHOD(
        [dispid(2008)],
        HRESULT,
        'Run',
        (['out', 'retval'], POINTER(POINTER(SlideShowWindow)), 'Run')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'LoopUntilStopped',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'LoopUntilStopped',
        )
    ),
    COMMETHOD(
        [dispid(2009), 'propput'],
        HRESULT,
        'LoopUntilStopped',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'LoopUntilStopped',
        )
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'ShowType',
        (['out', 'retval'], POINTER(PpSlideShowType), 'ShowType')
    ),
    COMMETHOD(
        [dispid(2010), 'propput'],
        HRESULT,
        'ShowType',
        (['in'], PpSlideShowType, 'ShowType')
    ),
    COMMETHOD(
        [dispid(2011), 'propget'],
        HRESULT,
        'ShowWithNarration',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'ShowWithNarration',
        )
    ),
    COMMETHOD(
        [dispid(2011), 'propput'],
        HRESULT,
        'ShowWithNarration',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'ShowWithNarration',
        )
    ),
    COMMETHOD(
        [dispid(2012), 'propget'],
        HRESULT,
        'ShowWithAnimation',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'ShowWithAnimation',
        )
    ),
    COMMETHOD(
        [dispid(2012), 'propput'],
        HRESULT,
        'ShowWithAnimation',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'ShowWithAnimation',
        )
    ),
    COMMETHOD(
        [dispid(2013), 'propget'],
        HRESULT,
        'SlideShowName',
        (['out', 'retval'], POINTER(BSTR), 'SlideShowName')
    ),
    COMMETHOD(
        [dispid(2013), 'propput'],
        HRESULT,
        'SlideShowName',
        (['in'], BSTR, 'SlideShowName')
    ),
    COMMETHOD(
        [dispid(2014), 'propget'],
        HRESULT,
        'RangeType',
        (['out', 'retval'], POINTER(PpSlideShowRangeType), 'RangeType')
    ),
    COMMETHOD(
        [dispid(2014), 'propput'],
        HRESULT,
        'RangeType',
        (['in'], PpSlideShowRangeType, 'RangeType')
    ),
    COMMETHOD(
        [dispid(2015), 'propget'],
        HRESULT,
        'ShowScrollbar',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'ShowScrollbar',
        )
    ),
    COMMETHOD(
        [dispid(2015), 'propput'],
        HRESULT,
        'ShowScrollbar',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'ShowScrollbar',
        )
    ),
    COMMETHOD(
        [dispid(2016), 'propget'],
        HRESULT,
        'ShowPresenterView',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'ShowPresenterView',
        )
    ),
    COMMETHOD(
        [dispid(2016), 'propput'],
        HRESULT,
        'ShowPresenterView',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'ShowPresenterView',
        )
    ),
    COMMETHOD(
        [dispid(2017), 'propget'],
        HRESULT,
        'ShowMediaControls',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'ShowMediaControls',
        )
    ),
    COMMETHOD(
        [dispid(2017), 'propput'],
        HRESULT,
        'ShowMediaControls',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'ShowMediaControls',
        )
    ),
]

################################################################
# code template for SlideShowSettings implementation
# class SlideShowSettings_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def PointerColor(self):
#         '-no docstring-'
#         #return PointerColor
#
#     @property
#     def NamedSlideShows(self):
#         '-no docstring-'
#         #return NamedSlideShows
#
#     def _get(self):
#         '-no docstring-'
#         #return StartingSlide
#     def _set(self, StartingSlide):
#         '-no docstring-'
#     StartingSlide = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return EndingSlide
#     def _set(self, EndingSlide):
#         '-no docstring-'
#     EndingSlide = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return AdvanceMode
#     def _set(self, AdvanceMode):
#         '-no docstring-'
#     AdvanceMode = property(_get, _set, doc = _set.__doc__)
#
#     def Run(self):
#         '-no docstring-'
#         #return Run
#
#     def _get(self):
#         '-no docstring-'
#         #return LoopUntilStopped
#     def _set(self, LoopUntilStopped):
#         '-no docstring-'
#     LoopUntilStopped = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ShowType
#     def _set(self, ShowType):
#         '-no docstring-'
#     ShowType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ShowWithNarration
#     def _set(self, ShowWithNarration):
#         '-no docstring-'
#     ShowWithNarration = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ShowWithAnimation
#     def _set(self, ShowWithAnimation):
#         '-no docstring-'
#     ShowWithAnimation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return SlideShowName
#     def _set(self, SlideShowName):
#         '-no docstring-'
#     SlideShowName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RangeType
#     def _set(self, RangeType):
#         '-no docstring-'
#     RangeType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ShowScrollbar
#     def _set(self, ShowScrollbar):
#         '-no docstring-'
#     ShowScrollbar = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ShowPresenterView
#     def _set(self, ShowPresenterView):
#         '-no docstring-'
#     ShowPresenterView = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ShowMediaControls
#     def _set(self, ShowMediaControls):
#         '-no docstring-'
#     ShowMediaControls = property(_get, _set, doc = _set.__doc__)
#

Sequence._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(Effect)), 'Item')
    ),
    COMMETHOD(
        [dispid(2003)],
        HRESULT,
        'AddEffect',
        (['in'], POINTER(Shape), 'Shape'),
        (['in'], MsoAnimEffect, 'effectId'),
        (['in', 'optional'], MsoAnimateByLevel, 'Level', 0),
        (['in', 'optional'], MsoAnimTriggerType, 'trigger', 1),
        (['in', 'optional'], c_int, 'Index', -1),
        (['out', 'retval'], POINTER(POINTER(Effect)), 'Effect')
    ),
    COMMETHOD(
        [dispid(2004)],
        HRESULT,
        'Clone',
        (['in'], POINTER(Effect), 'Effect'),
        (['in', 'optional'], c_int, 'Index', -1),
        (['out', 'retval'], POINTER(POINTER(Effect)), 'Clone')
    ),
    COMMETHOD(
        [dispid(2005)],
        HRESULT,
        'FindFirstAnimationFor',
        (['in'], POINTER(Shape), 'Shape'),
        (['out', 'retval'], POINTER(POINTER(Effect)), 'FindFirstAnimationFor')
    ),
    COMMETHOD(
        [dispid(2006)],
        HRESULT,
        'FindFirstAnimationForClick',
        (['in'], c_int, 'click'),
        (
            ['out', 'retval'],
            POINTER(POINTER(Effect)),
            'FindFirstAnimationForClick',
        )
    ),
    COMMETHOD(
        [dispid(2007)],
        HRESULT,
        'ConvertToBuildLevel',
        (['in'], POINTER(Effect), 'Effect'),
        (['in'], MsoAnimateByLevel, 'Level'),
        (['out', 'retval'], POINTER(POINTER(Effect)), 'ConvertToBuildLevel')
    ),
    COMMETHOD(
        [dispid(2008)],
        HRESULT,
        'ConvertToAfterEffect',
        (['in'], POINTER(Effect), 'Effect'),
        (['in'], MsoAnimAfterEffect, 'After'),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoRGBType,
            'DimColor',
            0
        ),
        (['in', 'optional'], PpColorSchemeIndex, 'DimSchemeColor', 0),
        (['out', 'retval'], POINTER(POINTER(Effect)), 'ConvertToAfterEffect')
    ),
    COMMETHOD(
        [dispid(2009)],
        HRESULT,
        'ConvertToAnimateBackground',
        (['in'], POINTER(Effect), 'Effect'),
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'AnimateBackground',
        ),
        (
            ['out', 'retval'],
            POINTER(POINTER(Effect)),
            'ConvertToAnimateBackground',
        )
    ),
    COMMETHOD(
        [dispid(2010)],
        HRESULT,
        'ConvertToAnimateInReverse',
        (['in'], POINTER(Effect), 'Effect'),
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'animateInReverse',
        ),
        (
            ['out', 'retval'],
            POINTER(POINTER(Effect)),
            'ConvertToAnimateInReverse',
        )
    ),
    COMMETHOD(
        [dispid(2011)],
        HRESULT,
        'ConvertToTextUnitEffect',
        (['in'], POINTER(Effect), 'Effect'),
        (['in'], MsoAnimTextUnitEffect, 'unitEffect'),
        (['out', 'retval'], POINTER(POINTER(Effect)), 'ConvertToTextUnitEffect')
    ),
    COMMETHOD(
        [dispid(2012)],
        HRESULT,
        'AddTriggerEffect',
        (['in'], POINTER(Shape), 'pShape'),
        (['in'], MsoAnimEffect, 'effectId'),
        (['in'], MsoAnimTriggerType, 'trigger'),
        (['in'], POINTER(Shape), 'pTriggerShape'),
        (['in', 'optional'], BSTR, 'bookmark', ''),
        (['in', 'optional'], MsoAnimateByLevel, 'Level', 0),
        (['out', 'retval'], POINTER(POINTER(Effect)), 'TriggerEffect')
    ),
]

################################################################
# code template for Sequence implementation
# class Sequence_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     def AddEffect(self, Shape, effectId, Level, trigger, Index):
#         '-no docstring-'
#         #return Effect
#
#     def Clone(self, Effect, Index):
#         '-no docstring-'
#         #return Clone
#
#     def FindFirstAnimationFor(self, Shape):
#         '-no docstring-'
#         #return FindFirstAnimationFor
#
#     def FindFirstAnimationForClick(self, click):
#         '-no docstring-'
#         #return FindFirstAnimationForClick
#
#     def ConvertToBuildLevel(self, Effect, Level):
#         '-no docstring-'
#         #return ConvertToBuildLevel
#
#     def ConvertToAfterEffect(self, Effect, After, DimColor, DimSchemeColor):
#         '-no docstring-'
#         #return ConvertToAfterEffect
#
#     def ConvertToAnimateBackground(self, Effect, AnimateBackground):
#         '-no docstring-'
#         #return ConvertToAnimateBackground
#
#     def ConvertToAnimateInReverse(self, Effect, animateInReverse):
#         '-no docstring-'
#         #return ConvertToAnimateInReverse
#
#     def ConvertToTextUnitEffect(self, Effect, unitEffect):
#         '-no docstring-'
#         #return ConvertToTextUnitEffect
#
#     def AddTriggerEffect(self, pShape, effectId, trigger, pTriggerShape, bookmark, Level):
#         '-no docstring-'
#         #return TriggerEffect
#


class SlideNavigation(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{F658E3EC-F2D3-4272-AA49-4EC155D5AA76}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Visible(self) -> hints.Incomplete: ...
        def _set_Visible(self, Visible: hints.Incomplete) -> hints.Hresult: ...
        Visible = hints.normal_property(_get_Visible, _set_Visible)


SlideNavigation._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Visible',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Visible')
    ),
    COMMETHOD(
        [dispid(2003), 'propput'],
        HRESULT,
        'Visible',
        (['in'], VARIANT_BOOL, 'Visible')
    ),
]

################################################################
# code template for SlideNavigation implementation
# class SlideNavigation_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return Visible
#     def _set(self, Visible):
#         '-no docstring-'
#     Visible = property(_get, _set, doc = _set.__doc__)
#


class SeriesCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A76-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Extend(self, Source: hints.Incomplete, Rowcol: hints.Incomplete = ..., CategoryLabels: hints.Incomplete = ...) -> hints.Incomplete: ...
        def Item(self, Index: hints.Incomplete) -> 'Series': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _NewEnum(self) -> hints.Incomplete: ...
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def NewSeries(self) -> 'Series': ...
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def Add(self, Source: hints.Incomplete, Rowcol: hints.Incomplete = ..., SeriesLabels: hints.Incomplete = ..., CategoryLabels: hints.Incomplete = ..., Replace: hints.Incomplete = ...) -> 'Series': ...
        def _Default(self, Index: hints.Incomplete) -> 'Series': ...



SeriesCollection._methods_ = [
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(118), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(227)],
        HRESULT,
        'Extend',
        (['in'], VARIANT, 'Source'),
        (['in', 'optional'], VARIANT, 'Rowcol'),
        (['in', 'optional'], VARIANT, 'CategoryLabels'),
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(170)],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(Series)), 'RHS')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'RHS')
    ),
    COMMETHOD(
        [dispid(1117)],
        HRESULT,
        'NewSeries',
        (['out', 'retval'], POINTER(POINTER(Series)), 'RHS')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002)],
        HRESULT,
        'Add',
        (['in'], VARIANT, 'Source'),
        (['in', 'optional'], XlRowCol, 'Rowcol', -4105),
        (['in', 'optional'], VARIANT, 'SeriesLabels'),
        (['in', 'optional'], VARIANT, 'CategoryLabels'),
        (['in', 'optional'], VARIANT, 'Replace'),
        (['out', 'retval'], POINTER(POINTER(Series)), 'RHS')
    ),
    COMMETHOD(
        [dispid(0), 'nonbrowsable'],
        HRESULT,
        '_Default',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(Series)), 'RHS')
    ),
]

################################################################
# code template for SeriesCollection implementation
# class SeriesCollection_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return RHS
#
#     def Extend(self, Source, Rowcol, CategoryLabels):
#         '-no docstring-'
#         #return RHS
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return RHS
#
#     def _NewEnum(self):
#         '-no docstring-'
#         #return RHS
#
#     def NewSeries(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     def Add(self, Source, Rowcol, SeriesLabels, CategoryLabels, Replace):
#         '-no docstring-'
#         #return RHS
#
#     def _Default(self, Index):
#         '-no docstring-'
#         #return RHS
#


class AnimationBehaviors(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{914934E3-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Item(self, Index: hints.Incomplete) -> 'AnimationBehavior': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def Add(self, Type: hints.Incomplete, Index: hints.Incomplete = ...) -> 'AnimationBehavior': ...


class AnimationBehavior(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934E4-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Additive(self) -> hints.Incomplete: ...
        def _set_Additive(self, Additive: hints.Incomplete) -> hints.Hresult: ...
        Additive = hints.normal_property(_get_Additive, _set_Additive)
        def _get_Accumulate(self) -> hints.Incomplete: ...
        def _set_Accumulate(self, Accumulate: hints.Incomplete) -> hints.Hresult: ...
        Accumulate = hints.normal_property(_get_Accumulate, _set_Accumulate)
        def _get_Type(self) -> hints.Incomplete: ...
        def _set_Type(self, Type: hints.Incomplete) -> hints.Hresult: ...
        Type = hints.normal_property(_get_Type, _set_Type)
        def _get_MotionEffect(self) -> 'MotionEffect': ...
        MotionEffect = hints.normal_property(_get_MotionEffect)
        def _get_ColorEffect(self) -> 'ColorEffect': ...
        ColorEffect = hints.normal_property(_get_ColorEffect)
        def _get_ScaleEffect(self) -> 'ScaleEffect': ...
        ScaleEffect = hints.normal_property(_get_ScaleEffect)
        def _get_RotationEffect(self) -> 'RotationEffect': ...
        RotationEffect = hints.normal_property(_get_RotationEffect)
        def _get_PropertyEffect(self) -> 'PropertyEffect': ...
        PropertyEffect = hints.normal_property(_get_PropertyEffect)
        def _get_Timing(self) -> 'Timing': ...
        Timing = hints.normal_property(_get_Timing)
        def Delete(self) -> hints.Hresult: ...
        def _get_CommandEffect(self) -> 'CommandEffect': ...
        CommandEffect = hints.normal_property(_get_CommandEffect)
        def _get_FilterEffect(self) -> 'FilterEffect': ...
        FilterEffect = hints.normal_property(_get_FilterEffect)
        def _get_SetEffect(self) -> 'SetEffect': ...
        SetEffect = hints.normal_property(_get_SetEffect)



AnimationBehaviors._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(AnimationBehavior)), 'Item')
    ),
    COMMETHOD(
        [dispid(2003)],
        HRESULT,
        'Add',
        (['in'], MsoAnimType, 'Type'),
        (['in', 'optional'], c_int, 'Index', -1),
        (['out', 'retval'], POINTER(POINTER(AnimationBehavior)), 'Add')
    ),
]

################################################################
# code template for AnimationBehaviors implementation
# class AnimationBehaviors_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     def Add(self, Type, Index):
#         '-no docstring-'
#         #return Add
#


class DataTable(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A63-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_ShowLegendKey(self) -> hints.Incomplete: ...
        def _set_ShowLegendKey(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ShowLegendKey = hints.normal_property(_get_ShowLegendKey, _set_ShowLegendKey)
        def _get_HasBorderHorizontal(self) -> hints.Incomplete: ...
        def _set_HasBorderHorizontal(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        HasBorderHorizontal = hints.normal_property(_get_HasBorderHorizontal, _set_HasBorderHorizontal)
        def _get_HasBorderVertical(self) -> hints.Incomplete: ...
        def _set_HasBorderVertical(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        HasBorderVertical = hints.normal_property(_get_HasBorderVertical, _set_HasBorderVertical)
        def _get_HasBorderOutline(self) -> hints.Incomplete: ...
        def _set_HasBorderOutline(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        HasBorderOutline = hints.normal_property(_get_HasBorderOutline, _set_HasBorderOutline)
        def _get_Border(self) -> 'ChartBorder': ...
        Border = hints.normal_property(_get_Border)
        def _get_Font(self) -> 'ChartFont': ...
        Font = hints.normal_property(_get_Font)
        def Select(self) -> hints.Hresult: ...
        def Delete(self) -> hints.Hresult: ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_AutoScaleFont(self) -> hints.Incomplete: ...
        def _set_AutoScaleFont(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        AutoScaleFont = hints.normal_property(_get_AutoScaleFont, _set_AutoScaleFont)
        def _get_Format(self) -> 'ChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)




class Corners(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A60-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def Select(self) -> hints.Incomplete: ...
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)




class Floor(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A68-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def Select(self) -> hints.Incomplete: ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Border(self) -> 'ChartBorder': ...
        Border = hints.normal_property(_get_Border)
        def ClearFormats(self) -> hints.Incomplete: ...
        def _get_Interior(self) -> 'Interior': ...
        Interior = hints.normal_property(_get_Interior)
        def _get_Fill(self) -> 'ChartFillFormat': ...
        Fill = hints.normal_property(_get_Fill)
        def _get_PictureType(self) -> hints.Incomplete: ...
        def _set_PictureType(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        PictureType = hints.normal_property(_get_PictureType, _set_PictureType)
        def Paste(self) -> hints.Hresult: ...
        def _get_Thickness(self) -> hints.Incomplete: ...
        def _set_Thickness(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Thickness = hints.normal_property(_get_Thickness, _set_Thickness)
        def _get_Format(self) -> 'ChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)


class PlotArea(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A72-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def Select(self) -> hints.Incomplete: ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Border(self) -> 'ChartBorder': ...
        Border = hints.normal_property(_get_Border)
        def ClearFormats(self) -> hints.Incomplete: ...
        def _get_Height(self) -> hints.Incomplete: ...
        def _set_Height(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Height = hints.normal_property(_get_Height, _set_Height)
        def _get_Interior(self) -> 'Interior': ...
        Interior = hints.normal_property(_get_Interior)
        def _get_Fill(self) -> 'ChartFillFormat': ...
        Fill = hints.normal_property(_get_Fill)
        def _get_Left(self) -> hints.Incomplete: ...
        def _set_Left(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Left = hints.normal_property(_get_Left, _set_Left)
        def _get_Top(self) -> hints.Incomplete: ...
        def _set_Top(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Top = hints.normal_property(_get_Top, _set_Top)
        def _get_Width(self) -> hints.Incomplete: ...
        def _set_Width(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Width = hints.normal_property(_get_Width, _set_Width)
        def _get_InsideLeft(self) -> hints.Incomplete: ...
        def _set_InsideLeft(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        InsideLeft = hints.normal_property(_get_InsideLeft, _set_InsideLeft)
        def _get_InsideTop(self) -> hints.Incomplete: ...
        def _set_InsideTop(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        InsideTop = hints.normal_property(_get_InsideTop, _set_InsideTop)
        def _get_InsideWidth(self) -> hints.Incomplete: ...
        def _set_InsideWidth(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        InsideWidth = hints.normal_property(_get_InsideWidth, _set_InsideWidth)
        def _get_InsideHeight(self) -> hints.Incomplete: ...
        def _set_InsideHeight(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        InsideHeight = hints.normal_property(_get_InsideHeight, _set_InsideHeight)
        def _get_Position(self) -> hints.Incomplete: ...
        def _set_Position(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Position = hints.normal_property(_get_Position, _set_Position)
        def _get_Format(self) -> 'ChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def GetProperty(self, Id: hints.Incomplete) -> hints.Incomplete: ...
        def SetProperty(self, Id: hints.Incomplete, Value: hints.Incomplete) -> hints.Hresult: ...



Chart._methods_ = [
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(1922)],
        HRESULT,
        'ApplyDataLabels',
        (['in', 'optional'], XlDataLabelsType, 'Type', 2),
        (['in', 'optional'], VARIANT, 'LegendKey'),
        (['in', 'optional'], VARIANT, 'AutoText'),
        (['in', 'optional'], VARIANT, 'HasLeaderLines'),
        (['in', 'optional'], VARIANT, 'ShowSeriesName'),
        (['in', 'optional'], VARIANT, 'ShowCategoryName'),
        (['in', 'optional'], VARIANT, 'ShowValue'),
        (['in', 'optional'], VARIANT, 'ShowPercentage'),
        (['in', 'optional'], VARIANT, 'ShowBubbleSize'),
        (['in', 'optional'], VARIANT, 'Separator')
    ),
    COMMETHOD(
        [dispid(1400), 'propget'],
        HRESULT,
        'ChartType',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.XlChartType),
            'RHS',
        )
    ),
    COMMETHOD(
        [dispid(1400), 'propput'],
        HRESULT,
        'ChartType',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.XlChartType,
            'RHS',
        )
    ),
    COMMETHOD(
        [dispid(1396), 'propget'],
        HRESULT,
        'HasDataTable',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(1396), 'propput'],
        HRESULT,
        'HasDataTable',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(1401), 'hidden'],
        HRESULT,
        'ApplyCustomType',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.XlChartType,
            'ChartType',
        ),
        (['in', 'optional'], VARIANT, 'TypeName')
    ),
    COMMETHOD(
        [dispid(1409)],
        HRESULT,
        'GetChartElement',
        (['in'], c_int, 'X'),
        (['in'], c_int, 'Y'),
        (['in', 'out'], POINTER(c_int), 'ElementID'),
        (['in', 'out'], POINTER(c_int), 'Arg1'),
        (['in', 'out'], POINTER(c_int), 'Arg2')
    ),
    COMMETHOD(
        [dispid(1413)],
        HRESULT,
        'SetSourceData',
        (['in'], BSTR, 'Source'),
        (['in', 'optional'], VARIANT, 'PlotBy')
    ),
    COMMETHOD(
        [dispid(202), 'propget'],
        HRESULT,
        'PlotBy',
        (['out', 'retval'], POINTER(XlRowCol), 'PlotBy')
    ),
    COMMETHOD(
        [dispid(202), 'propput'],
        HRESULT,
        'PlotBy',
        (['in'], XlRowCol, 'PlotBy')
    ),
    COMMETHOD(
        [dispid(2001), 'hidden'],
        HRESULT,
        'AutoFormat',
        (['in'], c_int, 'Gallery'),
        (['in', 'optional'], VARIANT, 'Format')
    ),
    COMMETHOD(
        [dispid(2002)],
        HRESULT,
        'SetBackgroundPicture',
        (['in'], BSTR, 'FileName')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'DataTable',
        (['out', 'retval'], POINTER(POINTER(DataTable)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2004)],
        HRESULT,
        'Paste',
        (['in', 'optional'], VARIANT, 'Type'),
        (['in', 'lcid'], c_int, 'lcid', _lcid)
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'BarShape',
        (['out', 'retval'], POINTER(XlBarShape), 'RHS')
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'BarShape',
        (['in'], XlBarShape, 'RHS')
    ),
    COMMETHOD(
        [dispid(2006)],
        HRESULT,
        'SetDefaultChart',
        (['in'], VARIANT, 'Name')
    ),
    COMMETHOD(
        [dispid(2007)],
        HRESULT,
        'ApplyChartTemplate',
        (['in'], BSTR, 'FileName')
    ),
    COMMETHOD(
        [dispid(2008)],
        HRESULT,
        'SaveChartTemplate',
        (['in'], BSTR, 'FileName')
    ),
    COMMETHOD(
        [dispid(2377), 'propget'],
        HRESULT,
        'SideWall',
        (['out', 'retval'], POINTER(POINTER(Walls)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2378), 'propget'],
        HRESULT,
        'BackWall',
        (['out', 'retval'], POINTER(POINTER(Walls)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2465), 'propget'],
        HRESULT,
        'ChartStyle',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2465), 'propput'],
        HRESULT,
        'ChartStyle',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD([dispid(2466)], HRESULT, 'ClearToMatchStyle'),
    COMMETHOD(
        [dispid(1815), 'hidden', 'propget'],
        HRESULT,
        'HasPivotFields',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(1815), 'hidden', 'propput'],
        HRESULT,
        'HasPivotFields',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2009), 'propput'],
        HRESULT,
        'ShowDataLabelsOverMaximum',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'ShowDataLabelsOverMaximum',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2468)],
        HRESULT,
        'ApplyLayout',
        (['in'], c_int, 'Layout'),
        (['in', 'optional'], VARIANT, 'ChartType')
    ),
    COMMETHOD([dispid(2010)], HRESULT, 'Refresh'),
    COMMETHOD(
        [dispid(2011), 'propget'],
        HRESULT,
        'ChartData',
        (['out', 'retval'], POINTER(POINTER(ChartData)), 'ppchartdata')
    ),
    COMMETHOD(
        [dispid(2012), 'propget'],
        HRESULT,
        'Shapes',
        (['out', 'retval'], POINTER(POINTER(Shapes)), 'RHS')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(17), 'hidden', 'propget'],
        HRESULT,
        'Area3DGroup',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(ChartGroup)), 'RHS')
    ),
    COMMETHOD(
        [dispid(9), 'hidden'],
        HRESULT,
        'AreaGroups',
        (['in', 'optional'], VARIANT, 'Index'),
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(18), 'hidden', 'propget'],
        HRESULT,
        'Bar3DGroup',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(ChartGroup)), 'RHS')
    ),
    COMMETHOD(
        [dispid(10), 'hidden'],
        HRESULT,
        'BarGroups',
        (['in', 'optional'], VARIANT, 'Index'),
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(19), 'hidden', 'propget'],
        HRESULT,
        'Column3DGroup',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(ChartGroup)), 'RHS')
    ),
    COMMETHOD(
        [dispid(11), 'hidden'],
        HRESULT,
        'ColumnGroups',
        (['in', 'optional'], VARIANT, 'Index'),
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(20), 'hidden', 'propget'],
        HRESULT,
        'Line3DGroup',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(ChartGroup)), 'RHS')
    ),
    COMMETHOD(
        [dispid(12), 'hidden'],
        HRESULT,
        'LineGroups',
        (['in', 'optional'], VARIANT, 'Index'),
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(21), 'hidden', 'propget'],
        HRESULT,
        'Pie3DGroup',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(ChartGroup)), 'RHS')
    ),
    COMMETHOD(
        [dispid(13), 'hidden'],
        HRESULT,
        'PieGroups',
        (['in', 'optional'], VARIANT, 'Index'),
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(14), 'hidden'],
        HRESULT,
        'DoughnutGroups',
        (['in', 'optional'], VARIANT, 'Index'),
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(15), 'hidden'],
        HRESULT,
        'RadarGroups',
        (['in', 'optional'], VARIANT, 'Index'),
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(22), 'hidden', 'propget'],
        HRESULT,
        'SurfaceGroup',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(ChartGroup)), 'RHS')
    ),
    COMMETHOD(
        [dispid(16), 'hidden'],
        HRESULT,
        'XYGroups',
        (['in', 'optional'], VARIANT, 'Index'),
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2013), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2014), 'hidden', 'nonbrowsable'],
        HRESULT,
        '_ApplyDataLabels',
        (['in', 'optional'], XlDataLabelsType, 'Type', 2),
        (['in', 'optional'], VARIANT, 'LegendKey'),
        (['in', 'optional'], VARIANT, 'AutoText'),
        (['in', 'optional'], VARIANT, 'HasLeaderLines'),
        (['in', 'lcid'], c_int, 'lcid', _lcid)
    ),
    COMMETHOD(
        [dispid(2015), 'propput'],
        HRESULT,
        'AutoScaling',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2015), 'propget'],
        HRESULT,
        'AutoScaling',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2016)],
        HRESULT,
        'Axes',
        (['in', 'optional'], VARIANT, 'Type'),
        (['in', 'optional'], XlAxisGroup, 'AxisGroup', 1),
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2017), 'propget'],
        HRESULT,
        'ChartArea',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(ChartArea)), 'ChartArea')
    ),
    COMMETHOD(
        [dispid(2018)],
        HRESULT,
        'ChartGroups',
        (['in', 'optional'], VARIANT, 'Index'),
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2019), 'propget'],
        HRESULT,
        'ChartTitle',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(ChartTitle)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2020)],
        HRESULT,
        'ChartWizard',
        (['in', 'optional'], VARIANT, 'Source'),
        (['in', 'optional'], VARIANT, 'Gallery'),
        (['in', 'optional'], VARIANT, 'Format'),
        (['in', 'optional'], VARIANT, 'PlotBy'),
        (['in', 'optional'], VARIANT, 'CategoryLabels'),
        (['in', 'optional'], VARIANT, 'SeriesLabels'),
        (['in', 'optional'], VARIANT, 'HasLegend'),
        (['in', 'optional'], VARIANT, 'Title'),
        (['in', 'optional'], VARIANT, 'CategoryTitle'),
        (['in', 'optional'], VARIANT, 'ValueTitle'),
        (['in', 'optional'], VARIANT, 'ExtraTitle'),
        (['in', 'lcid'], c_int, 'lcid', _lcid)
    ),
    COMMETHOD(
        [dispid(2021)],
        HRESULT,
        'Copy',
        (['in', 'optional'], VARIANT, 'Before'),
        (['in', 'optional'], VARIANT, 'After'),
        (['in', 'lcid'], c_int, 'lcid', _lcid)
    ),
    COMMETHOD(
        [dispid(2022)],
        HRESULT,
        'CopyPicture',
        (['in', 'optional'], XlPictureAppearance, 'Appearance', 1),
        (['in', 'optional'], XlCopyPictureFormat, 'Format', -4147),
        (['in', 'optional'], XlPictureAppearance, 'Size', 2),
        (['in', 'lcid'], c_int, 'LocaleID', _lcid)
    ),
    COMMETHOD(
        [dispid(2023), 'hidden', 'propget'],
        HRESULT,
        'Corners',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(Corners)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2024)],
        HRESULT,
        'Delete',
        (['in', 'lcid'], c_int, 'lcid', _lcid)
    ),
    COMMETHOD(
        [dispid(2025), 'propget'],
        HRESULT,
        'DepthPercent',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2025), 'propput'],
        HRESULT,
        'DepthPercent',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(2026), 'propget'],
        HRESULT,
        'DisplayBlanksAs',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(XlDisplayBlanksAs), 'RHS')
    ),
    COMMETHOD(
        [dispid(2026), 'propput'],
        HRESULT,
        'DisplayBlanksAs',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['in'], XlDisplayBlanksAs, 'RHS')
    ),
    COMMETHOD(
        [dispid(2027), 'propget'],
        HRESULT,
        'Elevation',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2027), 'propput'],
        HRESULT,
        'Elevation',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(2028)],
        HRESULT,
        'Export',
        (['in'], BSTR, 'FileName'),
        (['in', 'optional'], VARIANT, 'FilterName'),
        (['in', 'optional'], VARIANT, 'Interactive'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2029), 'propget'],
        HRESULT,
        'Floor',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(Floor)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2030), 'propget'],
        HRESULT,
        'GapDepth',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2030), 'propput'],
        HRESULT,
        'GapDepth',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(2031), 'propget'],
        HRESULT,
        'HasAxis',
        (['in', 'optional'], VARIANT, 'Index1'),
        (['in', 'optional'], VARIANT, 'Index2'),
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2031), 'propput'],
        HRESULT,
        'HasAxis',
        (['in', 'optional'], VARIANT, 'Index1'),
        (['in', 'optional'], VARIANT, 'Index2'),
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2032), 'propget'],
        HRESULT,
        'HasLegend',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2032), 'propput'],
        HRESULT,
        'HasLegend',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2033), 'propget'],
        HRESULT,
        'HasTitle',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2033), 'propput'],
        HRESULT,
        'HasTitle',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2034), 'propget'],
        HRESULT,
        'HeightPercent',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2034), 'propput'],
        HRESULT,
        'HeightPercent',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(2035), 'propget'],
        HRESULT,
        'Legend',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(Legend)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2036), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(2036), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'RHS')
    ),
    COMMETHOD(
        [dispid(2037), 'propget'],
        HRESULT,
        'Perspective',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2037), 'propput'],
        HRESULT,
        'Perspective',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(2038), 'propget'],
        HRESULT,
        'PlotArea',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(PlotArea)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2039), 'propget'],
        HRESULT,
        'PlotVisibleOnly',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2039), 'propput'],
        HRESULT,
        'PlotVisibleOnly',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2040), 'propget'],
        HRESULT,
        'RightAngleAxes',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2040), 'propput'],
        HRESULT,
        'RightAngleAxes',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2041), 'propget'],
        HRESULT,
        'Rotation',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2041), 'propput'],
        HRESULT,
        'Rotation',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2042)],
        HRESULT,
        'Select',
        (['in', 'optional'], VARIANT, 'Replace'),
        (['in', 'lcid'], c_int, 'lcid', _lcid)
    ),
    COMMETHOD(
        [dispid(2043)],
        HRESULT,
        'SeriesCollection',
        (['in', 'optional'], VARIANT, 'Index'),
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2044)],
        HRESULT,
        'SetElement',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoChartElementType,
            'Element',
        )
    ),
    COMMETHOD(
        [dispid(2045), 'hidden', 'propget'],
        HRESULT,
        'Subtype',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2045), 'hidden', 'propput'],
        HRESULT,
        'Subtype',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(2046), 'hidden', 'propget'],
        HRESULT,
        'Type',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2046), 'hidden', 'propput'],
        HRESULT,
        'Type',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(2047), 'propget'],
        HRESULT,
        'Walls',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(Walls)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2048), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(ChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(2049), 'propget'],
        HRESULT,
        'ShowReportFilterFieldButtons',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'res')
    ),
    COMMETHOD(
        [dispid(2049), 'propput'],
        HRESULT,
        'ShowReportFilterFieldButtons',
        (['in'], VARIANT_BOOL, 'res')
    ),
    COMMETHOD(
        [dispid(2050), 'propget'],
        HRESULT,
        'ShowLegendFieldButtons',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'res')
    ),
    COMMETHOD(
        [dispid(2050), 'propput'],
        HRESULT,
        'ShowLegendFieldButtons',
        (['in'], VARIANT_BOOL, 'res')
    ),
    COMMETHOD(
        [dispid(2051), 'propget'],
        HRESULT,
        'ShowAxisFieldButtons',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'res')
    ),
    COMMETHOD(
        [dispid(2051), 'propput'],
        HRESULT,
        'ShowAxisFieldButtons',
        (['in'], VARIANT_BOOL, 'res')
    ),
    COMMETHOD(
        [dispid(2052), 'propget'],
        HRESULT,
        'ShowValueFieldButtons',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'res')
    ),
    COMMETHOD(
        [dispid(2052), 'propput'],
        HRESULT,
        'ShowValueFieldButtons',
        (['in'], VARIANT_BOOL, 'res')
    ),
    COMMETHOD(
        [dispid(2053), 'propget'],
        HRESULT,
        'ShowAllFieldButtons',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'res')
    ),
    COMMETHOD(
        [dispid(2053), 'propput'],
        HRESULT,
        'ShowAllFieldButtons',
        (['in'], VARIANT_BOOL, 'res')
    ),
    COMMETHOD(
        [dispid(2054), 'propget'],
        HRESULT,
        'AlternativeText',
        (['out', 'retval'], POINTER(BSTR), 'AlternativeText')
    ),
    COMMETHOD(
        [dispid(2054), 'propput'],
        HRESULT,
        'AlternativeText',
        (['in'], BSTR, 'AlternativeText')
    ),
    COMMETHOD(
        [dispid(2055), 'propget'],
        HRESULT,
        'Title',
        (['out', 'retval'], POINTER(BSTR), 'Title')
    ),
    COMMETHOD(
        [dispid(2055), 'propput'],
        HRESULT,
        'Title',
        (['in'], BSTR, 'Title')
    ),
    COMMETHOD(
        [dispid(2056)],
        HRESULT,
        'FullSeriesCollection',
        (['in', 'optional'], VARIANT, 'Index'),
        (
            ['out', 'retval'],
            POINTER(POINTER(IDispatch)),
            'ppFullSeriesCollection',
        )
    ),
    COMMETHOD(
        [dispid(2057), 'propget'],
        HRESULT,
        'CategoryLabelLevel',
        (['out', 'retval'], POINTER(XlCategoryLabelLevel), 'plevel')
    ),
    COMMETHOD(
        [dispid(2057), 'propput'],
        HRESULT,
        'CategoryLabelLevel',
        (['in'], XlCategoryLabelLevel, 'plevel')
    ),
    COMMETHOD(
        [dispid(2058), 'propget'],
        HRESULT,
        'SeriesNameLevel',
        (['out', 'retval'], POINTER(XlSeriesNameLevel), 'plevel')
    ),
    COMMETHOD(
        [dispid(2058), 'propput'],
        HRESULT,
        'SeriesNameLevel',
        (['in'], XlSeriesNameLevel, 'plevel')
    ),
    COMMETHOD(
        [dispid(2059), 'hidden', 'propget'],
        HRESULT,
        'HasHiddenContent',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'res')
    ),
    COMMETHOD([dispid(2060), 'hidden'], HRESULT, 'DeleteHiddenContent'),
    COMMETHOD(
        [dispid(2467), 'propget'],
        HRESULT,
        'ChartColor',
        (['out', 'retval'], POINTER(VARIANT), 'pColor')
    ),
    COMMETHOD(
        [dispid(2467), 'propput'],
        HRESULT,
        'ChartColor',
        (['in'], VARIANT, 'pColor')
    ),
    COMMETHOD([dispid(2469)], HRESULT, 'ClearToMatchColorStyle'),
    COMMETHOD(
        [dispid(2470)],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'Id'),
        (['out', 'retval'], POINTER(VARIANT), 'pValue')
    ),
    COMMETHOD(
        [dispid(2471)],
        HRESULT,
        'SetProperty',
        (['in'], BSTR, 'Id'),
        (['in'], VARIANT, 'Value')
    ),
]

################################################################
# code template for Chart implementation
# class Chart_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     def ApplyDataLabels(self, Type, LegendKey, AutoText, HasLeaderLines, ShowSeriesName, ShowCategoryName, ShowValue, ShowPercentage, ShowBubbleSize, Separator):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ChartType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     HasDataTable = property(_get, _set, doc = _set.__doc__)
#
#     def ApplyCustomType(self, ChartType, TypeName):
#         '-no docstring-'
#         #return 
#
#     def GetChartElement(self, X, Y):
#         '-no docstring-'
#         #return ElementID, Arg1, Arg2
#
#     def SetSourceData(self, Source, PlotBy):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return PlotBy
#     def _set(self, PlotBy):
#         '-no docstring-'
#     PlotBy = property(_get, _set, doc = _set.__doc__)
#
#     def AutoFormat(self, Gallery, Format):
#         '-no docstring-'
#         #return 
#
#     def SetBackgroundPicture(self, FileName):
#         '-no docstring-'
#         #return 
#
#     @property
#     def DataTable(self):
#         '-no docstring-'
#         #return RHS
#
#     def Paste(self, Type, lcid):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     BarShape = property(_get, _set, doc = _set.__doc__)
#
#     def SetDefaultChart(self, Name):
#         '-no docstring-'
#         #return 
#
#     def ApplyChartTemplate(self, FileName):
#         '-no docstring-'
#         #return 
#
#     def SaveChartTemplate(self, FileName):
#         '-no docstring-'
#         #return 
#
#     @property
#     def SideWall(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def BackWall(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ChartStyle = property(_get, _set, doc = _set.__doc__)
#
#     def ClearToMatchStyle(self):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     HasPivotFields = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ShowDataLabelsOverMaximum = property(_get, _set, doc = _set.__doc__)
#
#     def ApplyLayout(self, Layout, ChartType):
#         '-no docstring-'
#         #return 
#
#     def Refresh(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def ChartData(self):
#         '-no docstring-'
#         #return ppchartdata
#
#     @property
#     def Shapes(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Area3DGroup(self, lcid):
#         '-no docstring-'
#         #return RHS
#
#     def AreaGroups(self, Index, lcid):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Bar3DGroup(self, lcid):
#         '-no docstring-'
#         #return RHS
#
#     def BarGroups(self, Index, lcid):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Column3DGroup(self, lcid):
#         '-no docstring-'
#         #return RHS
#
#     def ColumnGroups(self, Index, lcid):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Line3DGroup(self, lcid):
#         '-no docstring-'
#         #return RHS
#
#     def LineGroups(self, Index, lcid):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Pie3DGroup(self, lcid):
#         '-no docstring-'
#         #return RHS
#
#     def PieGroups(self, Index, lcid):
#         '-no docstring-'
#         #return RHS
#
#     def DoughnutGroups(self, Index, lcid):
#         '-no docstring-'
#         #return RHS
#
#     def RadarGroups(self, Index, lcid):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def SurfaceGroup(self, lcid):
#         '-no docstring-'
#         #return RHS
#
#     def XYGroups(self, Index, lcid):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     def _ApplyDataLabels(self, Type, LegendKey, AutoText, HasLeaderLines, lcid):
#         '-no docstring-'
#         #return 
#
#     def _get(self, lcid):
#         '-no docstring-'
#         #return RHS
#     def _set(self, lcid, RHS):
#         '-no docstring-'
#     AutoScaling = property(_get, _set, doc = _set.__doc__)
#
#     def Axes(self, Type, AxisGroup, lcid):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def ChartArea(self, lcid):
#         '-no docstring-'
#         #return ChartArea
#
#     def ChartGroups(self, Index, lcid):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def ChartTitle(self, lcid):
#         '-no docstring-'
#         #return RHS
#
#     def ChartWizard(self, Source, Gallery, Format, PlotBy, CategoryLabels, SeriesLabels, HasLegend, Title, CategoryTitle, ValueTitle, ExtraTitle, lcid):
#         '-no docstring-'
#         #return 
#
#     def Copy(self, Before, After, lcid):
#         '-no docstring-'
#         #return 
#
#     def CopyPicture(self, Appearance, Format, Size, LocaleID):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Corners(self, lcid):
#         '-no docstring-'
#         #return RHS
#
#     def Delete(self, lcid):
#         '-no docstring-'
#         #return 
#
#     def _get(self, lcid):
#         '-no docstring-'
#         #return RHS
#     def _set(self, lcid, RHS):
#         '-no docstring-'
#     DepthPercent = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self, lcid):
#         '-no docstring-'
#         #return RHS
#     def _set(self, lcid, RHS):
#         '-no docstring-'
#     DisplayBlanksAs = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self, lcid):
#         '-no docstring-'
#         #return RHS
#     def _set(self, lcid, RHS):
#         '-no docstring-'
#     Elevation = property(_get, _set, doc = _set.__doc__)
#
#     def Export(self, FileName, FilterName, Interactive):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Floor(self, lcid):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self, lcid):
#         '-no docstring-'
#         #return RHS
#     def _set(self, lcid, RHS):
#         '-no docstring-'
#     GapDepth = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self, Index1, Index2, lcid):
#         '-no docstring-'
#         #return RHS
#     def _set(self, Index1, Index2, lcid, RHS):
#         '-no docstring-'
#     HasAxis = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self, lcid):
#         '-no docstring-'
#         #return RHS
#     def _set(self, lcid, RHS):
#         '-no docstring-'
#     HasLegend = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self, lcid):
#         '-no docstring-'
#         #return RHS
#     def _set(self, lcid, RHS):
#         '-no docstring-'
#     HasTitle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self, lcid):
#         '-no docstring-'
#         #return RHS
#     def _set(self, lcid, RHS):
#         '-no docstring-'
#     HeightPercent = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Legend(self, lcid):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self, lcid):
#         '-no docstring-'
#         #return RHS
#     def _set(self, lcid, RHS):
#         '-no docstring-'
#     Perspective = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def PlotArea(self, lcid):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self, lcid):
#         '-no docstring-'
#         #return RHS
#     def _set(self, lcid, RHS):
#         '-no docstring-'
#     PlotVisibleOnly = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self, lcid):
#         '-no docstring-'
#         #return RHS
#     def _set(self, lcid, RHS):
#         '-no docstring-'
#     RightAngleAxes = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self, lcid):
#         '-no docstring-'
#         #return RHS
#     def _set(self, lcid, RHS):
#         '-no docstring-'
#     Rotation = property(_get, _set, doc = _set.__doc__)
#
#     def Select(self, Replace, lcid):
#         '-no docstring-'
#         #return 
#
#     def SeriesCollection(self, Index, lcid):
#         '-no docstring-'
#         #return RHS
#
#     def SetElement(self, Element):
#         '-no docstring-'
#         #return 
#
#     def _get(self, lcid):
#         '-no docstring-'
#         #return RHS
#     def _set(self, lcid, RHS):
#         '-no docstring-'
#     Subtype = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self, lcid):
#         '-no docstring-'
#         #return RHS
#     def _set(self, lcid, RHS):
#         '-no docstring-'
#     Type = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Walls(self, lcid):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     def _get(self):
#         '-no docstring-'
#         #return res
#     def _set(self, res):
#         '-no docstring-'
#     ShowReportFilterFieldButtons = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return res
#     def _set(self, res):
#         '-no docstring-'
#     ShowLegendFieldButtons = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return res
#     def _set(self, res):
#         '-no docstring-'
#     ShowAxisFieldButtons = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return res
#     def _set(self, res):
#         '-no docstring-'
#     ShowValueFieldButtons = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return res
#     def _set(self, res):
#         '-no docstring-'
#     ShowAllFieldButtons = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return AlternativeText
#     def _set(self, AlternativeText):
#         '-no docstring-'
#     AlternativeText = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Title
#     def _set(self, Title):
#         '-no docstring-'
#     Title = property(_get, _set, doc = _set.__doc__)
#
#     def FullSeriesCollection(self, Index):
#         '-no docstring-'
#         #return ppFullSeriesCollection
#
#     def _get(self):
#         '-no docstring-'
#         #return plevel
#     def _set(self, plevel):
#         '-no docstring-'
#     CategoryLabelLevel = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return plevel
#     def _set(self, plevel):
#         '-no docstring-'
#     SeriesNameLevel = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def HasHiddenContent(self):
#         '-no docstring-'
#         #return res
#
#     def DeleteHiddenContent(self):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return pColor
#     def _set(self, pColor):
#         '-no docstring-'
#     ChartColor = property(_get, _set, doc = _set.__doc__)
#
#     def ClearToMatchColorStyle(self):
#         '-no docstring-'
#         #return 
#
#     def GetProperty(self, Id):
#         '-no docstring-'
#         #return pValue
#
#     def SetProperty(self, Id, Value):
#         '-no docstring-'
#         #return 
#


class WebOptions(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934CE-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_IncludeNavigation(self) -> hints.Incomplete: ...
        def _set_IncludeNavigation(self, IncludeNavigation: hints.Incomplete) -> hints.Hresult: ...
        IncludeNavigation = hints.normal_property(_get_IncludeNavigation, _set_IncludeNavigation)
        def _get_FrameColors(self) -> hints.Incomplete: ...
        def _set_FrameColors(self, FrameColors: hints.Incomplete) -> hints.Hresult: ...
        FrameColors = hints.normal_property(_get_FrameColors, _set_FrameColors)
        def _get_ResizeGraphics(self) -> hints.Incomplete: ...
        def _set_ResizeGraphics(self, ResizeGraphics: hints.Incomplete) -> hints.Hresult: ...
        ResizeGraphics = hints.normal_property(_get_ResizeGraphics, _set_ResizeGraphics)
        def _get_ShowSlideAnimation(self) -> hints.Incomplete: ...
        def _set_ShowSlideAnimation(self, ShowSlideAnimation: hints.Incomplete) -> hints.Hresult: ...
        ShowSlideAnimation = hints.normal_property(_get_ShowSlideAnimation, _set_ShowSlideAnimation)
        def _get_OrganizeInFolder(self) -> hints.Incomplete: ...
        def _set_OrganizeInFolder(self, OrganizeInFolder: hints.Incomplete) -> hints.Hresult: ...
        OrganizeInFolder = hints.normal_property(_get_OrganizeInFolder, _set_OrganizeInFolder)
        def _get_UseLongFileNames(self) -> hints.Incomplete: ...
        def _set_UseLongFileNames(self, UseLongFileNames: hints.Incomplete) -> hints.Hresult: ...
        UseLongFileNames = hints.normal_property(_get_UseLongFileNames, _set_UseLongFileNames)
        def _get_RelyOnVML(self) -> hints.Incomplete: ...
        def _set_RelyOnVML(self, RelyOnVML: hints.Incomplete) -> hints.Hresult: ...
        RelyOnVML = hints.normal_property(_get_RelyOnVML, _set_RelyOnVML)
        def _get_AllowPNG(self) -> hints.Incomplete: ...
        def _set_AllowPNG(self, AllowPNG: hints.Incomplete) -> hints.Hresult: ...
        AllowPNG = hints.normal_property(_get_AllowPNG, _set_AllowPNG)
        def _get_ScreenSize(self) -> hints.Incomplete: ...
        def _set_ScreenSize(self, ScreenSize: hints.Incomplete) -> hints.Hresult: ...
        ScreenSize = hints.normal_property(_get_ScreenSize, _set_ScreenSize)
        def _get_Encoding(self) -> hints.Incomplete: ...
        def _set_Encoding(self, Encoding: hints.Incomplete) -> hints.Hresult: ...
        Encoding = hints.normal_property(_get_Encoding, _set_Encoding)
        def _get_FolderSuffix(self) -> hints.Incomplete: ...
        FolderSuffix = hints.normal_property(_get_FolderSuffix)
        def UseDefaultFolderSuffix(self) -> hints.Hresult: ...
        def _get_TargetBrowser(self) -> hints.Incomplete: ...
        def _set_TargetBrowser(self, TargetBrowser: hints.Incomplete) -> hints.Hresult: ...
        TargetBrowser = hints.normal_property(_get_TargetBrowser, _set_TargetBrowser)
        def _get_HTMLVersion(self) -> hints.Incomplete: ...
        def _set_HTMLVersion(self, HTMLVersion: hints.Incomplete) -> hints.Hresult: ...
        HTMLVersion = hints.normal_property(_get_HTMLVersion, _set_HTMLVersion)


WebOptions._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'IncludeNavigation',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'IncludeNavigation',
        )
    ),
    COMMETHOD(
        [dispid(2001), 'propput'],
        HRESULT,
        'IncludeNavigation',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'IncludeNavigation',
        )
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'FrameColors',
        (['out', 'retval'], POINTER(PpFrameColors), 'FrameColors')
    ),
    COMMETHOD(
        [dispid(2002), 'propput'],
        HRESULT,
        'FrameColors',
        (['in'], PpFrameColors, 'FrameColors')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'ResizeGraphics',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'ResizeGraphics',
        )
    ),
    COMMETHOD(
        [dispid(2003), 'propput'],
        HRESULT,
        'ResizeGraphics',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'ResizeGraphics',
        )
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'ShowSlideAnimation',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'ShowSlideAnimation',
        )
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'ShowSlideAnimation',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'ShowSlideAnimation',
        )
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'OrganizeInFolder',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'OrganizeInFolder',
        )
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'OrganizeInFolder',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'OrganizeInFolder',
        )
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'UseLongFileNames',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'UseLongFileNames',
        )
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'UseLongFileNames',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'UseLongFileNames',
        )
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'RelyOnVML',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'RelyOnVML',
        )
    ),
    COMMETHOD(
        [dispid(2007), 'propput'],
        HRESULT,
        'RelyOnVML',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'RelyOnVML',
        )
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'AllowPNG',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'AllowPNG',
        )
    ),
    COMMETHOD(
        [dispid(2008), 'propput'],
        HRESULT,
        'AllowPNG',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'AllowPNG',
        )
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'ScreenSize',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoScreenSize),
            'ScreenSize',
        )
    ),
    COMMETHOD(
        [dispid(2009), 'propput'],
        HRESULT,
        'ScreenSize',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoScreenSize,
            'ScreenSize',
        )
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'Encoding',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoEncoding),
            'Encoding',
        )
    ),
    COMMETHOD(
        [dispid(2010), 'propput'],
        HRESULT,
        'Encoding',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoEncoding,
            'Encoding',
        )
    ),
    COMMETHOD(
        [dispid(2011), 'propget'],
        HRESULT,
        'FolderSuffix',
        (['out', 'retval'], POINTER(BSTR), 'FolderSuffix')
    ),
    COMMETHOD([dispid(2012)], HRESULT, 'UseDefaultFolderSuffix'),
    COMMETHOD(
        [dispid(2013), 'propget'],
        HRESULT,
        'TargetBrowser',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTargetBrowser),
            'TargetBrowser',
        )
    ),
    COMMETHOD(
        [dispid(2013), 'propput'],
        HRESULT,
        'TargetBrowser',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTargetBrowser,
            'TargetBrowser',
        )
    ),
    COMMETHOD(
        [dispid(2014), 'propget'],
        HRESULT,
        'HTMLVersion',
        (['out', 'retval'], POINTER(PpHTMLVersion), 'HTMLVersion')
    ),
    COMMETHOD(
        [dispid(2014), 'propput'],
        HRESULT,
        'HTMLVersion',
        (['in'], PpHTMLVersion, 'HTMLVersion')
    ),
]

################################################################
# code template for WebOptions implementation
# class WebOptions_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return IncludeNavigation
#     def _set(self, IncludeNavigation):
#         '-no docstring-'
#     IncludeNavigation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return FrameColors
#     def _set(self, FrameColors):
#         '-no docstring-'
#     FrameColors = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ResizeGraphics
#     def _set(self, ResizeGraphics):
#         '-no docstring-'
#     ResizeGraphics = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ShowSlideAnimation
#     def _set(self, ShowSlideAnimation):
#         '-no docstring-'
#     ShowSlideAnimation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return OrganizeInFolder
#     def _set(self, OrganizeInFolder):
#         '-no docstring-'
#     OrganizeInFolder = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return UseLongFileNames
#     def _set(self, UseLongFileNames):
#         '-no docstring-'
#     UseLongFileNames = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RelyOnVML
#     def _set(self, RelyOnVML):
#         '-no docstring-'
#     RelyOnVML = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return AllowPNG
#     def _set(self, AllowPNG):
#         '-no docstring-'
#     AllowPNG = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ScreenSize
#     def _set(self, ScreenSize):
#         '-no docstring-'
#     ScreenSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Encoding
#     def _set(self, Encoding):
#         '-no docstring-'
#     Encoding = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def FolderSuffix(self):
#         '-no docstring-'
#         #return FolderSuffix
#
#     def UseDefaultFolderSuffix(self):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return TargetBrowser
#     def _set(self, TargetBrowser):
#         '-no docstring-'
#     TargetBrowser = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return HTMLVersion
#     def _set(self, HTMLVersion):
#         '-no docstring-'
#     HTMLVersion = property(_get, _set, doc = _set.__doc__)
#

DropLines._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(ChartBorder)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(ChartFormat)), 'RHS')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2006)],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2007)],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
]

################################################################
# code template for DropLines implementation
# class DropLines_Impl(object):
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     def Delete(self):
#         '-no docstring-'
#         #return RHS
#
#     def Select(self):
#         '-no docstring-'
#         #return RHS
#


class Fonts(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{91493467-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Item(self, Index: hints.Incomplete) -> 'Font': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def Replace(self, Original: hints.Incomplete, Replacement: hints.Incomplete) -> hints.Hresult: ...


Fonts._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(Font)), 'Item')
    ),
    COMMETHOD(
        [dispid(2003)],
        HRESULT,
        'Replace',
        (['in'], BSTR, 'Original'),
        (['in'], BSTR, 'Replacement')
    ),
]

################################################################
# code template for Fonts implementation
# class Fonts_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     def Replace(self, Original, Replacement):
#         '-no docstring-'
#         #return 
#

AutoCorrect._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'DisplayAutoCorrectOptions',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'DisplayAutoCorrectOptions')
    ),
    COMMETHOD(
        [dispid(2001), 'propput'],
        HRESULT,
        'DisplayAutoCorrectOptions',
        (['in'], VARIANT_BOOL, 'DisplayAutoCorrectOptions')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'DisplayAutoLayoutOptions',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'DisplayAutoLayoutOptions')
    ),
    COMMETHOD(
        [dispid(2002), 'propput'],
        HRESULT,
        'DisplayAutoLayoutOptions',
        (['in'], VARIANT_BOOL, 'DisplayAutoLayoutOptions')
    ),
]

################################################################
# code template for AutoCorrect implementation
# class AutoCorrect_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return DisplayAutoCorrectOptions
#     def _set(self, DisplayAutoCorrectOptions):
#         '-no docstring-'
#     DisplayAutoCorrectOptions = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return DisplayAutoLayoutOptions
#     def _set(self, DisplayAutoLayoutOptions):
#         '-no docstring-'
#     DisplayAutoLayoutOptions = property(_get, _set, doc = _set.__doc__)
#


class Timing(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934E0-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Duration(self) -> hints.Incomplete: ...
        def _set_Duration(self, Duration: hints.Incomplete) -> hints.Hresult: ...
        Duration = hints.normal_property(_get_Duration, _set_Duration)
        def _get_TriggerType(self) -> hints.Incomplete: ...
        def _set_TriggerType(self, TriggerType: hints.Incomplete) -> hints.Hresult: ...
        TriggerType = hints.normal_property(_get_TriggerType, _set_TriggerType)
        def _get_TriggerDelayTime(self) -> hints.Incomplete: ...
        def _set_TriggerDelayTime(self, TriggerDelayTime: hints.Incomplete) -> hints.Hresult: ...
        TriggerDelayTime = hints.normal_property(_get_TriggerDelayTime, _set_TriggerDelayTime)
        def _get_TriggerShape(self) -> 'Shape': ...
        def _set_TriggerShape(self, TriggerShape: hints.Incomplete) -> hints.Hresult: ...
        TriggerShape = hints.normal_property(_get_TriggerShape, _set_TriggerShape)
        def _get_RepeatCount(self) -> hints.Incomplete: ...
        def _set_RepeatCount(self, RepeatCount: hints.Incomplete) -> hints.Hresult: ...
        RepeatCount = hints.normal_property(_get_RepeatCount, _set_RepeatCount)
        def _get_RepeatDuration(self) -> hints.Incomplete: ...
        def _set_RepeatDuration(self, RepeatDuration: hints.Incomplete) -> hints.Hresult: ...
        RepeatDuration = hints.normal_property(_get_RepeatDuration, _set_RepeatDuration)
        def _get_Speed(self) -> hints.Incomplete: ...
        def _set_Speed(self, Speed: hints.Incomplete) -> hints.Hresult: ...
        Speed = hints.normal_property(_get_Speed, _set_Speed)
        def _get_Accelerate(self) -> hints.Incomplete: ...
        def _set_Accelerate(self, Accelerate: hints.Incomplete) -> hints.Hresult: ...
        Accelerate = hints.normal_property(_get_Accelerate, _set_Accelerate)
        def _get_Decelerate(self) -> hints.Incomplete: ...
        def _set_Decelerate(self, Decelerate: hints.Incomplete) -> hints.Hresult: ...
        Decelerate = hints.normal_property(_get_Decelerate, _set_Decelerate)
        def _get_AutoReverse(self) -> hints.Incomplete: ...
        def _set_AutoReverse(self, AutoReverse: hints.Incomplete) -> hints.Hresult: ...
        AutoReverse = hints.normal_property(_get_AutoReverse, _set_AutoReverse)
        def _get_SmoothStart(self) -> hints.Incomplete: ...
        def _set_SmoothStart(self, SmoothStart: hints.Incomplete) -> hints.Hresult: ...
        SmoothStart = hints.normal_property(_get_SmoothStart, _set_SmoothStart)
        def _get_SmoothEnd(self) -> hints.Incomplete: ...
        def _set_SmoothEnd(self, SmoothEnd: hints.Incomplete) -> hints.Hresult: ...
        SmoothEnd = hints.normal_property(_get_SmoothEnd, _set_SmoothEnd)
        def _get_RewindAtEnd(self) -> hints.Incomplete: ...
        def _set_RewindAtEnd(self, RewindAtEnd: hints.Incomplete) -> hints.Hresult: ...
        RewindAtEnd = hints.normal_property(_get_RewindAtEnd, _set_RewindAtEnd)
        def _get_Restart(self) -> hints.Incomplete: ...
        def _set_Restart(self, Restart: hints.Incomplete) -> hints.Hresult: ...
        Restart = hints.normal_property(_get_Restart, _set_Restart)
        def _get_BounceEnd(self) -> hints.Incomplete: ...
        def _set_BounceEnd(self, BounceEnd: hints.Incomplete) -> hints.Hresult: ...
        BounceEnd = hints.normal_property(_get_BounceEnd, _set_BounceEnd)
        def _get_BounceEndIntensity(self) -> hints.Incomplete: ...
        def _set_BounceEndIntensity(self, BounceEndIntensity: hints.Incomplete) -> hints.Hresult: ...
        BounceEndIntensity = hints.normal_property(_get_BounceEndIntensity, _set_BounceEndIntensity)
        def _get_TriggerBookmark(self) -> hints.Incomplete: ...
        def _set_TriggerBookmark(self, TriggerBookmark: hints.Incomplete) -> hints.Hresult: ...
        TriggerBookmark = hints.normal_property(_get_TriggerBookmark, _set_TriggerBookmark)


class EffectParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934E1-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Direction(self) -> hints.Incomplete: ...
        def _set_Direction(self, Direction: hints.Incomplete) -> hints.Hresult: ...
        Direction = hints.normal_property(_get_Direction, _set_Direction)
        def _get_Amount(self) -> hints.Incomplete: ...
        def _set_Amount(self, Amount: hints.Incomplete) -> hints.Hresult: ...
        Amount = hints.normal_property(_get_Amount, _set_Amount)
        def _get_Size(self) -> hints.Incomplete: ...
        def _set_Size(self, Size: hints.Incomplete) -> hints.Hresult: ...
        Size = hints.normal_property(_get_Size, _set_Size)
        def _get_Color2(self) -> 'ColorFormat': ...
        Color2 = hints.normal_property(_get_Color2)
        def _get_Relative(self) -> hints.Incomplete: ...
        def _set_Relative(self, Relative: hints.Incomplete) -> hints.Hresult: ...
        Relative = hints.normal_property(_get_Relative, _set_Relative)
        def _get_FontName(self) -> hints.Incomplete: ...
        def _set_FontName(self, FontName: hints.Incomplete) -> hints.Hresult: ...
        FontName = hints.normal_property(_get_FontName, _set_FontName)


class EffectInformation(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934E2-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_AfterEffect(self) -> hints.Incomplete: ...
        AfterEffect = hints.normal_property(_get_AfterEffect)
        def _get_AnimateBackground(self) -> hints.Incomplete: ...
        AnimateBackground = hints.normal_property(_get_AnimateBackground)
        def _get_AnimateTextInReverse(self) -> hints.Incomplete: ...
        AnimateTextInReverse = hints.normal_property(_get_AnimateTextInReverse)
        def _get_BuildByLevelEffect(self) -> hints.Incomplete: ...
        BuildByLevelEffect = hints.normal_property(_get_BuildByLevelEffect)
        def _get_Dim(self) -> 'ColorFormat': ...
        Dim = hints.normal_property(_get_Dim)
        def _get_PlaySettings(self) -> 'PlaySettings': ...
        PlaySettings = hints.normal_property(_get_PlaySettings)
        def _get_SoundEffect(self) -> 'SoundEffect': ...
        SoundEffect = hints.normal_property(_get_SoundEffect)
        def _get_TextUnitEffect(self) -> hints.Incomplete: ...
        TextUnitEffect = hints.normal_property(_get_TextUnitEffect)


Effect._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Shape',
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Shape')
    ),
    COMMETHOD(
        [dispid(2003), 'propput'],
        HRESULT,
        'Shape',
        (['in'], POINTER(Shape), 'Shape')
    ),
    COMMETHOD(
        [dispid(2004)],
        HRESULT,
        'MoveTo',
        (['in'], c_int, 'toPos')
    ),
    COMMETHOD(
        [dispid(2005)],
        HRESULT,
        'MoveBefore',
        (['in'], POINTER(Effect), 'Effect')
    ),
    COMMETHOD(
        [dispid(2006)],
        HRESULT,
        'MoveAfter',
        (['in'], POINTER(Effect), 'Effect')
    ),
    COMMETHOD([dispid(2007)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'Index',
        (['out', 'retval'], POINTER(c_int), 'Index')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'Timing',
        (['out', 'retval'], POINTER(POINTER(Timing)), 'Timing')
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'EffectType',
        (['out', 'retval'], POINTER(MsoAnimEffect), 'EffectType')
    ),
    COMMETHOD(
        [dispid(2010), 'propput'],
        HRESULT,
        'EffectType',
        (['in'], MsoAnimEffect, 'EffectType')
    ),
    COMMETHOD(
        [dispid(2011), 'propget'],
        HRESULT,
        'EffectParameters',
        (
            ['out', 'retval'],
            POINTER(POINTER(EffectParameters)),
            'EffectParameters',
        )
    ),
    COMMETHOD(
        [dispid(2012), 'propget'],
        HRESULT,
        'TextRangeStart',
        (['out', 'retval'], POINTER(c_int), 'TextRangeStart')
    ),
    COMMETHOD(
        [dispid(2013), 'propget'],
        HRESULT,
        'TextRangeLength',
        (['out', 'retval'], POINTER(c_int), 'TextRangeLength')
    ),
    COMMETHOD(
        [dispid(2014), 'propget'],
        HRESULT,
        'Paragraph',
        (['out', 'retval'], POINTER(c_int), 'Paragraph')
    ),
    COMMETHOD(
        [dispid(2014), 'propput'],
        HRESULT,
        'Paragraph',
        (['in'], c_int, 'Paragraph')
    ),
    COMMETHOD(
        [dispid(2015), 'propget'],
        HRESULT,
        'DisplayName',
        (['out', 'retval'], POINTER(BSTR), 'DisplayName')
    ),
    COMMETHOD(
        [dispid(2016), 'propget'],
        HRESULT,
        'Exit',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Exit',
        )
    ),
    COMMETHOD(
        [dispid(2016), 'propput'],
        HRESULT,
        'Exit',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Exit',
        )
    ),
    COMMETHOD(
        [dispid(2017), 'propget'],
        HRESULT,
        'Behaviors',
        (['out', 'retval'], POINTER(POINTER(AnimationBehaviors)), 'Behaviors')
    ),
    COMMETHOD(
        [dispid(2018), 'propget'],
        HRESULT,
        'EffectInformation',
        (
            ['out', 'retval'],
            POINTER(POINTER(EffectInformation)),
            'EffectInformation',
        )
    ),
]

################################################################
# code template for Effect implementation
# class Effect_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return Shape
#     def _set(self, Shape):
#         '-no docstring-'
#     Shape = property(_get, _set, doc = _set.__doc__)
#
#     def MoveTo(self, toPos):
#         '-no docstring-'
#         #return 
#
#     def MoveBefore(self, Effect):
#         '-no docstring-'
#         #return 
#
#     def MoveAfter(self, Effect):
#         '-no docstring-'
#         #return 
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Index(self):
#         '-no docstring-'
#         #return Index
#
#     @property
#     def Timing(self):
#         '-no docstring-'
#         #return Timing
#
#     def _get(self):
#         '-no docstring-'
#         #return EffectType
#     def _set(self, EffectType):
#         '-no docstring-'
#     EffectType = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def EffectParameters(self):
#         '-no docstring-'
#         #return EffectParameters
#
#     @property
#     def TextRangeStart(self):
#         '-no docstring-'
#         #return TextRangeStart
#
#     @property
#     def TextRangeLength(self):
#         '-no docstring-'
#         #return TextRangeLength
#
#     def _get(self):
#         '-no docstring-'
#         #return Paragraph
#     def _set(self, Paragraph):
#         '-no docstring-'
#     Paragraph = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def DisplayName(self):
#         '-no docstring-'
#         #return DisplayName
#
#     def _get(self):
#         '-no docstring-'
#         #return Exit
#     def _set(self, Exit):
#         '-no docstring-'
#     Exit = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Behaviors(self):
#         '-no docstring-'
#         #return Behaviors
#
#     @property
#     def EffectInformation(self):
#         '-no docstring-'
#         #return EffectInformation
#

ObjectVerbs._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(BSTR), 'Item')
    ),
]

################################################################
# code template for ObjectVerbs implementation
# class ObjectVerbs_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#


class LegendEntries(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A6F-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Item(self, Index: hints.Incomplete) -> 'LegendEntry': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _NewEnum(self) -> hints.Incomplete: ...
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _Default(self, Index: hints.Incomplete) -> 'LegendEntry': ...


class LegendEntry(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A70-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Delete(self) -> hints.Incomplete: ...
        def _get_Font(self) -> 'ChartFont': ...
        Font = hints.normal_property(_get_Font)
        def _get_Index(self) -> hints.Incomplete: ...
        Index = hints.normal_property(_get_Index)
        def _get_LegendKey(self) -> 'LegendKey': ...
        LegendKey = hints.normal_property(_get_LegendKey)
        def Select(self) -> hints.Incomplete: ...
        def _get_AutoScaleFont(self) -> hints.Incomplete: ...
        def _set_AutoScaleFont(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        AutoScaleFont = hints.normal_property(_get_AutoScaleFont, _set_AutoScaleFont)
        def _get_Left(self) -> hints.Incomplete: ...
        Left = hints.normal_property(_get_Left)
        def _get_Top(self) -> hints.Incomplete: ...
        Top = hints.normal_property(_get_Top)
        def _get_Width(self) -> hints.Incomplete: ...
        Width = hints.normal_property(_get_Width)
        def _get_Height(self) -> hints.Incomplete: ...
        Height = hints.normal_property(_get_Height)
        def _get_Format(self) -> 'ChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)


LegendEntries._methods_ = [
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(118), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(170)],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(LegendEntry)), 'RHS')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'RHS')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(0), 'nonbrowsable'],
        HRESULT,
        '_Default',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(LegendEntry)), 'RHS')
    ),
]

################################################################
# code template for LegendEntries implementation
# class LegendEntries_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return RHS
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return RHS
#
#     def _NewEnum(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     def _Default(self, Index):
#         '-no docstring-'
#         #return RHS
#


class MotionEffect(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934E5-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_ByX(self) -> hints.Incomplete: ...
        def _set_ByX(self, ByX: hints.Incomplete) -> hints.Hresult: ...
        ByX = hints.normal_property(_get_ByX, _set_ByX)
        def _get_ByY(self) -> hints.Incomplete: ...
        def _set_ByY(self, ByY: hints.Incomplete) -> hints.Hresult: ...
        ByY = hints.normal_property(_get_ByY, _set_ByY)
        def _get_FromX(self) -> hints.Incomplete: ...
        def _set_FromX(self, FromX: hints.Incomplete) -> hints.Hresult: ...
        FromX = hints.normal_property(_get_FromX, _set_FromX)
        def _get_FromY(self) -> hints.Incomplete: ...
        def _set_FromY(self, FromY: hints.Incomplete) -> hints.Hresult: ...
        FromY = hints.normal_property(_get_FromY, _set_FromY)
        def _get_ToX(self) -> hints.Incomplete: ...
        def _set_ToX(self, ToX: hints.Incomplete) -> hints.Hresult: ...
        ToX = hints.normal_property(_get_ToX, _set_ToX)
        def _get_ToY(self) -> hints.Incomplete: ...
        def _set_ToY(self, ToY: hints.Incomplete) -> hints.Hresult: ...
        ToY = hints.normal_property(_get_ToY, _set_ToY)
        def _get_Path(self) -> hints.Incomplete: ...
        def _set_Path(self, Path: hints.Incomplete) -> hints.Hresult: ...
        Path = hints.normal_property(_get_Path, _set_Path)


class ColorEffect(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934E6-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_By(self) -> 'ColorFormat': ...
        By = hints.normal_property(_get_By)
        def _get_From(self) -> 'ColorFormat': ...
        From = hints.normal_property(_get_From)
        def _get_To(self) -> 'ColorFormat': ...
        To = hints.normal_property(_get_To)


class ScaleEffect(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934E7-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_ByX(self) -> hints.Incomplete: ...
        def _set_ByX(self, ByX: hints.Incomplete) -> hints.Hresult: ...
        ByX = hints.normal_property(_get_ByX, _set_ByX)
        def _get_ByY(self) -> hints.Incomplete: ...
        def _set_ByY(self, ByY: hints.Incomplete) -> hints.Hresult: ...
        ByY = hints.normal_property(_get_ByY, _set_ByY)
        def _get_FromX(self) -> hints.Incomplete: ...
        def _set_FromX(self, FromX: hints.Incomplete) -> hints.Hresult: ...
        FromX = hints.normal_property(_get_FromX, _set_FromX)
        def _get_FromY(self) -> hints.Incomplete: ...
        def _set_FromY(self, FromY: hints.Incomplete) -> hints.Hresult: ...
        FromY = hints.normal_property(_get_FromY, _set_FromY)
        def _get_ToX(self) -> hints.Incomplete: ...
        def _set_ToX(self, ToX: hints.Incomplete) -> hints.Hresult: ...
        ToX = hints.normal_property(_get_ToX, _set_ToX)
        def _get_ToY(self) -> hints.Incomplete: ...
        def _set_ToY(self, ToY: hints.Incomplete) -> hints.Hresult: ...
        ToY = hints.normal_property(_get_ToY, _set_ToY)


class RotationEffect(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934E8-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_By(self) -> hints.Incomplete: ...
        def _set_By(self, By: hints.Incomplete) -> hints.Hresult: ...
        By = hints.normal_property(_get_By, _set_By)
        def _get_From(self) -> hints.Incomplete: ...
        def _set_From(self, From: hints.Incomplete) -> hints.Hresult: ...
        From = hints.normal_property(_get_From, _set_From)
        def _get_To(self) -> hints.Incomplete: ...
        def _set_To(self, To: hints.Incomplete) -> hints.Hresult: ...
        To = hints.normal_property(_get_To, _set_To)


class CommandEffect(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934EF-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Type(self) -> hints.Incomplete: ...
        def _set_Type(self, Type: hints.Incomplete) -> hints.Hresult: ...
        Type = hints.normal_property(_get_Type, _set_Type)
        def _get_Command(self) -> hints.Incomplete: ...
        def _set_Command(self, Command: hints.Incomplete) -> hints.Hresult: ...
        Command = hints.normal_property(_get_Command, _set_Command)
        def _get_bookmark(self) -> hints.Incomplete: ...
        def _set_bookmark(self, bookmark: hints.Incomplete) -> hints.Hresult: ...
        bookmark = hints.normal_property(_get_bookmark, _set_bookmark)


class FilterEffect(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934F0-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Type(self) -> hints.Incomplete: ...
        def _set_Type(self, Type: hints.Incomplete) -> hints.Hresult: ...
        Type = hints.normal_property(_get_Type, _set_Type)
        def _get_Subtype(self) -> hints.Incomplete: ...
        def _set_Subtype(self, Subtype: hints.Incomplete) -> hints.Hresult: ...
        Subtype = hints.normal_property(_get_Subtype, _set_Subtype)
        def _get_Reveal(self) -> hints.Incomplete: ...
        def _set_Reveal(self, Reveal: hints.Incomplete) -> hints.Hresult: ...
        Reveal = hints.normal_property(_get_Reveal, _set_Reveal)


class SetEffect(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934F1-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Property(self) -> hints.Incomplete: ...
        def _set_Property(self, Property: hints.Incomplete) -> hints.Hresult: ...
        Property = hints.normal_property(_get_Property, _set_Property)
        def _get_To(self) -> hints.Incomplete: ...
        def _set_To(self, To: hints.Incomplete) -> hints.Hresult: ...
        To = hints.normal_property(_get_To, _set_To)


AnimationBehavior._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Additive',
        (['out', 'retval'], POINTER(MsoAnimAdditive), 'Additive')
    ),
    COMMETHOD(
        [dispid(2003), 'propput'],
        HRESULT,
        'Additive',
        (['in'], MsoAnimAdditive, 'Additive')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Accumulate',
        (['out', 'retval'], POINTER(MsoAnimAccumulate), 'Accumulate')
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'Accumulate',
        (['in'], MsoAnimAccumulate, 'Accumulate')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(MsoAnimType), 'Type')
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'Type',
        (['in'], MsoAnimType, 'Type')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'MotionEffect',
        (['out', 'retval'], POINTER(POINTER(MotionEffect)), 'MotionEffect')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'ColorEffect',
        (['out', 'retval'], POINTER(POINTER(ColorEffect)), 'ColorEffect')
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'ScaleEffect',
        (['out', 'retval'], POINTER(POINTER(ScaleEffect)), 'ScaleEffect')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'RotationEffect',
        (['out', 'retval'], POINTER(POINTER(RotationEffect)), 'RotationEffect')
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'PropertyEffect',
        (['out', 'retval'], POINTER(POINTER(PropertyEffect)), 'PropertyEffect')
    ),
    COMMETHOD(
        [dispid(2011), 'propget'],
        HRESULT,
        'Timing',
        (['out', 'retval'], POINTER(POINTER(Timing)), 'Timing')
    ),
    COMMETHOD([dispid(2012)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(2013), 'propget'],
        HRESULT,
        'CommandEffect',
        (['out', 'retval'], POINTER(POINTER(CommandEffect)), 'CommandEffect')
    ),
    COMMETHOD(
        [dispid(2014), 'propget'],
        HRESULT,
        'FilterEffect',
        (['out', 'retval'], POINTER(POINTER(FilterEffect)), 'FilterEffect')
    ),
    COMMETHOD(
        [dispid(2015), 'propget'],
        HRESULT,
        'SetEffect',
        (['out', 'retval'], POINTER(POINTER(SetEffect)), 'SetEffect')
    ),
]

################################################################
# code template for AnimationBehavior implementation
# class AnimationBehavior_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return Additive
#     def _set(self, Additive):
#         '-no docstring-'
#     Additive = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Accumulate
#     def _set(self, Accumulate):
#         '-no docstring-'
#     Accumulate = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Type
#     def _set(self, Type):
#         '-no docstring-'
#     Type = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def MotionEffect(self):
#         '-no docstring-'
#         #return MotionEffect
#
#     @property
#     def ColorEffect(self):
#         '-no docstring-'
#         #return ColorEffect
#
#     @property
#     def ScaleEffect(self):
#         '-no docstring-'
#         #return ScaleEffect
#
#     @property
#     def RotationEffect(self):
#         '-no docstring-'
#         #return RotationEffect
#
#     @property
#     def PropertyEffect(self):
#         '-no docstring-'
#         #return PropertyEffect
#
#     @property
#     def Timing(self):
#         '-no docstring-'
#         #return Timing
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def CommandEffect(self):
#         '-no docstring-'
#         #return CommandEffect
#
#     @property
#     def FilterEffect(self):
#         '-no docstring-'
#         #return FilterEffect
#
#     @property
#     def SetEffect(self):
#         '-no docstring-'
#         #return SetEffect
#


class MouseDownHandler(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{914934BF-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['hidden']

    if TYPE_CHECKING:  # commembers
        def OnMouseDown(self, activeWin: hints.Incomplete) -> hints.Hresult: ...


MouseDownHandler._methods_ = [
    COMMETHOD(
        [],
        HRESULT,
        'OnMouseDown',
        (['in'], POINTER(IUnknown), 'activeWin')
    ),
]

################################################################
# code template for MouseDownHandler implementation
# class MouseDownHandler_Impl(object):
#     def OnMouseDown(self, activeWin):
#         '-no docstring-'
#         #return 
#


class Points(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A74-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Item(self, Index: hints.Incomplete) -> 'Point': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _NewEnum(self) -> hints.Incomplete: ...
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _Default(self, Index: hints.Incomplete) -> 'Point': ...


class Point(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A73-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Border(self) -> 'ChartBorder': ...
        Border = hints.normal_property(_get_Border)
        def ClearFormats(self) -> hints.Incomplete: ...
        def Copy(self) -> hints.Incomplete: ...
        def _get_DataLabel(self) -> 'DataLabel': ...
        DataLabel = hints.normal_property(_get_DataLabel)
        def Delete(self) -> hints.Incomplete: ...
        def _get_Explosion(self) -> hints.Incomplete: ...
        def _set_Explosion(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Explosion = hints.normal_property(_get_Explosion, _set_Explosion)
        def _get_HasDataLabel(self) -> hints.Incomplete: ...
        def _set_HasDataLabel(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        HasDataLabel = hints.normal_property(_get_HasDataLabel, _set_HasDataLabel)
        def _get_Interior(self) -> 'Interior': ...
        Interior = hints.normal_property(_get_Interior)
        def _get_InvertIfNegative(self) -> hints.Incomplete: ...
        def _set_InvertIfNegative(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        InvertIfNegative = hints.normal_property(_get_InvertIfNegative, _set_InvertIfNegative)
        def _get_MarkerBackgroundColor(self) -> hints.Incomplete: ...
        def _set_MarkerBackgroundColor(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MarkerBackgroundColor = hints.normal_property(_get_MarkerBackgroundColor, _set_MarkerBackgroundColor)
        def _get_MarkerBackgroundColorIndex(self) -> hints.Incomplete: ...
        def _set_MarkerBackgroundColorIndex(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MarkerBackgroundColorIndex = hints.normal_property(_get_MarkerBackgroundColorIndex, _set_MarkerBackgroundColorIndex)
        def _get_MarkerForegroundColor(self) -> hints.Incomplete: ...
        def _set_MarkerForegroundColor(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MarkerForegroundColor = hints.normal_property(_get_MarkerForegroundColor, _set_MarkerForegroundColor)
        def _get_MarkerForegroundColorIndex(self) -> hints.Incomplete: ...
        def _set_MarkerForegroundColorIndex(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MarkerForegroundColorIndex = hints.normal_property(_get_MarkerForegroundColorIndex, _set_MarkerForegroundColorIndex)
        def _get_MarkerSize(self) -> hints.Incomplete: ...
        def _set_MarkerSize(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MarkerSize = hints.normal_property(_get_MarkerSize, _set_MarkerSize)
        def _get_MarkerStyle(self) -> hints.Incomplete: ...
        def _set_MarkerStyle(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MarkerStyle = hints.normal_property(_get_MarkerStyle, _set_MarkerStyle)
        def Paste(self) -> hints.Incomplete: ...
        def _get_PictureType(self) -> hints.Incomplete: ...
        def _set_PictureType(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        PictureType = hints.normal_property(_get_PictureType, _set_PictureType)
        def Select(self) -> hints.Incomplete: ...
        def _get_ApplyPictToSides(self) -> hints.Incomplete: ...
        def _set_ApplyPictToSides(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ApplyPictToSides = hints.normal_property(_get_ApplyPictToSides, _set_ApplyPictToSides)
        def _get_ApplyPictToFront(self) -> hints.Incomplete: ...
        def _set_ApplyPictToFront(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ApplyPictToFront = hints.normal_property(_get_ApplyPictToFront, _set_ApplyPictToFront)
        def _get_ApplyPictToEnd(self) -> hints.Incomplete: ...
        def _set_ApplyPictToEnd(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ApplyPictToEnd = hints.normal_property(_get_ApplyPictToEnd, _set_ApplyPictToEnd)
        def _get_Shadow(self) -> hints.Incomplete: ...
        def _set_Shadow(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Shadow = hints.normal_property(_get_Shadow, _set_Shadow)
        def _get_SecondaryPlot(self) -> hints.Incomplete: ...
        def _set_SecondaryPlot(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        SecondaryPlot = hints.normal_property(_get_SecondaryPlot, _set_SecondaryPlot)
        def _get_Fill(self) -> 'ChartFillFormat': ...
        Fill = hints.normal_property(_get_Fill)
        def _get_Has3DEffect(self) -> hints.Incomplete: ...
        def _set_Has3DEffect(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Has3DEffect = hints.normal_property(_get_Has3DEffect, _set_Has3DEffect)
        def _get_Format(self) -> 'ChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_PictureUnit2(self) -> hints.Incomplete: ...
        def _set_PictureUnit2(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        PictureUnit2 = hints.normal_property(_get_PictureUnit2, _set_PictureUnit2)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _ApplyDataLabels(self, Type: hints.Incomplete = ..., LegendKey: hints.Incomplete = ..., AutoText: hints.Incomplete = ..., HasLeaderLines: hints.Incomplete = ...) -> hints.Incomplete: ...
        def ApplyDataLabels(self, Type: hints.Incomplete = ..., LegendKey: hints.Incomplete = ..., AutoText: hints.Incomplete = ..., HasLeaderLines: hints.Incomplete = ..., ShowSeriesName: hints.Incomplete = ..., ShowCategoryName: hints.Incomplete = ..., ShowValue: hints.Incomplete = ..., ShowPercentage: hints.Incomplete = ..., ShowBubbleSize: hints.Incomplete = ..., Separator: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _get_PictureUnit(self) -> hints.Incomplete: ...
        def _set_PictureUnit(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        PictureUnit = hints.normal_property(_get_PictureUnit, _set_PictureUnit)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Height(self) -> hints.Incomplete: ...
        Height = hints.normal_property(_get_Height)
        def _get_Width(self) -> hints.Incomplete: ...
        Width = hints.normal_property(_get_Width)
        def _get_Left(self) -> hints.Incomplete: ...
        Left = hints.normal_property(_get_Left)
        def _get_Top(self) -> hints.Incomplete: ...
        Top = hints.normal_property(_get_Top)
        def PieSliceLocation(self, loc: hints.Incomplete, Index: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _get_IsTotal(self) -> hints.Incomplete: ...
        def _set_IsTotal(self, pval: hints.Incomplete) -> hints.Hresult: ...
        IsTotal = hints.normal_property(_get_IsTotal, _set_IsTotal)
        def GetProperty(self, Id: hints.Incomplete) -> hints.Incomplete: ...
        def SetProperty(self, Id: hints.Incomplete, Value: hints.Incomplete) -> hints.Hresult: ...


Points._methods_ = [
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(118), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(170)],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(Point)), 'RHS')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'RHS')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(0), 'nonbrowsable'],
        HRESULT,
        '_Default',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(Point)), 'RHS')
    ),
]

################################################################
# code template for Points implementation
# class Points_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return RHS
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return RHS
#
#     def _NewEnum(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     def _Default(self, Index):
#         '-no docstring-'
#         #return RHS
#


class NamedSlideShow(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{9149345C-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def Delete(self) -> hints.Hresult: ...
        def _get_SlideIDs(self) -> hints.Incomplete: ...
        SlideIDs = hints.normal_property(_get_SlideIDs)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)


NamedSlideShows._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(NamedSlideShow)), 'Item')
    ),
    COMMETHOD(
        [dispid(2003)],
        HRESULT,
        'Add',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT, 'safeArrayOfSlideIDs'),
        (['out', 'retval'], POINTER(POINTER(NamedSlideShow)), 'Add')
    ),
]

################################################################
# code template for NamedSlideShows implementation
# class NamedSlideShows_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     def Add(self, Name, safeArrayOfSlideIDs):
#         '-no docstring-'
#         #return Add
#


class AnimationPoint(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934EB-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Delete(self) -> hints.Hresult: ...
        def _get_Time(self) -> hints.Incomplete: ...
        def _set_Time(self, Time: hints.Incomplete) -> hints.Hresult: ...
        Time = hints.normal_property(_get_Time, _set_Time)
        def _get_Value(self) -> hints.Incomplete: ...
        def _set_Value(self, Value: hints.Incomplete) -> hints.Hresult: ...
        Value = hints.normal_property(_get_Value, _set_Value)
        def _get_Formula(self) -> hints.Incomplete: ...
        def _set_Formula(self, Formula: hints.Incomplete) -> hints.Hresult: ...
        Formula = hints.normal_property(_get_Formula, _set_Formula)


AnimationPoints._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(AnimationPoint)), 'Item')
    ),
    COMMETHOD(
        [dispid(2003)],
        HRESULT,
        'Add',
        (['in', 'optional'], c_int, 'Index', -1),
        (['out', 'retval'], POINTER(POINTER(AnimationPoint)), 'Add')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Smooth',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Smooth',
        )
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'Smooth',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Smooth',
        )
    ),
]

################################################################
# code template for AnimationPoints implementation
# class AnimationPoints_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     def Add(self, Index):
#         '-no docstring-'
#         #return Add
#
#     def _get(self):
#         '-no docstring-'
#         #return Smooth
#     def _set(self, Smooth):
#         '-no docstring-'
#     Smooth = property(_get, _set, doc = _set.__doc__)
#

Options._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'DisplayPasteOptions',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'DisplayPasteOptions',
        )
    ),
    COMMETHOD(
        [dispid(2001), 'propput'],
        HRESULT,
        'DisplayPasteOptions',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'DisplayPasteOptions',
        )
    ),
    COMMETHOD(
        [dispid(2002), 'hidden', 'propget'],
        HRESULT,
        'DoNotPromptForConvert',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'DoNotPromptForConvert',
        )
    ),
    COMMETHOD(
        [dispid(2002), 'hidden', 'propput'],
        HRESULT,
        'DoNotPromptForConvert',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'DoNotPromptForConvert',
        )
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'ShowCoauthoringMergeChanges',
        (
            ['out', 'retval'],
            POINTER(VARIANT_BOOL),
            'ShowCoauthoringMergeChanges',
        )
    ),
    COMMETHOD(
        [dispid(2003), 'propput'],
        HRESULT,
        'ShowCoauthoringMergeChanges',
        (['in'], VARIANT_BOOL, 'ShowCoauthoringMergeChanges')
    ),
]

################################################################
# code template for Options implementation
# class Options_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return DisplayPasteOptions
#     def _set(self, DisplayPasteOptions):
#         '-no docstring-'
#     DisplayPasteOptions = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return DoNotPromptForConvert
#     def _set(self, DoNotPromptForConvert):
#         '-no docstring-'
#     DoNotPromptForConvert = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ShowCoauthoringMergeChanges
#     def _set(self, ShowCoauthoringMergeChanges):
#         '-no docstring-'
#     ShowCoauthoringMergeChanges = property(_get, _set, doc = _set.__doc__)
#

PlotArea._methods_ = [
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'bstr')
    ),
    COMMETHOD(
        [dispid(235)],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppparent')
    ),
    COMMETHOD(
        [dispid(128), 'hidden', 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(ChartBorder)), 'ppborder')
    ),
    COMMETHOD(
        [dispid(112)],
        HRESULT,
        'ClearFormats',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(123), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(123), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(129), 'hidden', 'propget'],
        HRESULT,
        'Interior',
        (['out', 'retval'], POINTER(POINTER(Interior)), 'ppinterior')
    ),
    COMMETHOD(
        [dispid(1663), 'hidden', 'propget'],
        HRESULT,
        'Fill',
        (['out', 'retval'], POINTER(POINTER(ChartFillFormat)), 'ppFill')
    ),
    COMMETHOD(
        [dispid(127), 'propget'],
        HRESULT,
        'Left',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(127), 'propput'],
        HRESULT,
        'Left',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(126), 'propget'],
        HRESULT,
        'Top',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(126), 'propput'],
        HRESULT,
        'Top',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(122), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(122), 'propput'],
        HRESULT,
        'Width',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(1667), 'propget'],
        HRESULT,
        'InsideLeft',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(1667), 'propput'],
        HRESULT,
        'InsideLeft',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(1668), 'propget'],
        HRESULT,
        'InsideTop',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(1668), 'propput'],
        HRESULT,
        'InsideTop',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(1669), 'propget'],
        HRESULT,
        'InsideWidth',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(1669), 'propput'],
        HRESULT,
        'InsideWidth',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(1670), 'propget'],
        HRESULT,
        'InsideHeight',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(1670), 'propput'],
        HRESULT,
        'InsideHeight',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(1671), 'propget'],
        HRESULT,
        'Position',
        (['out', 'retval'], POINTER(XlChartElementPosition), 'RHS')
    ),
    COMMETHOD(
        [dispid(1671), 'propput'],
        HRESULT,
        'Position',
        (['in'], XlChartElementPosition, 'RHS')
    ),
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(ChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2003)],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'Id'),
        (['out', 'retval'], POINTER(VARIANT), 'pValue')
    ),
    COMMETHOD(
        [dispid(2004)],
        HRESULT,
        'SetProperty',
        (['in'], BSTR, 'Id'),
        (['in'], VARIANT, 'Value')
    ),
]

################################################################
# code template for PlotArea implementation
# class PlotArea_Impl(object):
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return bstr
#
#     def Select(self):
#         '-no docstring-'
#         #return pvar
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppparent
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return ppborder
#
#     def ClearFormats(self):
#         '-no docstring-'
#         #return pvar
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Interior(self):
#         '-no docstring-'
#         #return ppinterior
#
#     @property
#     def Fill(self):
#         '-no docstring-'
#         #return ppFill
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Left = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Top = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Width = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     InsideLeft = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     InsideTop = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     InsideWidth = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     InsideHeight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Position = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     def GetProperty(self, Id):
#         '-no docstring-'
#         #return pValue
#
#     def SetProperty(self, Id, Value):
#         '-no docstring-'
#         #return 
#


class OCXExtenderEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934C1-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['hidden']

    if TYPE_CHECKING:  # commembers
        def GotFocus(self) -> hints.Hresult: ...
        def LostFocus(self) -> hints.Hresult: ...


OCXExtenderEvents._methods_ = [
    COMMETHOD([], HRESULT, 'GotFocus'),
    COMMETHOD([], HRESULT, 'LostFocus'),
]

################################################################
# code template for OCXExtenderEvents implementation
# class OCXExtenderEvents_Impl(object):
#     def GotFocus(self):
#         '-no docstring-'
#         #return 
#
#     def LostFocus(self):
#         '-no docstring-'
#         #return 
#

LinkFormat._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'SourceFullName',
        (['out', 'retval'], POINTER(BSTR), 'SourceFullName')
    ),
    COMMETHOD(
        [dispid(2003), 'propput'],
        HRESULT,
        'SourceFullName',
        (['in'], BSTR, 'SourceFullName')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'AutoUpdate',
        (['out', 'retval'], POINTER(PpUpdateOption), 'AutoUpdate')
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'AutoUpdate',
        (['in'], PpUpdateOption, 'AutoUpdate')
    ),
    COMMETHOD([dispid(2005)], HRESULT, 'Update'),
    COMMETHOD([dispid(2006)], HRESULT, 'BreakLink'),
]

################################################################
# code template for LinkFormat implementation
# class LinkFormat_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return SourceFullName
#     def _set(self, SourceFullName):
#         '-no docstring-'
#     SourceFullName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return AutoUpdate
#     def _set(self, AutoUpdate):
#         '-no docstring-'
#     AutoUpdate = property(_get, _set, doc = _set.__doc__)
#
#     def Update(self):
#         '-no docstring-'
#         #return 
#
#     def BreakLink(self):
#         '-no docstring-'
#         #return 
#

Point._methods_ = [
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(128), 'hidden', 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(ChartBorder)), 'RHS')
    ),
    COMMETHOD(
        [dispid(112)],
        HRESULT,
        'ClearFormats',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(551)],
        HRESULT,
        'Copy',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(158), 'propget'],
        HRESULT,
        'DataLabel',
        (['out', 'retval'], POINTER(POINTER(DataLabel)), 'RHS')
    ),
    COMMETHOD(
        [dispid(117)],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(182), 'propget'],
        HRESULT,
        'Explosion',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(182), 'propput'],
        HRESULT,
        'Explosion',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(77), 'propget'],
        HRESULT,
        'HasDataLabel',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(77), 'propput'],
        HRESULT,
        'HasDataLabel',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(129), 'hidden', 'propget'],
        HRESULT,
        'Interior',
        (['out', 'retval'], POINTER(POINTER(Interior)), 'RHS')
    ),
    COMMETHOD(
        [dispid(132), 'propget'],
        HRESULT,
        'InvertIfNegative',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(132), 'propput'],
        HRESULT,
        'InvertIfNegative',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(73), 'propget'],
        HRESULT,
        'MarkerBackgroundColor',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(73), 'propput'],
        HRESULT,
        'MarkerBackgroundColor',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(74), 'propget'],
        HRESULT,
        'MarkerBackgroundColorIndex',
        (['out', 'retval'], POINTER(XlColorIndex), 'RHS')
    ),
    COMMETHOD(
        [dispid(74), 'propput'],
        HRESULT,
        'MarkerBackgroundColorIndex',
        (['in'], XlColorIndex, 'RHS')
    ),
    COMMETHOD(
        [dispid(75), 'propget'],
        HRESULT,
        'MarkerForegroundColor',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(75), 'propput'],
        HRESULT,
        'MarkerForegroundColor',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(76), 'propget'],
        HRESULT,
        'MarkerForegroundColorIndex',
        (['out', 'retval'], POINTER(XlColorIndex), 'RHS')
    ),
    COMMETHOD(
        [dispid(76), 'propput'],
        HRESULT,
        'MarkerForegroundColorIndex',
        (['in'], XlColorIndex, 'RHS')
    ),
    COMMETHOD(
        [dispid(231), 'propget'],
        HRESULT,
        'MarkerSize',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(231), 'propput'],
        HRESULT,
        'MarkerSize',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(72), 'propget'],
        HRESULT,
        'MarkerStyle',
        (['out', 'retval'], POINTER(XlMarkerStyle), 'RHS')
    ),
    COMMETHOD(
        [dispid(72), 'propput'],
        HRESULT,
        'MarkerStyle',
        (['in'], XlMarkerStyle, 'RHS')
    ),
    COMMETHOD(
        [dispid(211)],
        HRESULT,
        'Paste',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(161), 'propget'],
        HRESULT,
        'PictureType',
        (['out', 'retval'], POINTER(XlChartPictureType), 'RHS')
    ),
    COMMETHOD(
        [dispid(161), 'propput'],
        HRESULT,
        'PictureType',
        (['in'], XlChartPictureType, 'RHS')
    ),
    COMMETHOD(
        [dispid(235)],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(1659), 'propget'],
        HRESULT,
        'ApplyPictToSides',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(1659), 'propput'],
        HRESULT,
        'ApplyPictToSides',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(1660), 'propget'],
        HRESULT,
        'ApplyPictToFront',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(1660), 'propput'],
        HRESULT,
        'ApplyPictToFront',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(1661), 'propget'],
        HRESULT,
        'ApplyPictToEnd',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(1661), 'propput'],
        HRESULT,
        'ApplyPictToEnd',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'Shadow',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(103), 'propput'],
        HRESULT,
        'Shadow',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(1662), 'propget'],
        HRESULT,
        'SecondaryPlot',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(1662), 'propput'],
        HRESULT,
        'SecondaryPlot',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(1663), 'hidden', 'propget'],
        HRESULT,
        'Fill',
        (['out', 'retval'], POINTER(POINTER(ChartFillFormat)), 'RHS')
    ),
    COMMETHOD(
        [dispid(1665), 'propget'],
        HRESULT,
        'Has3DEffect',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(1665), 'propput'],
        HRESULT,
        'Has3DEffect',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(ChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(2649), 'propget'],
        HRESULT,
        'PictureUnit2',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(2649), 'propput'],
        HRESULT,
        'PictureUnit2',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2003), 'hidden', 'nonbrowsable'],
        HRESULT,
        '_ApplyDataLabels',
        (['in', 'optional'], XlDataLabelsType, 'Type', 2),
        (['in', 'optional'], VARIANT, 'LegendKey'),
        (['in', 'optional'], VARIANT, 'AutoText'),
        (['in', 'optional'], VARIANT, 'HasLeaderLines'),
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2004)],
        HRESULT,
        'ApplyDataLabels',
        (['in', 'optional'], XlDataLabelsType, 'Type', 2),
        (['in', 'optional'], VARIANT, 'LegendKey'),
        (['in', 'optional'], VARIANT, 'AutoText'),
        (['in', 'optional'], VARIANT, 'HasLeaderLines'),
        (['in', 'optional'], VARIANT, 'ShowSeriesName'),
        (['in', 'optional'], VARIANT, 'ShowCategoryName'),
        (['in', 'optional'], VARIANT, 'ShowValue'),
        (['in', 'optional'], VARIANT, 'ShowPercentage'),
        (['in', 'optional'], VARIANT, 'ShowBubbleSize'),
        (['in', 'optional'], VARIANT, 'Separator'),
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2005), 'hidden', 'propget'],
        HRESULT,
        'PictureUnit',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2005), 'hidden', 'propput'],
        HRESULT,
        'PictureUnit',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_double), 'pval')
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_double), 'pval')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'Left',
        (['out', 'retval'], POINTER(c_double), 'pval')
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'Top',
        (['out', 'retval'], POINTER(c_double), 'pval')
    ),
    COMMETHOD(
        [dispid(2011)],
        HRESULT,
        'PieSliceLocation',
        (['in'], XlPieSliceLocation, 'loc'),
        (['in', 'optional'], XlPieSliceIndex, 'Index', 2),
        (['out', 'retval'], POINTER(c_double), 'pval')
    ),
    COMMETHOD(
        [dispid(2012), 'propget'],
        HRESULT,
        'IsTotal',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pval')
    ),
    COMMETHOD(
        [dispid(2012), 'propput'],
        HRESULT,
        'IsTotal',
        (['in'], VARIANT_BOOL, 'pval')
    ),
    COMMETHOD(
        [dispid(2013)],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'Id'),
        (['out', 'retval'], POINTER(VARIANT), 'pValue')
    ),
    COMMETHOD(
        [dispid(2014)],
        HRESULT,
        'SetProperty',
        (['in'], BSTR, 'Id'),
        (['in'], VARIANT, 'Value')
    ),
]

################################################################
# code template for Point implementation
# class Point_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return RHS
#
#     def ClearFormats(self):
#         '-no docstring-'
#         #return RHS
#
#     def Copy(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def DataLabel(self):
#         '-no docstring-'
#         #return RHS
#
#     def Delete(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Explosion = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     HasDataLabel = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Interior(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     InvertIfNegative = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MarkerBackgroundColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MarkerBackgroundColorIndex = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MarkerForegroundColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MarkerForegroundColorIndex = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MarkerSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MarkerStyle = property(_get, _set, doc = _set.__doc__)
#
#     def Paste(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     PictureType = property(_get, _set, doc = _set.__doc__)
#
#     def Select(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ApplyPictToSides = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ApplyPictToFront = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ApplyPictToEnd = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Shadow = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     SecondaryPlot = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Fill(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Has3DEffect = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     PictureUnit2 = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     def _ApplyDataLabels(self, Type, LegendKey, AutoText, HasLeaderLines):
#         '-no docstring-'
#         #return RHS
#
#     def ApplyDataLabels(self, Type, LegendKey, AutoText, HasLeaderLines, ShowSeriesName, ShowCategoryName, ShowValue, ShowPercentage, ShowBubbleSize, Separator):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     PictureUnit = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Height(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Width(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Left(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Top(self):
#         '-no docstring-'
#         #return pval
#
#     def PieSliceLocation(self, loc, Index):
#         '-no docstring-'
#         #return pval
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     IsTotal = property(_get, _set, doc = _set.__doc__)
#
#     def GetProperty(self, Id):
#         '-no docstring-'
#         #return pValue
#
#     def SetProperty(self, Id, Value):
#         '-no docstring-'
#         #return 
#

PlaceholderFormat._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(PpPlaceholderType), 'Type')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'Name')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'ContainedType',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoShapeType),
            'ContainedType',
        )
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'Position',
        (['out', 'retval'], POINTER(c_int), 'Position')
    ),
]

################################################################
# code template for PlaceholderFormat implementation
# class PlaceholderFormat_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Type(self):
#         '-no docstring-'
#         #return Type
#
#     def _get(self):
#         '-no docstring-'
#         #return Name
#     def _set(self, Name):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def ContainedType(self):
#         '-no docstring-'
#         #return ContainedType
#
#     @property
#     def Position(self):
#         '-no docstring-'
#         #return Position
#

SoundEffect._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(2003), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'Name')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(PpSoundEffectType), 'Type')
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'Type',
        (['in'], PpSoundEffectType, 'Type')
    ),
    COMMETHOD(
        [dispid(2005)],
        HRESULT,
        'ImportFromFile',
        (['in'], BSTR, 'FileName')
    ),
    COMMETHOD([dispid(2006)], HRESULT, 'Play'),
]

################################################################
# code template for SoundEffect implementation
# class SoundEffect_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return Name
#     def _set(self, Name):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Type
#     def _set(self, Type):
#         '-no docstring-'
#     Type = property(_get, _set, doc = _set.__doc__)
#
#     def ImportFromFile(self, FileName):
#         '-no docstring-'
#         #return 
#
#     def Play(self):
#         '-no docstring-'
#         #return 
#

NamedSlideShow._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD([dispid(2004)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'SlideIDs',
        (['out', 'retval'], POINTER(VARIANT), 'SlideIDs')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
]

################################################################
# code template for NamedSlideShow implementation
# class NamedSlideShow_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return Name
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def SlideIDs(self):
#         '-no docstring-'
#         #return SlideIDs
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return Count
#

AnimationPoint._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD([dispid(2003)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Time',
        (['out', 'retval'], POINTER(c_float), 'Time')
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'Time',
        (['in'], c_float, 'Time')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'Value',
        (['out', 'retval'], POINTER(VARIANT), 'Value')
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'Value',
        (['in'], VARIANT, 'Value')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'Formula',
        (['out', 'retval'], POINTER(BSTR), 'Formula')
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'Formula',
        (['in'], BSTR, 'Formula')
    ),
]

################################################################
# code template for AnimationPoint implementation
# class AnimationPoint_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return Time
#     def _set(self, Time):
#         '-no docstring-'
#     Time = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Value
#     def _set(self, Value):
#         '-no docstring-'
#     Value = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Formula
#     def _set(self, Formula):
#         '-no docstring-'
#     Formula = property(_get, _set, doc = _set.__doc__)
#


class LegendKey(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A71-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Border(self) -> 'ChartBorder': ...
        Border = hints.normal_property(_get_Border)
        def ClearFormats(self) -> hints.Incomplete: ...
        def Delete(self) -> hints.Incomplete: ...
        def _get_Interior(self) -> 'Interior': ...
        Interior = hints.normal_property(_get_Interior)
        def _get_Fill(self) -> 'ChartFillFormat': ...
        Fill = hints.normal_property(_get_Fill)
        def _get_InvertIfNegative(self) -> hints.Incomplete: ...
        def _set_InvertIfNegative(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        InvertIfNegative = hints.normal_property(_get_InvertIfNegative, _set_InvertIfNegative)
        def _get_MarkerBackgroundColor(self) -> hints.Incomplete: ...
        def _set_MarkerBackgroundColor(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MarkerBackgroundColor = hints.normal_property(_get_MarkerBackgroundColor, _set_MarkerBackgroundColor)
        def _get_MarkerBackgroundColorIndex(self) -> hints.Incomplete: ...
        def _set_MarkerBackgroundColorIndex(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MarkerBackgroundColorIndex = hints.normal_property(_get_MarkerBackgroundColorIndex, _set_MarkerBackgroundColorIndex)
        def _get_MarkerForegroundColor(self) -> hints.Incomplete: ...
        def _set_MarkerForegroundColor(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MarkerForegroundColor = hints.normal_property(_get_MarkerForegroundColor, _set_MarkerForegroundColor)
        def _get_MarkerForegroundColorIndex(self) -> hints.Incomplete: ...
        def _set_MarkerForegroundColorIndex(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MarkerForegroundColorIndex = hints.normal_property(_get_MarkerForegroundColorIndex, _set_MarkerForegroundColorIndex)
        def _get_MarkerSize(self) -> hints.Incomplete: ...
        def _set_MarkerSize(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MarkerSize = hints.normal_property(_get_MarkerSize, _set_MarkerSize)
        def _get_MarkerStyle(self) -> hints.Incomplete: ...
        def _set_MarkerStyle(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MarkerStyle = hints.normal_property(_get_MarkerStyle, _set_MarkerStyle)
        def _get_PictureType(self) -> hints.Incomplete: ...
        def _set_PictureType(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        PictureType = hints.normal_property(_get_PictureType, _set_PictureType)
        def Select(self) -> hints.Incomplete: ...
        def _get_Smooth(self) -> hints.Incomplete: ...
        def _set_Smooth(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Smooth = hints.normal_property(_get_Smooth, _set_Smooth)
        def _get_Left(self) -> hints.Incomplete: ...
        Left = hints.normal_property(_get_Left)
        def _get_Top(self) -> hints.Incomplete: ...
        Top = hints.normal_property(_get_Top)
        def _get_Width(self) -> hints.Incomplete: ...
        Width = hints.normal_property(_get_Width)
        def _get_Height(self) -> hints.Incomplete: ...
        Height = hints.normal_property(_get_Height)
        def _get_Shadow(self) -> hints.Incomplete: ...
        def _set_Shadow(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Shadow = hints.normal_property(_get_Shadow, _set_Shadow)
        def _get_Format(self) -> 'ChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_PictureUnit2(self) -> hints.Incomplete: ...
        def _set_PictureUnit2(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        PictureUnit2 = hints.normal_property(_get_PictureUnit2, _set_PictureUnit2)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_PictureUnit(self) -> hints.Incomplete: ...
        def _set_PictureUnit(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        PictureUnit = hints.normal_property(_get_PictureUnit, _set_PictureUnit)


LegendEntry._methods_ = [
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(117)],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(146), 'propget'],
        HRESULT,
        'Font',
        (['out', 'retval'], POINTER(POINTER(ChartFont)), 'RHS')
    ),
    COMMETHOD(
        [dispid(486), 'propget'],
        HRESULT,
        'Index',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(174), 'propget'],
        HRESULT,
        'LegendKey',
        (['out', 'retval'], POINTER(POINTER(LegendKey)), 'RHS')
    ),
    COMMETHOD(
        [dispid(235)],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(1525), 'hidden', 'propget'],
        HRESULT,
        'AutoScaleFont',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(1525), 'hidden', 'propput'],
        HRESULT,
        'AutoScaleFont',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(127), 'propget'],
        HRESULT,
        'Left',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(126), 'propget'],
        HRESULT,
        'Top',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(122), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(123), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(ChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
]

################################################################
# code template for LegendEntry implementation
# class LegendEntry_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     def Delete(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Font(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Index(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def LegendKey(self):
#         '-no docstring-'
#         #return RHS
#
#     def Select(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     AutoScaleFont = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Left(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Top(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Width(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Height(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#

Timing._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Duration',
        (['out', 'retval'], POINTER(c_float), 'Duration')
    ),
    COMMETHOD(
        [dispid(2003), 'propput'],
        HRESULT,
        'Duration',
        (['in'], c_float, 'Duration')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'TriggerType',
        (['out', 'retval'], POINTER(MsoAnimTriggerType), 'TriggerType')
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'TriggerType',
        (['in'], MsoAnimTriggerType, 'TriggerType')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'TriggerDelayTime',
        (['out', 'retval'], POINTER(c_float), 'TriggerDelayTime')
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'TriggerDelayTime',
        (['in'], c_float, 'TriggerDelayTime')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'TriggerShape',
        (['out', 'retval'], POINTER(POINTER(Shape)), 'TriggerShape')
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'TriggerShape',
        (['in'], POINTER(Shape), 'TriggerShape')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'RepeatCount',
        (['out', 'retval'], POINTER(c_int), 'RepeatCount')
    ),
    COMMETHOD(
        [dispid(2007), 'propput'],
        HRESULT,
        'RepeatCount',
        (['in'], c_int, 'RepeatCount')
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'RepeatDuration',
        (['out', 'retval'], POINTER(c_float), 'RepeatDuration')
    ),
    COMMETHOD(
        [dispid(2008), 'propput'],
        HRESULT,
        'RepeatDuration',
        (['in'], c_float, 'RepeatDuration')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'Speed',
        (['out', 'retval'], POINTER(c_float), 'Speed')
    ),
    COMMETHOD(
        [dispid(2009), 'propput'],
        HRESULT,
        'Speed',
        (['in'], c_float, 'Speed')
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'Accelerate',
        (['out', 'retval'], POINTER(c_float), 'Accelerate')
    ),
    COMMETHOD(
        [dispid(2010), 'propput'],
        HRESULT,
        'Accelerate',
        (['in'], c_float, 'Accelerate')
    ),
    COMMETHOD(
        [dispid(2011), 'propget'],
        HRESULT,
        'Decelerate',
        (['out', 'retval'], POINTER(c_float), 'Decelerate')
    ),
    COMMETHOD(
        [dispid(2011), 'propput'],
        HRESULT,
        'Decelerate',
        (['in'], c_float, 'Decelerate')
    ),
    COMMETHOD(
        [dispid(2012), 'propget'],
        HRESULT,
        'AutoReverse',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'AutoReverse',
        )
    ),
    COMMETHOD(
        [dispid(2012), 'propput'],
        HRESULT,
        'AutoReverse',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'AutoReverse',
        )
    ),
    COMMETHOD(
        [dispid(2013), 'propget'],
        HRESULT,
        'SmoothStart',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'SmoothStart',
        )
    ),
    COMMETHOD(
        [dispid(2013), 'propput'],
        HRESULT,
        'SmoothStart',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'SmoothStart',
        )
    ),
    COMMETHOD(
        [dispid(2014), 'propget'],
        HRESULT,
        'SmoothEnd',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'SmoothEnd',
        )
    ),
    COMMETHOD(
        [dispid(2014), 'propput'],
        HRESULT,
        'SmoothEnd',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'SmoothEnd',
        )
    ),
    COMMETHOD(
        [dispid(2015), 'propget'],
        HRESULT,
        'RewindAtEnd',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'RewindAtEnd',
        )
    ),
    COMMETHOD(
        [dispid(2015), 'propput'],
        HRESULT,
        'RewindAtEnd',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'RewindAtEnd',
        )
    ),
    COMMETHOD(
        [dispid(2016), 'propget'],
        HRESULT,
        'Restart',
        (['out', 'retval'], POINTER(MsoAnimEffectRestart), 'Restart')
    ),
    COMMETHOD(
        [dispid(2016), 'propput'],
        HRESULT,
        'Restart',
        (['in'], MsoAnimEffectRestart, 'Restart')
    ),
    COMMETHOD(
        [dispid(2017), 'propget'],
        HRESULT,
        'BounceEnd',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'BounceEnd',
        )
    ),
    COMMETHOD(
        [dispid(2017), 'propput'],
        HRESULT,
        'BounceEnd',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'BounceEnd',
        )
    ),
    COMMETHOD(
        [dispid(2018), 'propget'],
        HRESULT,
        'BounceEndIntensity',
        (['out', 'retval'], POINTER(c_float), 'BounceEndIntensity')
    ),
    COMMETHOD(
        [dispid(2018), 'propput'],
        HRESULT,
        'BounceEndIntensity',
        (['in'], c_float, 'BounceEndIntensity')
    ),
    COMMETHOD(
        [dispid(2019), 'propget'],
        HRESULT,
        'TriggerBookmark',
        (['out', 'retval'], POINTER(BSTR), 'TriggerBookmark')
    ),
    COMMETHOD(
        [dispid(2019), 'propput'],
        HRESULT,
        'TriggerBookmark',
        (['in'], BSTR, 'TriggerBookmark')
    ),
]

################################################################
# code template for Timing implementation
# class Timing_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return Duration
#     def _set(self, Duration):
#         '-no docstring-'
#     Duration = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return TriggerType
#     def _set(self, TriggerType):
#         '-no docstring-'
#     TriggerType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return TriggerDelayTime
#     def _set(self, TriggerDelayTime):
#         '-no docstring-'
#     TriggerDelayTime = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return TriggerShape
#     def _set(self, TriggerShape):
#         '-no docstring-'
#     TriggerShape = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RepeatCount
#     def _set(self, RepeatCount):
#         '-no docstring-'
#     RepeatCount = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RepeatDuration
#     def _set(self, RepeatDuration):
#         '-no docstring-'
#     RepeatDuration = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Speed
#     def _set(self, Speed):
#         '-no docstring-'
#     Speed = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Accelerate
#     def _set(self, Accelerate):
#         '-no docstring-'
#     Accelerate = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Decelerate
#     def _set(self, Decelerate):
#         '-no docstring-'
#     Decelerate = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return AutoReverse
#     def _set(self, AutoReverse):
#         '-no docstring-'
#     AutoReverse = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return SmoothStart
#     def _set(self, SmoothStart):
#         '-no docstring-'
#     SmoothStart = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return SmoothEnd
#     def _set(self, SmoothEnd):
#         '-no docstring-'
#     SmoothEnd = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RewindAtEnd
#     def _set(self, RewindAtEnd):
#         '-no docstring-'
#     RewindAtEnd = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Restart
#     def _set(self, Restart):
#         '-no docstring-'
#     Restart = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return BounceEnd
#     def _set(self, BounceEnd):
#         '-no docstring-'
#     BounceEnd = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return BounceEndIntensity
#     def _set(self, BounceEndIntensity):
#         '-no docstring-'
#     BounceEndIntensity = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return TriggerBookmark
#     def _set(self, TriggerBookmark):
#         '-no docstring-'
#     TriggerBookmark = property(_get, _set, doc = _set.__doc__)
#

HiLoLines._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(ChartBorder)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(ChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2006)],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2007)],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
]

################################################################
# code template for HiLoLines implementation
# class HiLoLines_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     def Delete(self):
#         '-no docstring-'
#         #return RHS
#
#     def Select(self):
#         '-no docstring-'
#         #return RHS
#

DataTable._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propput'],
        HRESULT,
        'ShowLegendKey',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'ShowLegendKey',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2002), 'propput'],
        HRESULT,
        'HasBorderHorizontal',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'HasBorderHorizontal',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2003), 'propput'],
        HRESULT,
        'HasBorderVertical',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'HasBorderVertical',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'HasBorderOutline',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'HasBorderOutline',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(ChartBorder)), 'ppLine')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'Font',
        (['out', 'retval'], POINTER(POINTER(ChartFont)), 'pfont')
    ),
    COMMETHOD([dispid(2007)], HRESULT, 'Select'),
    COMMETHOD([dispid(2008)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2010), 'hidden', 'propget'],
        HRESULT,
        'AutoScaleFont',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2010), 'hidden', 'propput'],
        HRESULT,
        'AutoScaleFont',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2011), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(ChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(2012), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
]

################################################################
# code template for DataTable implementation
# class DataTable_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ShowLegendKey = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     HasBorderHorizontal = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     HasBorderVertical = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     HasBorderOutline = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return ppLine
#
#     @property
#     def Font(self):
#         '-no docstring-'
#         #return pfont
#
#     def Select(self):
#         '-no docstring-'
#         #return 
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     AutoScaleFont = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#


class FileConverter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A51-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_CanOpen(self) -> hints.Incomplete: ...
        CanOpen = hints.normal_property(_get_CanOpen)
        def _get_CanSave(self) -> hints.Incomplete: ...
        CanSave = hints.normal_property(_get_CanSave)
        def _get_ClassName(self) -> hints.Incomplete: ...
        ClassName = hints.normal_property(_get_ClassName)
        def _get_Creator(self) -> 'FileConverters': ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Extensions(self) -> hints.Incomplete: ...
        Extensions = hints.normal_property(_get_Extensions)
        def _get_FormatName(self) -> hints.Incomplete: ...
        FormatName = hints.normal_property(_get_FormatName)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Parent(self) -> 'FileConverters': ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Path(self) -> hints.Incomplete: ...
        Path = hints.normal_property(_get_Path)
        def _get_OpenFormat(self) -> hints.Incomplete: ...
        OpenFormat = hints.normal_property(_get_OpenFormat)
        def _get_SaveFormat(self) -> hints.Incomplete: ...
        SaveFormat = hints.normal_property(_get_SaveFormat)


FileConverters._methods_ = [
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(FileConverter)), 'Item')
    ),
]

################################################################
# code template for FileConverters implementation
# class FileConverters_Impl(object):
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#

DocumentWindows._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(DocumentWindow)), 'Item')
    ),
    COMMETHOD(
        [dispid(2003)],
        HRESULT,
        'Arrange',
        (['in', 'optional'], PpArrangeStyle, 'arrangeStyle', 1)
    ),
]

################################################################
# code template for DocumentWindows implementation
# class DocumentWindows_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     def Arrange(self, arrangeStyle):
#         '-no docstring-'
#         #return 
#

Series._methods_ = [
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(47), 'propget'],
        HRESULT,
        'AxisGroup',
        (['out', 'retval'], POINTER(XlAxisGroup), 'RHS')
    ),
    COMMETHOD(
        [dispid(47), 'propput'],
        HRESULT,
        'AxisGroup',
        (['in'], XlAxisGroup, 'RHS')
    ),
    COMMETHOD(
        [dispid(128), 'hidden', 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(ChartBorder)), 'RHS')
    ),
    COMMETHOD(
        [dispid(112)],
        HRESULT,
        'ClearFormats',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(551)],
        HRESULT,
        'Copy',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(157)],
        HRESULT,
        'DataLabels',
        (['in', 'optional'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(117)],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(152)],
        HRESULT,
        'ErrorBar',
        (['in'], XlErrorBarDirection, 'Direction'),
        (['in'], XlErrorBarInclude, 'Include'),
        (['in'], XlErrorBarType, 'Type'),
        (['in', 'optional'], VARIANT, 'Amount'),
        (['in', 'optional'], VARIANT, 'MinusValues'),
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(159), 'propget'],
        HRESULT,
        'ErrorBars',
        (['out', 'retval'], POINTER(POINTER(ErrorBars)), 'RHS')
    ),
    COMMETHOD(
        [dispid(182), 'propget'],
        HRESULT,
        'Explosion',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(182), 'propput'],
        HRESULT,
        'Explosion',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(261), 'propget'],
        HRESULT,
        'Formula',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(261), 'propput'],
        HRESULT,
        'Formula',
        (['in'], BSTR, 'RHS')
    ),
    COMMETHOD(
        [dispid(263), 'propget'],
        HRESULT,
        'FormulaLocal',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(263), 'propput'],
        HRESULT,
        'FormulaLocal',
        (['in'], BSTR, 'RHS')
    ),
    COMMETHOD(
        [dispid(264), 'propget'],
        HRESULT,
        'FormulaR1C1',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(264), 'propput'],
        HRESULT,
        'FormulaR1C1',
        (['in'], BSTR, 'RHS')
    ),
    COMMETHOD(
        [dispid(265), 'propget'],
        HRESULT,
        'FormulaR1C1Local',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(265), 'propput'],
        HRESULT,
        'FormulaR1C1Local',
        (['in'], BSTR, 'RHS')
    ),
    COMMETHOD(
        [dispid(78), 'propget'],
        HRESULT,
        'HasDataLabels',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(78), 'propput'],
        HRESULT,
        'HasDataLabels',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(160), 'propget'],
        HRESULT,
        'HasErrorBars',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(160), 'propput'],
        HRESULT,
        'HasErrorBars',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(129), 'hidden', 'propget'],
        HRESULT,
        'Interior',
        (['out', 'retval'], POINTER(POINTER(Interior)), 'RHS')
    ),
    COMMETHOD(
        [dispid(1663), 'hidden', 'propget'],
        HRESULT,
        'Fill',
        (['out', 'retval'], POINTER(POINTER(ChartFillFormat)), 'RHS')
    ),
    COMMETHOD(
        [dispid(132), 'propget'],
        HRESULT,
        'InvertIfNegative',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(132), 'propput'],
        HRESULT,
        'InvertIfNegative',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(73), 'propget'],
        HRESULT,
        'MarkerBackgroundColor',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(73), 'propput'],
        HRESULT,
        'MarkerBackgroundColor',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(74), 'propget'],
        HRESULT,
        'MarkerBackgroundColorIndex',
        (['out', 'retval'], POINTER(XlColorIndex), 'RHS')
    ),
    COMMETHOD(
        [dispid(74), 'propput'],
        HRESULT,
        'MarkerBackgroundColorIndex',
        (['in'], XlColorIndex, 'RHS')
    ),
    COMMETHOD(
        [dispid(75), 'propget'],
        HRESULT,
        'MarkerForegroundColor',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(75), 'propput'],
        HRESULT,
        'MarkerForegroundColor',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(76), 'propget'],
        HRESULT,
        'MarkerForegroundColorIndex',
        (['out', 'retval'], POINTER(XlColorIndex), 'RHS')
    ),
    COMMETHOD(
        [dispid(76), 'propput'],
        HRESULT,
        'MarkerForegroundColorIndex',
        (['in'], XlColorIndex, 'RHS')
    ),
    COMMETHOD(
        [dispid(231), 'propget'],
        HRESULT,
        'MarkerSize',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(231), 'propput'],
        HRESULT,
        'MarkerSize',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(72), 'propget'],
        HRESULT,
        'MarkerStyle',
        (['out', 'retval'], POINTER(XlMarkerStyle), 'RHS')
    ),
    COMMETHOD(
        [dispid(72), 'propput'],
        HRESULT,
        'MarkerStyle',
        (['in'], XlMarkerStyle, 'RHS')
    ),
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(110), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'RHS')
    ),
    COMMETHOD(
        [dispid(211)],
        HRESULT,
        'Paste',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(161), 'propget'],
        HRESULT,
        'PictureType',
        (['out', 'retval'], POINTER(XlChartPictureType), 'RHS')
    ),
    COMMETHOD(
        [dispid(161), 'propput'],
        HRESULT,
        'PictureType',
        (['in'], XlChartPictureType, 'RHS')
    ),
    COMMETHOD(
        [dispid(228), 'propget'],
        HRESULT,
        'PlotOrder',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(228), 'propput'],
        HRESULT,
        'PlotOrder',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(70)],
        HRESULT,
        'Points',
        (['in', 'optional'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(235)],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(163), 'propget'],
        HRESULT,
        'Smooth',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(163), 'propput'],
        HRESULT,
        'Smooth',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(154)],
        HRESULT,
        'Trendlines',
        (['in', 'optional'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(108), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(108), 'propput'],
        HRESULT,
        'Type',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(1400), 'propget'],
        HRESULT,
        'ChartType',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.XlChartType),
            'RHS',
        )
    ),
    COMMETHOD(
        [dispid(1400), 'propput'],
        HRESULT,
        'ChartType',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.XlChartType,
            'RHS',
        )
    ),
    COMMETHOD(
        [dispid(1401), 'hidden'],
        HRESULT,
        'ApplyCustomType',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.XlChartType,
            'ChartType',
        )
    ),
    COMMETHOD(
        [dispid(164), 'propget'],
        HRESULT,
        'Values',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(164), 'propput'],
        HRESULT,
        'Values',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(1111), 'propget'],
        HRESULT,
        'XValues',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(1111), 'propput'],
        HRESULT,
        'XValues',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(1664), 'propget'],
        HRESULT,
        'BubbleSizes',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(1664), 'propput'],
        HRESULT,
        'BubbleSizes',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(1403), 'propget'],
        HRESULT,
        'BarShape',
        (['out', 'retval'], POINTER(XlBarShape), 'RHS')
    ),
    COMMETHOD(
        [dispid(1403), 'propput'],
        HRESULT,
        'BarShape',
        (['in'], XlBarShape, 'RHS')
    ),
    COMMETHOD(
        [dispid(1659), 'propget'],
        HRESULT,
        'ApplyPictToSides',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(1659), 'propput'],
        HRESULT,
        'ApplyPictToSides',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(1660), 'propget'],
        HRESULT,
        'ApplyPictToFront',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(1660), 'propput'],
        HRESULT,
        'ApplyPictToFront',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(1661), 'propget'],
        HRESULT,
        'ApplyPictToEnd',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(1661), 'propput'],
        HRESULT,
        'ApplyPictToEnd',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(1665), 'propget'],
        HRESULT,
        'Has3DEffect',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(1665), 'propput'],
        HRESULT,
        'Has3DEffect',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'Shadow',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(103), 'propput'],
        HRESULT,
        'Shadow',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(1394), 'propget'],
        HRESULT,
        'HasLeaderLines',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(1394), 'propput'],
        HRESULT,
        'HasLeaderLines',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(1666), 'propget'],
        HRESULT,
        'LeaderLines',
        (['out', 'retval'], POINTER(POINTER(LeaderLines)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(ChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(2649), 'propget'],
        HRESULT,
        'PictureUnit2',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(2649), 'propput'],
        HRESULT,
        'PictureUnit2',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2003), 'hidden', 'nonbrowsable'],
        HRESULT,
        '_ApplyDataLabels',
        (['in', 'optional'], XlDataLabelsType, 'Type', 2),
        (['in', 'optional'], VARIANT, 'LegendKey'),
        (['in', 'optional'], VARIANT, 'AutoText'),
        (['in', 'optional'], VARIANT, 'HasLeaderLines'),
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2004)],
        HRESULT,
        'ApplyDataLabels',
        (['in', 'optional'], XlDataLabelsType, 'Type', 2),
        (['in', 'optional'], VARIANT, 'LegendKey'),
        (['in', 'optional'], VARIANT, 'AutoText'),
        (['in', 'optional'], VARIANT, 'HasLeaderLines'),
        (['in', 'optional'], VARIANT, 'ShowSeriesName'),
        (['in', 'optional'], VARIANT, 'ShowCategoryName'),
        (['in', 'optional'], VARIANT, 'ShowValue'),
        (['in', 'optional'], VARIANT, 'ShowPercentage'),
        (['in', 'optional'], VARIANT, 'ShowBubbleSize'),
        (['in', 'optional'], VARIANT, 'Separator'),
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2005), 'hidden', 'propget'],
        HRESULT,
        'PictureUnit',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2005), 'hidden', 'propput'],
        HRESULT,
        'PictureUnit',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'PlotColorIndex',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'InvertColor',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2007), 'propput'],
        HRESULT,
        'InvertColor',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'InvertColorIndex',
        (['out', 'retval'], POINTER(XlColorIndex), 'RHS')
    ),
    COMMETHOD(
        [dispid(2008), 'propput'],
        HRESULT,
        'InvertColorIndex',
        (['in'], XlColorIndex, 'RHS')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'IsFiltered',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2009), 'propput'],
        HRESULT,
        'IsFiltered',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'ParentDataLabelOption',
        (['out', 'retval'], POINTER(XlParentDataLabelOptions), 'RHS')
    ),
    COMMETHOD(
        [dispid(2010), 'propput'],
        HRESULT,
        'ParentDataLabelOption',
        (['in'], XlParentDataLabelOptions, 'RHS')
    ),
    COMMETHOD(
        [dispid(2011), 'propget'],
        HRESULT,
        'QuartileCalculationInclusiveMedian',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2011), 'propput'],
        HRESULT,
        'QuartileCalculationInclusiveMedian',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2012), 'propget'],
        HRESULT,
        'ValueSortOrder',
        (['out', 'retval'], POINTER(XlValueSortOrder), 'RHS')
    ),
    COMMETHOD(
        [dispid(2012), 'propput'],
        HRESULT,
        'ValueSortOrder',
        (['in'], XlValueSortOrder, 'RHS')
    ),
    COMMETHOD(
        [dispid(2013), 'propget'],
        HRESULT,
        'GeoProjectionType',
        (['out', 'retval'], POINTER(XlGeoProjectionType), 'RHS')
    ),
    COMMETHOD(
        [dispid(2013), 'propput'],
        HRESULT,
        'GeoProjectionType',
        (['in'], XlGeoProjectionType, 'RHS')
    ),
    COMMETHOD(
        [dispid(2014), 'propget'],
        HRESULT,
        'GeoMappingLevel',
        (['out', 'retval'], POINTER(XlGeoMappingLevel), 'RHS')
    ),
    COMMETHOD(
        [dispid(2014), 'propput'],
        HRESULT,
        'GeoMappingLevel',
        (['in'], XlGeoMappingLevel, 'RHS')
    ),
    COMMETHOD(
        [dispid(2015), 'propget'],
        HRESULT,
        'RegionLabelOption',
        (['out', 'retval'], POINTER(XlRegionLabelOptions), 'RHS')
    ),
    COMMETHOD(
        [dispid(2015), 'propput'],
        HRESULT,
        'RegionLabelOption',
        (['in'], XlRegionLabelOptions, 'RHS')
    ),
    COMMETHOD(
        [dispid(2016), 'propget'],
        HRESULT,
        'SeriesColorGradientStyle',
        (['out', 'retval'], POINTER(XlSeriesColorGradientStyle), 'RHS')
    ),
    COMMETHOD(
        [dispid(2016), 'propput'],
        HRESULT,
        'SeriesColorGradientStyle',
        (['in'], XlSeriesColorGradientStyle, 'RHS')
    ),
    COMMETHOD(
        [dispid(2017)],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'Id'),
        (['out', 'retval'], POINTER(VARIANT), 'pValue')
    ),
    COMMETHOD(
        [dispid(2018)],
        HRESULT,
        'SetProperty',
        (['in'], BSTR, 'Id'),
        (['in'], VARIANT, 'Value')
    ),
]

################################################################
# code template for Series implementation
# class Series_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     AxisGroup = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return RHS
#
#     def ClearFormats(self):
#         '-no docstring-'
#         #return RHS
#
#     def Copy(self):
#         '-no docstring-'
#         #return RHS
#
#     def DataLabels(self, Index):
#         '-no docstring-'
#         #return RHS
#
#     def Delete(self):
#         '-no docstring-'
#         #return RHS
#
#     def ErrorBar(self, Direction, Include, Type, Amount, MinusValues):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def ErrorBars(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Explosion = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Formula = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     FormulaLocal = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     FormulaR1C1 = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     FormulaR1C1Local = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     HasDataLabels = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     HasErrorBars = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Interior(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Fill(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     InvertIfNegative = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MarkerBackgroundColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MarkerBackgroundColorIndex = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MarkerForegroundColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MarkerForegroundColorIndex = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MarkerSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MarkerStyle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def Paste(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     PictureType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     PlotOrder = property(_get, _set, doc = _set.__doc__)
#
#     def Points(self, Index):
#         '-no docstring-'
#         #return RHS
#
#     def Select(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Smooth = property(_get, _set, doc = _set.__doc__)
#
#     def Trendlines(self, Index):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Type = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ChartType = property(_get, _set, doc = _set.__doc__)
#
#     def ApplyCustomType(self, ChartType):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Values = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     XValues = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     BubbleSizes = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     BarShape = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ApplyPictToSides = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ApplyPictToFront = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ApplyPictToEnd = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Has3DEffect = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Shadow = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     HasLeaderLines = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def LeaderLines(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     PictureUnit2 = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     def _ApplyDataLabels(self, Type, LegendKey, AutoText, HasLeaderLines):
#         '-no docstring-'
#         #return RHS
#
#     def ApplyDataLabels(self, Type, LegendKey, AutoText, HasLeaderLines, ShowSeriesName, ShowCategoryName, ShowValue, ShowPercentage, ShowBubbleSize, Separator):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     PictureUnit = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def PlotColorIndex(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     InvertColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     InvertColorIndex = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     IsFiltered = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ParentDataLabelOption = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     QuartileCalculationInclusiveMedian = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ValueSortOrder = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     GeoProjectionType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     GeoMappingLevel = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     RegionLabelOption = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     SeriesColorGradientStyle = property(_get, _set, doc = _set.__doc__)
#
#     def GetProperty(self, Id):
#         '-no docstring-'
#         #return pValue
#
#     def SetProperty(self, Id, Value):
#         '-no docstring-'
#         #return 
#

MotionEffect._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'ByX',
        (['out', 'retval'], POINTER(c_float), 'ByX')
    ),
    COMMETHOD(
        [dispid(2003), 'propput'],
        HRESULT,
        'ByX',
        (['in'], c_float, 'ByX')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'ByY',
        (['out', 'retval'], POINTER(c_float), 'ByY')
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'ByY',
        (['in'], c_float, 'ByY')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'FromX',
        (['out', 'retval'], POINTER(c_float), 'FromX')
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'FromX',
        (['in'], c_float, 'FromX')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'FromY',
        (['out', 'retval'], POINTER(c_float), 'FromY')
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'FromY',
        (['in'], c_float, 'FromY')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'ToX',
        (['out', 'retval'], POINTER(c_float), 'ToX')
    ),
    COMMETHOD(
        [dispid(2007), 'propput'],
        HRESULT,
        'ToX',
        (['in'], c_float, 'ToX')
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'ToY',
        (['out', 'retval'], POINTER(c_float), 'ToY')
    ),
    COMMETHOD(
        [dispid(2008), 'propput'],
        HRESULT,
        'ToY',
        (['in'], c_float, 'ToY')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'Path',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(2009), 'propput'],
        HRESULT,
        'Path',
        (['in'], BSTR, 'Path')
    ),
]

################################################################
# code template for MotionEffect implementation
# class MotionEffect_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return ByX
#     def _set(self, ByX):
#         '-no docstring-'
#     ByX = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ByY
#     def _set(self, ByY):
#         '-no docstring-'
#     ByY = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return FromX
#     def _set(self, FromX):
#         '-no docstring-'
#     FromX = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return FromY
#     def _set(self, FromY):
#         '-no docstring-'
#     FromY = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ToX
#     def _set(self, ToX):
#         '-no docstring-'
#     ToX = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ToY
#     def _set(self, ToY):
#         '-no docstring-'
#     ToY = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Path
#     def _set(self, Path):
#         '-no docstring-'
#     Path = property(_get, _set, doc = _set.__doc__)
#

LegendKey._methods_ = [
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(128), 'hidden', 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(ChartBorder)), 'RHS')
    ),
    COMMETHOD(
        [dispid(112)],
        HRESULT,
        'ClearFormats',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(117)],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(129), 'hidden', 'propget'],
        HRESULT,
        'Interior',
        (['out', 'retval'], POINTER(POINTER(Interior)), 'RHS')
    ),
    COMMETHOD(
        [dispid(1663), 'hidden', 'propget'],
        HRESULT,
        'Fill',
        (['out', 'retval'], POINTER(POINTER(ChartFillFormat)), 'RHS')
    ),
    COMMETHOD(
        [dispid(132), 'propget'],
        HRESULT,
        'InvertIfNegative',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(132), 'propput'],
        HRESULT,
        'InvertIfNegative',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(73), 'propget'],
        HRESULT,
        'MarkerBackgroundColor',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(73), 'propput'],
        HRESULT,
        'MarkerBackgroundColor',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(74), 'propget'],
        HRESULT,
        'MarkerBackgroundColorIndex',
        (['out', 'retval'], POINTER(XlColorIndex), 'RHS')
    ),
    COMMETHOD(
        [dispid(74), 'propput'],
        HRESULT,
        'MarkerBackgroundColorIndex',
        (['in'], XlColorIndex, 'RHS')
    ),
    COMMETHOD(
        [dispid(75), 'propget'],
        HRESULT,
        'MarkerForegroundColor',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(75), 'propput'],
        HRESULT,
        'MarkerForegroundColor',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(76), 'propget'],
        HRESULT,
        'MarkerForegroundColorIndex',
        (['out', 'retval'], POINTER(XlColorIndex), 'RHS')
    ),
    COMMETHOD(
        [dispid(76), 'propput'],
        HRESULT,
        'MarkerForegroundColorIndex',
        (['in'], XlColorIndex, 'RHS')
    ),
    COMMETHOD(
        [dispid(231), 'propget'],
        HRESULT,
        'MarkerSize',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(231), 'propput'],
        HRESULT,
        'MarkerSize',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(72), 'propget'],
        HRESULT,
        'MarkerStyle',
        (['out', 'retval'], POINTER(XlMarkerStyle), 'RHS')
    ),
    COMMETHOD(
        [dispid(72), 'propput'],
        HRESULT,
        'MarkerStyle',
        (['in'], XlMarkerStyle, 'RHS')
    ),
    COMMETHOD(
        [dispid(161), 'propget'],
        HRESULT,
        'PictureType',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(161), 'propput'],
        HRESULT,
        'PictureType',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(235), 'hidden'],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(163), 'propget'],
        HRESULT,
        'Smooth',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(163), 'propput'],
        HRESULT,
        'Smooth',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(127), 'propget'],
        HRESULT,
        'Left',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(126), 'propget'],
        HRESULT,
        'Top',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(122), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(123), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'Shadow',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(103), 'propput'],
        HRESULT,
        'Shadow',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(ChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(2649), 'propget'],
        HRESULT,
        'PictureUnit2',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(2649), 'propput'],
        HRESULT,
        'PictureUnit2',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2003), 'hidden', 'propget'],
        HRESULT,
        'PictureUnit',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2003), 'hidden', 'propput'],
        HRESULT,
        'PictureUnit',
        (['in'], c_int, 'RHS')
    ),
]

################################################################
# code template for LegendKey implementation
# class LegendKey_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return RHS
#
#     def ClearFormats(self):
#         '-no docstring-'
#         #return RHS
#
#     def Delete(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Interior(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Fill(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     InvertIfNegative = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MarkerBackgroundColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MarkerBackgroundColorIndex = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MarkerForegroundColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MarkerForegroundColorIndex = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MarkerSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MarkerStyle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     PictureType = property(_get, _set, doc = _set.__doc__)
#
#     def Select(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Smooth = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Left(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Top(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Width(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Height(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Shadow = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     PictureUnit2 = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     PictureUnit = property(_get, _set, doc = _set.__doc__)
#


class SlideShowView(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493459-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Zoom(self) -> hints.Incomplete: ...
        Zoom = hints.normal_property(_get_Zoom)
        def _get_Slide(self) -> hints.Annotated['_Slide', hints.FirstComItfOf['Slide']]: ...
        Slide = hints.normal_property(_get_Slide)
        def _get_PointerType(self) -> hints.Incomplete: ...
        def _set_PointerType(self, PointerType: hints.Incomplete) -> hints.Hresult: ...
        PointerType = hints.normal_property(_get_PointerType, _set_PointerType)
        def _get_State(self) -> hints.Incomplete: ...
        def _set_State(self, State: hints.Incomplete) -> hints.Hresult: ...
        State = hints.normal_property(_get_State, _set_State)
        def _get_AcceleratorsEnabled(self) -> hints.Incomplete: ...
        def _set_AcceleratorsEnabled(self, AcceleratorsEnabled: hints.Incomplete) -> hints.Hresult: ...
        AcceleratorsEnabled = hints.normal_property(_get_AcceleratorsEnabled, _set_AcceleratorsEnabled)
        def _get_PresentationElapsedTime(self) -> hints.Incomplete: ...
        PresentationElapsedTime = hints.normal_property(_get_PresentationElapsedTime)
        def _get_SlideElapsedTime(self) -> hints.Incomplete: ...
        def _set_SlideElapsedTime(self, SlideElapsedTime: hints.Incomplete) -> hints.Hresult: ...
        SlideElapsedTime = hints.normal_property(_get_SlideElapsedTime, _set_SlideElapsedTime)
        def _get_LastSlideViewed(self) -> hints.Annotated['_Slide', hints.FirstComItfOf['Slide']]: ...
        LastSlideViewed = hints.normal_property(_get_LastSlideViewed)
        def _get_AdvanceMode(self) -> hints.Incomplete: ...
        AdvanceMode = hints.normal_property(_get_AdvanceMode)
        def _get_PointerColor(self) -> 'ColorFormat': ...
        PointerColor = hints.normal_property(_get_PointerColor)
        def _get_IsNamedShow(self) -> hints.Incomplete: ...
        IsNamedShow = hints.normal_property(_get_IsNamedShow)
        def _get_SlideShowName(self) -> hints.Incomplete: ...
        SlideShowName = hints.normal_property(_get_SlideShowName)
        def DrawLine(self, BeginX: hints.Incomplete, BeginY: hints.Incomplete, EndX: hints.Incomplete, EndY: hints.Incomplete) -> hints.Hresult: ...
        def EraseDrawing(self) -> hints.Hresult: ...
        def First(self) -> hints.Hresult: ...
        def Last(self) -> hints.Hresult: ...
        def Next(self) -> hints.Hresult: ...
        def Previous(self) -> hints.Hresult: ...
        def GotoSlide(self, Index: hints.Incomplete, ResetSlide: hints.Incomplete = ...) -> hints.Hresult: ...
        def GotoNamedShow(self, SlideShowName: hints.Incomplete) -> hints.Hresult: ...
        def EndNamedShow(self) -> hints.Hresult: ...
        def ResetSlideTime(self) -> hints.Hresult: ...
        def Exit(self) -> hints.Hresult: ...
        def InstallTracker(self, pTracker: hints.Incomplete, Presenter: hints.Incomplete) -> hints.Hresult: ...
        def _get_CurrentShowPosition(self) -> hints.Incomplete: ...
        CurrentShowPosition = hints.normal_property(_get_CurrentShowPosition)
        def GotoClick(self, Index: hints.Incomplete) -> hints.Hresult: ...
        def GetClickIndex(self) -> hints.Incomplete: ...
        def GetClickCount(self) -> hints.Incomplete: ...
        def FirstAnimationIsAutomatic(self) -> hints.Incomplete: ...
        def Player(self, ShapeId: hints.Incomplete) -> 'Player': ...
        def _get_MediaControlsVisible(self) -> hints.Incomplete: ...
        MediaControlsVisible = hints.normal_property(_get_MediaControlsVisible)
        def _get_MediaControlsLeft(self) -> hints.Incomplete: ...
        MediaControlsLeft = hints.normal_property(_get_MediaControlsLeft)
        def _get_MediaControlsTop(self) -> hints.Incomplete: ...
        MediaControlsTop = hints.normal_property(_get_MediaControlsTop)
        def _get_MediaControlsWidth(self) -> hints.Incomplete: ...
        MediaControlsWidth = hints.normal_property(_get_MediaControlsWidth)
        def _get_MediaControlsHeight(self) -> hints.Incomplete: ...
        MediaControlsHeight = hints.normal_property(_get_MediaControlsHeight)
        def _get_LaserPointerEnabled(self) -> hints.Incomplete: ...
        def _set_LaserPointerEnabled(self, LaserPointerEnabled: hints.Incomplete) -> hints.Hresult: ...
        LaserPointerEnabled = hints.normal_property(_get_LaserPointerEnabled, _set_LaserPointerEnabled)


SlideShowWindow._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'View',
        (['out', 'retval'], POINTER(POINTER(SlideShowView)), 'View')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Presentation',
        (['out', 'retval'], POINTER(POINTER(Presentation)), 'Presentation')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'IsFullScreen',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'IsFullScreen',
        )
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'Left',
        (['out', 'retval'], POINTER(c_float), 'Left')
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'Left',
        (['in'], c_float, 'Left')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'Top',
        (['out', 'retval'], POINTER(c_float), 'Top')
    ),
    COMMETHOD(
        [dispid(2007), 'propput'],
        HRESULT,
        'Top',
        (['in'], c_float, 'Top')
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_float), 'Width')
    ),
    COMMETHOD(
        [dispid(2008), 'propput'],
        HRESULT,
        'Width',
        (['in'], c_float, 'Width')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_float), 'Height')
    ),
    COMMETHOD(
        [dispid(2009), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_float, 'Height')
    ),
    COMMETHOD(
        [dispid(2010), 'restricted', 'propget'],
        HRESULT,
        'HWND',
        (['out', 'retval'], POINTER(c_int), 'HWND')
    ),
    COMMETHOD(
        [dispid(2011), 'propget'],
        HRESULT,
        'Active',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Active',
        )
    ),
    COMMETHOD([dispid(2012)], HRESULT, 'Activate'),
    COMMETHOD(
        [dispid(2013), 'propget'],
        HRESULT,
        'SlideNavigation',
        (['out', 'retval'], POINTER(POINTER(SlideNavigation)), 'navigation')
    ),
]

################################################################
# code template for SlideShowWindow implementation
# class SlideShowWindow_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def View(self):
#         '-no docstring-'
#         #return View
#
#     @property
#     def Presentation(self):
#         '-no docstring-'
#         #return Presentation
#
#     @property
#     def IsFullScreen(self):
#         '-no docstring-'
#         #return IsFullScreen
#
#     def _get(self):
#         '-no docstring-'
#         #return Left
#     def _set(self, Left):
#         '-no docstring-'
#     Left = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Top
#     def _set(self, Top):
#         '-no docstring-'
#     Top = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Width
#     def _set(self, Width):
#         '-no docstring-'
#     Width = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Height
#     def _set(self, Height):
#         '-no docstring-'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def HWND(self):
#         '-no docstring-'
#         #return HWND
#
#     @property
#     def Active(self):
#         '-no docstring-'
#         #return Active
#
#     def Activate(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def SlideNavigation(self):
#         '-no docstring-'
#         #return navigation
#


class Research(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934F7-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Query(self, ServiceID: hints.Incomplete, QueryString: hints.Incomplete = ..., QueryLanguage: hints.Incomplete = ..., UseSelection: hints.Incomplete = ..., LaunchQuery: hints.Incomplete = ...) -> hints.Hresult: ...
        def SetLanguagePair(self, Language1: hints.Incomplete, Language2: hints.Incomplete) -> hints.Hresult: ...
        def IsResearchService(self, ServiceID: hints.Incomplete) -> hints.Incomplete: ...


Research._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003)],
        HRESULT,
        'Query',
        (['in'], BSTR, 'ServiceID'),
        (['in', 'optional'], POINTER(VARIANT), 'QueryString'),
        (['in', 'optional'], POINTER(VARIANT), 'QueryLanguage'),
        (['in', 'optional'], VARIANT_BOOL, 'UseSelection', False),
        (['in', 'optional'], VARIANT_BOOL, 'LaunchQuery', True)
    ),
    COMMETHOD(
        [dispid(2004)],
        HRESULT,
        'SetLanguagePair',
        (['in'], POINTER(VARIANT), 'Language1'),
        (['in'], POINTER(VARIANT), 'Language2')
    ),
    COMMETHOD(
        [dispid(2005)],
        HRESULT,
        'IsResearchService',
        (['in'], BSTR, 'ServiceID'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'IsResearchService')
    ),
]

################################################################
# code template for Research implementation
# class Research_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Query(self, ServiceID, QueryString, QueryLanguage, UseSelection, LaunchQuery):
#         '-no docstring-'
#         #return 
#
#     def SetLanguagePair(self, Language1, Language2):
#         '-no docstring-'
#         #return 
#
#     def IsResearchService(self, ServiceID):
#         '-no docstring-'
#         #return IsResearchService
#

FileConverter._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'CanOpen',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'CanOpen')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'CanSave',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'CanSave')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'ClassName',
        (['out', 'retval'], POINTER(BSTR), 'ClassName')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(POINTER(FileConverters)), 'Creator')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'Extensions',
        (['out', 'retval'], POINTER(BSTR), 'Extensions')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'FormatName',
        (['out', 'retval'], POINTER(BSTR), 'FormatName')
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(FileConverters)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'Path',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(2011), 'propget'],
        HRESULT,
        'OpenFormat',
        (['out', 'retval'], POINTER(c_int), 'OpenFormat')
    ),
    COMMETHOD(
        [dispid(2012), 'propget'],
        HRESULT,
        'SaveFormat',
        (['out', 'retval'], POINTER(c_int), 'SaveFormat')
    ),
]

################################################################
# code template for FileConverter implementation
# class FileConverter_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def CanOpen(self):
#         '-no docstring-'
#         #return CanOpen
#
#     @property
#     def CanSave(self):
#         '-no docstring-'
#         #return CanSave
#
#     @property
#     def ClassName(self):
#         '-no docstring-'
#         #return ClassName
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return Creator
#
#     @property
#     def Extensions(self):
#         '-no docstring-'
#         #return Extensions
#
#     @property
#     def FormatName(self):
#         '-no docstring-'
#         #return FormatName
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return Name
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Path(self):
#         '-no docstring-'
#         #return Path
#
#     @property
#     def OpenFormat(self):
#         '-no docstring-'
#         #return OpenFormat
#
#     @property
#     def SaveFormat(self):
#         '-no docstring-'
#         #return SaveFormat
#

CommandEffect._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(MsoAnimCommandType), 'Type')
    ),
    COMMETHOD(
        [dispid(2003), 'propput'],
        HRESULT,
        'Type',
        (['in'], MsoAnimCommandType, 'Type')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Command',
        (['out', 'retval'], POINTER(BSTR), 'Command')
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'Command',
        (['in'], BSTR, 'Command')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'bookmark',
        (['out', 'retval'], POINTER(BSTR), 'bookmark')
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'bookmark',
        (['in'], BSTR, 'bookmark')
    ),
]

################################################################
# code template for CommandEffect implementation
# class CommandEffect_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return Type
#     def _set(self, Type):
#         '-no docstring-'
#     Type = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Command
#     def _set(self, Command):
#         '-no docstring-'
#     Command = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return bookmark
#     def _set(self, bookmark):
#         '-no docstring-'
#     bookmark = property(_get, _set, doc = _set.__doc__)
#

Corners._methods_ = [
    COMMETHOD(
        [dispid(150), 'hidden', 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(110), 'hidden', 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(235), 'hidden'],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
]

################################################################
# code template for Corners implementation
# class Corners_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return RHS
#
#     def Select(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#


class Pane(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934CC-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Activate(self) -> hints.Hresult: ...
        def _get_Active(self) -> hints.Incomplete: ...
        Active = hints.normal_property(_get_Active)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_ViewType(self) -> hints.Incomplete: ...
        ViewType = hints.normal_property(_get_ViewType)


Pane._methods_ = [
    COMMETHOD(
        [dispid(2000), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD([dispid(2001)], HRESULT, 'Activate'),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Active',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Active',
        )
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'ViewType',
        (['out', 'retval'], POINTER(PpViewType), 'ViewType')
    ),
]

################################################################
# code template for Pane implementation
# class Pane_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Activate(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Active(self):
#         '-no docstring-'
#         #return Active
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def ViewType(self):
#         '-no docstring-'
#         #return ViewType
#


class PlaySettings(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{9149348E-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_ActionVerb(self) -> hints.Incomplete: ...
        def _set_ActionVerb(self, ActionVerb: hints.Incomplete) -> hints.Hresult: ...
        ActionVerb = hints.normal_property(_get_ActionVerb, _set_ActionVerb)
        def _get_HideWhileNotPlaying(self) -> hints.Incomplete: ...
        def _set_HideWhileNotPlaying(self, HideWhileNotPlaying: hints.Incomplete) -> hints.Hresult: ...
        HideWhileNotPlaying = hints.normal_property(_get_HideWhileNotPlaying, _set_HideWhileNotPlaying)
        def _get_LoopUntilStopped(self) -> hints.Incomplete: ...
        def _set_LoopUntilStopped(self, LoopUntilStopped: hints.Incomplete) -> hints.Hresult: ...
        LoopUntilStopped = hints.normal_property(_get_LoopUntilStopped, _set_LoopUntilStopped)
        def _get_PlayOnEntry(self) -> hints.Incomplete: ...
        def _set_PlayOnEntry(self, PlayOnEntry: hints.Incomplete) -> hints.Hresult: ...
        PlayOnEntry = hints.normal_property(_get_PlayOnEntry, _set_PlayOnEntry)
        def _get_RewindMovie(self) -> hints.Incomplete: ...
        def _set_RewindMovie(self, RewindMovie: hints.Incomplete) -> hints.Hresult: ...
        RewindMovie = hints.normal_property(_get_RewindMovie, _set_RewindMovie)
        def _get_PauseAnimation(self) -> hints.Incomplete: ...
        def _set_PauseAnimation(self, PauseAnimation: hints.Incomplete) -> hints.Hresult: ...
        PauseAnimation = hints.normal_property(_get_PauseAnimation, _set_PauseAnimation)
        def _get_StopAfterSlides(self) -> hints.Incomplete: ...
        def _set_StopAfterSlides(self, StopAfterSlides: hints.Incomplete) -> hints.Hresult: ...
        StopAfterSlides = hints.normal_property(_get_StopAfterSlides, _set_StopAfterSlides)


AnimationSettings._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'DimColor',
        (['out', 'retval'], POINTER(POINTER(ColorFormat)), 'DimColor')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'SoundEffect',
        (['out', 'retval'], POINTER(POINTER(SoundEffect)), 'SoundEffect')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'EntryEffect',
        (['out', 'retval'], POINTER(PpEntryEffect), 'EntryEffect')
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'EntryEffect',
        (['in'], PpEntryEffect, 'EntryEffect')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'AfterEffect',
        (['out', 'retval'], POINTER(PpAfterEffect), 'AfterEffect')
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'AfterEffect',
        (['in'], PpAfterEffect, 'AfterEffect')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'AnimationOrder',
        (['out', 'retval'], POINTER(c_int), 'AnimationOrder')
    ),
    COMMETHOD(
        [dispid(2007), 'propput'],
        HRESULT,
        'AnimationOrder',
        (['in'], c_int, 'AnimationOrder')
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'AdvanceMode',
        (['out', 'retval'], POINTER(PpAdvanceMode), 'AdvanceMode')
    ),
    COMMETHOD(
        [dispid(2008), 'propput'],
        HRESULT,
        'AdvanceMode',
        (['in'], PpAdvanceMode, 'AdvanceMode')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'AdvanceTime',
        (['out', 'retval'], POINTER(c_float), 'AdvanceTime')
    ),
    COMMETHOD(
        [dispid(2009), 'propput'],
        HRESULT,
        'AdvanceTime',
        (['in'], c_float, 'AdvanceTime')
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'PlaySettings',
        (['out', 'retval'], POINTER(POINTER(PlaySettings)), 'PlaySettings')
    ),
    COMMETHOD(
        [dispid(2011), 'propget'],
        HRESULT,
        'TextLevelEffect',
        (['out', 'retval'], POINTER(PpTextLevelEffect), 'TextLevelEffect')
    ),
    COMMETHOD(
        [dispid(2011), 'propput'],
        HRESULT,
        'TextLevelEffect',
        (['in'], PpTextLevelEffect, 'TextLevelEffect')
    ),
    COMMETHOD(
        [dispid(2012), 'propget'],
        HRESULT,
        'TextUnitEffect',
        (['out', 'retval'], POINTER(PpTextUnitEffect), 'TextUnitEffect')
    ),
    COMMETHOD(
        [dispid(2012), 'propput'],
        HRESULT,
        'TextUnitEffect',
        (['in'], PpTextUnitEffect, 'TextUnitEffect')
    ),
    COMMETHOD(
        [dispid(2013), 'propget'],
        HRESULT,
        'Animate',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Animate',
        )
    ),
    COMMETHOD(
        [dispid(2013), 'propput'],
        HRESULT,
        'Animate',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Animate',
        )
    ),
    COMMETHOD(
        [dispid(2014), 'propget'],
        HRESULT,
        'AnimateBackground',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'AnimateBackground',
        )
    ),
    COMMETHOD(
        [dispid(2014), 'propput'],
        HRESULT,
        'AnimateBackground',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'AnimateBackground',
        )
    ),
    COMMETHOD(
        [dispid(2015), 'propget'],
        HRESULT,
        'AnimateTextInReverse',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'AnimateTextInReverse',
        )
    ),
    COMMETHOD(
        [dispid(2015), 'propput'],
        HRESULT,
        'AnimateTextInReverse',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'AnimateTextInReverse',
        )
    ),
    COMMETHOD(
        [dispid(2016), 'propget'],
        HRESULT,
        'ChartUnitEffect',
        (['out', 'retval'], POINTER(PpChartUnitEffect), 'ChartUnitEffect')
    ),
    COMMETHOD(
        [dispid(2016), 'propput'],
        HRESULT,
        'ChartUnitEffect',
        (['in'], PpChartUnitEffect, 'ChartUnitEffect')
    ),
]

################################################################
# code template for AnimationSettings implementation
# class AnimationSettings_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def DimColor(self):
#         '-no docstring-'
#         #return DimColor
#
#     @property
#     def SoundEffect(self):
#         '-no docstring-'
#         #return SoundEffect
#
#     def _get(self):
#         '-no docstring-'
#         #return EntryEffect
#     def _set(self, EntryEffect):
#         '-no docstring-'
#     EntryEffect = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return AfterEffect
#     def _set(self, AfterEffect):
#         '-no docstring-'
#     AfterEffect = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return AnimationOrder
#     def _set(self, AnimationOrder):
#         '-no docstring-'
#     AnimationOrder = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return AdvanceMode
#     def _set(self, AdvanceMode):
#         '-no docstring-'
#     AdvanceMode = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return AdvanceTime
#     def _set(self, AdvanceTime):
#         '-no docstring-'
#     AdvanceTime = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def PlaySettings(self):
#         '-no docstring-'
#         #return PlaySettings
#
#     def _get(self):
#         '-no docstring-'
#         #return TextLevelEffect
#     def _set(self, TextLevelEffect):
#         '-no docstring-'
#     TextLevelEffect = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return TextUnitEffect
#     def _set(self, TextUnitEffect):
#         '-no docstring-'
#     TextUnitEffect = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Animate
#     def _set(self, Animate):
#         '-no docstring-'
#     Animate = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return AnimateBackground
#     def _set(self, AnimateBackground):
#         '-no docstring-'
#     AnimateBackground = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return AnimateTextInReverse
#     def _set(self, AnimateTextInReverse):
#         '-no docstring-'
#     AnimateTextInReverse = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ChartUnitEffect
#     def _set(self, ChartUnitEffect):
#         '-no docstring-'
#     ChartUnitEffect = property(_get, _set, doc = _set.__doc__)
#

ChartBorder._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propput'],
        HRESULT,
        'Color',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Color',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2002), 'propput'],
        HRESULT,
        'ColorIndex',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'ColorIndex',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2003), 'propput'],
        HRESULT,
        'LineStyle',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'LineStyle',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'Weight',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Weight',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
]

################################################################
# code template for ChartBorder implementation
# class ChartBorder_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Color = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ColorIndex = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     LineStyle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Weight = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#


class View(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493458-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Type(self) -> hints.Incomplete: ...
        Type = hints.normal_property(_get_Type)
        def _get_Zoom(self) -> hints.Incomplete: ...
        def _set_Zoom(self, Zoom: hints.Incomplete) -> hints.Hresult: ...
        Zoom = hints.normal_property(_get_Zoom, _set_Zoom)
        def Paste(self) -> hints.Hresult: ...
        def _get_Slide(self) -> hints.Incomplete: ...
        def _set_Slide(self, Slide: hints.Incomplete) -> hints.Hresult: ...
        Slide = hints.normal_property(_get_Slide, _set_Slide)
        def GotoSlide(self, Index: hints.Incomplete) -> hints.Hresult: ...
        def _get_DisplaySlideMiniature(self) -> hints.Incomplete: ...
        def _set_DisplaySlideMiniature(self, DisplaySlideMiniature: hints.Incomplete) -> hints.Hresult: ...
        DisplaySlideMiniature = hints.normal_property(_get_DisplaySlideMiniature, _set_DisplaySlideMiniature)
        def _get_ZoomToFit(self) -> hints.Incomplete: ...
        def _set_ZoomToFit(self, ZoomToFit: hints.Incomplete) -> hints.Hresult: ...
        ZoomToFit = hints.normal_property(_get_ZoomToFit, _set_ZoomToFit)
        def PasteSpecial(self, DataType: hints.Incomplete = ..., DisplayAsIcon: hints.Incomplete = ..., IconFileName: hints.Incomplete = ..., IconIndex: hints.Incomplete = ..., IconLabel: hints.Incomplete = ..., Link: hints.Incomplete = ...) -> hints.Hresult: ...
        def _get_PrintOptions(self) -> 'PrintOptions': ...
        PrintOptions = hints.normal_property(_get_PrintOptions)
        def PrintOut(self, From: hints.Incomplete = ..., To: hints.Incomplete = ..., PrintToFile: hints.Incomplete = ..., Copies: hints.Incomplete = ..., Collate: hints.Incomplete = ...) -> hints.Hresult: ...
        def Player(self, ShapeId: hints.Incomplete) -> 'Player': ...
        def _get_MediaControlsVisible(self) -> hints.Incomplete: ...
        MediaControlsVisible = hints.normal_property(_get_MediaControlsVisible)
        def _get_MediaControlsLeft(self) -> hints.Incomplete: ...
        MediaControlsLeft = hints.normal_property(_get_MediaControlsLeft)
        def _get_MediaControlsTop(self) -> hints.Incomplete: ...
        MediaControlsTop = hints.normal_property(_get_MediaControlsTop)
        def _get_MediaControlsWidth(self) -> hints.Incomplete: ...
        MediaControlsWidth = hints.normal_property(_get_MediaControlsWidth)
        def _get_MediaControlsHeight(self) -> hints.Incomplete: ...
        MediaControlsHeight = hints.normal_property(_get_MediaControlsHeight)


class Panes(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{914934CB-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def Item(self, Index: hints.Incomplete) -> 'Pane': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)


DocumentWindow._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Selection',
        (['out', 'retval'], POINTER(POINTER(Selection)), 'Selection')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'View',
        (['out', 'retval'], POINTER(POINTER(View)), 'View')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'Presentation',
        (['out', 'retval'], POINTER(POINTER(Presentation)), 'Presentation')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'ViewType',
        (['out', 'retval'], POINTER(PpViewType), 'ViewType')
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'ViewType',
        (['in'], PpViewType, 'ViewType')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'BlackAndWhite',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'BlackAndWhite',
        )
    ),
    COMMETHOD(
        [dispid(2007), 'propput'],
        HRESULT,
        'BlackAndWhite',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'BlackAndWhite',
        )
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'Active',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Active',
        )
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'WindowState',
        (['out', 'retval'], POINTER(PpWindowState), 'WindowState')
    ),
    COMMETHOD(
        [dispid(2009), 'propput'],
        HRESULT,
        'WindowState',
        (['in'], PpWindowState, 'WindowState')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Caption',
        (['out', 'retval'], POINTER(BSTR), 'Caption')
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'Left',
        (['out', 'retval'], POINTER(c_float), 'Left')
    ),
    COMMETHOD(
        [dispid(2010), 'propput'],
        HRESULT,
        'Left',
        (['in'], c_float, 'Left')
    ),
    COMMETHOD(
        [dispid(2011), 'propget'],
        HRESULT,
        'Top',
        (['out', 'retval'], POINTER(c_float), 'Top')
    ),
    COMMETHOD(
        [dispid(2011), 'propput'],
        HRESULT,
        'Top',
        (['in'], c_float, 'Top')
    ),
    COMMETHOD(
        [dispid(2012), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_float), 'Width')
    ),
    COMMETHOD(
        [dispid(2012), 'propput'],
        HRESULT,
        'Width',
        (['in'], c_float, 'Width')
    ),
    COMMETHOD(
        [dispid(2013), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_float), 'Height')
    ),
    COMMETHOD(
        [dispid(2013), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_float, 'Height')
    ),
    COMMETHOD([dispid(2014)], HRESULT, 'FitToPage'),
    COMMETHOD([dispid(2015)], HRESULT, 'Activate'),
    COMMETHOD(
        [dispid(2016)],
        HRESULT,
        'LargeScroll',
        (['in', 'optional'], c_int, 'Down', 1),
        (['in', 'optional'], c_int, 'Up', 0),
        (['in', 'optional'], c_int, 'ToRight', 0),
        (['in', 'optional'], c_int, 'ToLeft', 0)
    ),
    COMMETHOD(
        [dispid(2017)],
        HRESULT,
        'SmallScroll',
        (['in', 'optional'], c_int, 'Down', 1),
        (['in', 'optional'], c_int, 'Up', 0),
        (['in', 'optional'], c_int, 'ToRight', 0),
        (['in', 'optional'], c_int, 'ToLeft', 0)
    ),
    COMMETHOD(
        [dispid(2018)],
        HRESULT,
        'NewWindow',
        (['out', 'retval'], POINTER(POINTER(DocumentWindow)), 'NewWindow')
    ),
    COMMETHOD([dispid(2019)], HRESULT, 'Close'),
    COMMETHOD(
        [dispid(2020), 'restricted', 'propget'],
        HRESULT,
        'HWND',
        (['out', 'retval'], POINTER(c_int), 'HWND')
    ),
    COMMETHOD(
        [dispid(2021), 'propget'],
        HRESULT,
        'ActivePane',
        (['out', 'retval'], POINTER(POINTER(Pane)), 'ActivePane')
    ),
    COMMETHOD(
        [dispid(2022), 'propget'],
        HRESULT,
        'Panes',
        (['out', 'retval'], POINTER(POINTER(Panes)), 'Panes')
    ),
    COMMETHOD(
        [dispid(2023), 'propget'],
        HRESULT,
        'SplitVertical',
        (['out', 'retval'], POINTER(c_int), 'SplitVertical')
    ),
    COMMETHOD(
        [dispid(2023), 'propput'],
        HRESULT,
        'SplitVertical',
        (['in'], c_int, 'SplitVertical')
    ),
    COMMETHOD(
        [dispid(2024), 'propget'],
        HRESULT,
        'SplitHorizontal',
        (['out', 'retval'], POINTER(c_int), 'SplitHorizontal')
    ),
    COMMETHOD(
        [dispid(2024), 'propput'],
        HRESULT,
        'SplitHorizontal',
        (['in'], c_int, 'SplitHorizontal')
    ),
    COMMETHOD(
        [dispid(2025)],
        HRESULT,
        'RangeFromPoint',
        (['in'], c_int, 'X'),
        (['in'], c_int, 'Y'),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RangeFromPoint')
    ),
    COMMETHOD(
        [dispid(2026)],
        HRESULT,
        'PointsToScreenPixelsX',
        (['in'], c_float, 'Points'),
        (['out', 'retval'], POINTER(c_int), 'PointsToScreenPixelsX')
    ),
    COMMETHOD(
        [dispid(2027)],
        HRESULT,
        'PointsToScreenPixelsY',
        (['in'], c_float, 'Points'),
        (['out', 'retval'], POINTER(c_int), 'PointsToScreenPixelsY')
    ),
    COMMETHOD(
        [dispid(2028)],
        HRESULT,
        'ScrollIntoView',
        (['in'], c_float, 'Left'),
        (['in'], c_float, 'Top'),
        (['in'], c_float, 'Width'),
        (['in'], c_float, 'Height'),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Start',
            -1
        )
    ),
    COMMETHOD(
        [dispid(2029)],
        HRESULT,
        'IsSectionExpanded',
        (['in'], c_int, 'sectionIndex'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'IsSectionExpanded')
    ),
    COMMETHOD(
        [dispid(2030)],
        HRESULT,
        'ExpandSection',
        (['in'], c_int, 'sectionIndex'),
        (['in'], VARIANT_BOOL, 'Expand')
    ),
    COMMETHOD(
        [dispid(2031)],
        HRESULT,
        'ShowInsertAppDialog',
        (['in'], c_int, 'Filter')
    ),
]

################################################################
# code template for DocumentWindow implementation
# class DocumentWindow_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Selection(self):
#         '-no docstring-'
#         #return Selection
#
#     @property
#     def View(self):
#         '-no docstring-'
#         #return View
#
#     @property
#     def Presentation(self):
#         '-no docstring-'
#         #return Presentation
#
#     def _get(self):
#         '-no docstring-'
#         #return ViewType
#     def _set(self, ViewType):
#         '-no docstring-'
#     ViewType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return BlackAndWhite
#     def _set(self, BlackAndWhite):
#         '-no docstring-'
#     BlackAndWhite = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Active(self):
#         '-no docstring-'
#         #return Active
#
#     def _get(self):
#         '-no docstring-'
#         #return WindowState
#     def _set(self, WindowState):
#         '-no docstring-'
#     WindowState = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Caption(self):
#         '-no docstring-'
#         #return Caption
#
#     def _get(self):
#         '-no docstring-'
#         #return Left
#     def _set(self, Left):
#         '-no docstring-'
#     Left = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Top
#     def _set(self, Top):
#         '-no docstring-'
#     Top = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Width
#     def _set(self, Width):
#         '-no docstring-'
#     Width = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Height
#     def _set(self, Height):
#         '-no docstring-'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     def FitToPage(self):
#         '-no docstring-'
#         #return 
#
#     def Activate(self):
#         '-no docstring-'
#         #return 
#
#     def LargeScroll(self, Down, Up, ToRight, ToLeft):
#         '-no docstring-'
#         #return 
#
#     def SmallScroll(self, Down, Up, ToRight, ToLeft):
#         '-no docstring-'
#         #return 
#
#     def NewWindow(self):
#         '-no docstring-'
#         #return NewWindow
#
#     def Close(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def HWND(self):
#         '-no docstring-'
#         #return HWND
#
#     @property
#     def ActivePane(self):
#         '-no docstring-'
#         #return ActivePane
#
#     @property
#     def Panes(self):
#         '-no docstring-'
#         #return Panes
#
#     def _get(self):
#         '-no docstring-'
#         #return SplitVertical
#     def _set(self, SplitVertical):
#         '-no docstring-'
#     SplitVertical = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return SplitHorizontal
#     def _set(self, SplitHorizontal):
#         '-no docstring-'
#     SplitHorizontal = property(_get, _set, doc = _set.__doc__)
#
#     def RangeFromPoint(self, X, Y):
#         '-no docstring-'
#         #return RangeFromPoint
#
#     def PointsToScreenPixelsX(self, Points):
#         '-no docstring-'
#         #return PointsToScreenPixelsX
#
#     def PointsToScreenPixelsY(self, Points):
#         '-no docstring-'
#         #return PointsToScreenPixelsY
#
#     def ScrollIntoView(self, Left, Top, Width, Height, Start):
#         '-no docstring-'
#         #return 
#
#     def IsSectionExpanded(self, sectionIndex):
#         '-no docstring-'
#         #return IsSectionExpanded
#
#     def ExpandSection(self, sectionIndex, Expand):
#         '-no docstring-'
#         #return 
#
#     def ShowInsertAppDialog(self, Filter):
#         '-no docstring-'
#         #return 
#

PresEvents._methods_ = [
]

################################################################
# code template for PresEvents implementation
# class PresEvents_Impl(object):

DisplayUnitLabel._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propput'],
        HRESULT,
        'Caption',
        (['in'], BSTR, 'RHS')
    ),
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Caption',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Characters',
        (['in', 'optional'], VARIANT, 'Start'),
        (['in', 'optional'], VARIANT, 'Length'),
        (['out', 'retval'], POINTER(POINTER(ChartCharacters)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2003), 'hidden', 'propget'],
        HRESULT,
        'Font',
        (['out', 'retval'], POINTER(POINTER(ChartFont)), 'ppfont')
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'HorizontalAlignment',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'HorizontalAlignment',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'Left',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'Left',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'Orientation',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'Orientation',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'Shadow',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2007), 'propput'],
        HRESULT,
        'Shadow',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(2008), 'propput'],
        HRESULT,
        'Text',
        (['in'], BSTR, 'RHS')
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'Text',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'Top',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(2009), 'propput'],
        HRESULT,
        'Top',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(2010), 'propput'],
        HRESULT,
        'VerticalAlignment',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'VerticalAlignment',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2011), 'hidden', 'propput'],
        HRESULT,
        'AutoScaleFont',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2011), 'hidden', 'propget'],
        HRESULT,
        'AutoScaleFont',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2012), 'hidden', 'propget'],
        HRESULT,
        'Interior',
        (['out', 'retval'], POINTER(POINTER(Interior)), 'ppinterior')
    ),
    COMMETHOD(
        [dispid(2013), 'hidden', 'propget'],
        HRESULT,
        'Fill',
        (['out', 'retval'], POINTER(POINTER(ChartFillFormat)), 'ppinterior')
    ),
    COMMETHOD(
        [dispid(2014)],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2015), 'hidden', 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(ChartBorder)), 'ppborder')
    ),
    COMMETHOD(
        [dispid(2016), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(2017), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        [dispid(2018)],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(1671), 'propget'],
        HRESULT,
        'Position',
        (['out', 'retval'], POINTER(XlChartElementPosition), 'RHS')
    ),
    COMMETHOD(
        [dispid(1671), 'propput'],
        HRESULT,
        'Position',
        (['in'], XlChartElementPosition, 'RHS')
    ),
    COMMETHOD(
        [dispid(2019), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(ChartFormat)), 'RHS')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2020), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2021), 'propget'],
        HRESULT,
        'ReadingOrder',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2021), 'propput'],
        HRESULT,
        'ReadingOrder',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(2022), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_double), 'Height')
    ),
    COMMETHOD(
        [dispid(2023), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_double), 'Width')
    ),
    COMMETHOD(
        [dispid(2024), 'propput'],
        HRESULT,
        'Formula',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(2024), 'propget'],
        HRESULT,
        'Formula',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(2025), 'propput'],
        HRESULT,
        'FormulaR1C1',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(2025), 'propget'],
        HRESULT,
        'FormulaR1C1',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(2026), 'propput'],
        HRESULT,
        'FormulaLocal',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(2026), 'propget'],
        HRESULT,
        'FormulaLocal',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(2027), 'propput'],
        HRESULT,
        'FormulaR1C1Local',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(2027), 'propget'],
        HRESULT,
        'FormulaR1C1Local',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(2028)],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'Id'),
        (['out', 'retval'], POINTER(VARIANT), 'pValue')
    ),
    COMMETHOD(
        [dispid(2029)],
        HRESULT,
        'SetProperty',
        (['in'], BSTR, 'Id'),
        (['in'], VARIANT, 'Value')
    ),
]

################################################################
# code template for DisplayUnitLabel implementation
# class DisplayUnitLabel_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Caption = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Characters(self, Start, Length):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Font(self):
#         '-no docstring-'
#         #return ppfont
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     HorizontalAlignment = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Left = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Orientation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Shadow = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Text = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Top = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     VerticalAlignment = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     AutoScaleFont = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Interior(self):
#         '-no docstring-'
#         #return ppinterior
#
#     @property
#     def Fill(self):
#         '-no docstring-'
#         #return ppinterior
#
#     def Delete(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return ppborder
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppval
#
#     def Select(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Position = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ReadingOrder = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Height(self):
#         '-no docstring-'
#         #return Height
#
#     @property
#     def Width(self):
#         '-no docstring-'
#         #return Width
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     Formula = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     FormulaR1C1 = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     FormulaLocal = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     FormulaR1C1Local = property(_get, _set, doc = _set.__doc__)
#
#     def GetProperty(self, Id):
#         '-no docstring-'
#         #return pValue
#
#     def SetProperty(self, Id, Value):
#         '-no docstring-'
#         #return 
#


class Slides(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{91493469-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Item(self, Index: hints.Incomplete) -> hints.Annotated['_Slide', hints.FirstComItfOf['Slide']]: ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def FindBySlideID(self, SlideID: hints.Incomplete) -> hints.Annotated['_Slide', hints.FirstComItfOf['Slide']]: ...
        def Add(self, Index: hints.Incomplete, Layout: hints.Incomplete) -> hints.Annotated['_Slide', hints.FirstComItfOf['Slide']]: ...
        def InsertFromFile(self, FileName: hints.Incomplete, Index: hints.Incomplete, SlideStart: hints.Incomplete = ..., SlideEnd: hints.Incomplete = ...) -> hints.Incomplete: ...
        def Range(self, Index: hints.Incomplete = ...) -> 'SlideRange': ...
        def Paste(self, Index: hints.Incomplete = ...) -> 'SlideRange': ...
        def AddSlide(self, Index: hints.Incomplete, pCustomLayout: hints.Incomplete) -> hints.Annotated['_Slide', hints.FirstComItfOf['Slide']]: ...


class PrintOptions(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{9149345D-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_PrintColorType(self) -> hints.Incomplete: ...
        def _set_PrintColorType(self, PrintColorType: hints.Incomplete) -> hints.Hresult: ...
        PrintColorType = hints.normal_property(_get_PrintColorType, _set_PrintColorType)
        def _get_Collate(self) -> hints.Incomplete: ...
        def _set_Collate(self, Collate: hints.Incomplete) -> hints.Hresult: ...
        Collate = hints.normal_property(_get_Collate, _set_Collate)
        def _get_FitToPage(self) -> hints.Incomplete: ...
        def _set_FitToPage(self, FitToPage: hints.Incomplete) -> hints.Hresult: ...
        FitToPage = hints.normal_property(_get_FitToPage, _set_FitToPage)
        def _get_FrameSlides(self) -> hints.Incomplete: ...
        def _set_FrameSlides(self, FrameSlides: hints.Incomplete) -> hints.Hresult: ...
        FrameSlides = hints.normal_property(_get_FrameSlides, _set_FrameSlides)
        def _get_NumberOfCopies(self) -> hints.Incomplete: ...
        def _set_NumberOfCopies(self, NumberOfCopies: hints.Incomplete) -> hints.Hresult: ...
        NumberOfCopies = hints.normal_property(_get_NumberOfCopies, _set_NumberOfCopies)
        def _get_OutputType(self) -> hints.Incomplete: ...
        def _set_OutputType(self, OutputType: hints.Incomplete) -> hints.Hresult: ...
        OutputType = hints.normal_property(_get_OutputType, _set_OutputType)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_PrintHiddenSlides(self) -> hints.Incomplete: ...
        def _set_PrintHiddenSlides(self, PrintHiddenSlides: hints.Incomplete) -> hints.Hresult: ...
        PrintHiddenSlides = hints.normal_property(_get_PrintHiddenSlides, _set_PrintHiddenSlides)
        def _get_PrintInBackground(self) -> hints.Incomplete: ...
        def _set_PrintInBackground(self, PrintInBackground: hints.Incomplete) -> hints.Hresult: ...
        PrintInBackground = hints.normal_property(_get_PrintInBackground, _set_PrintInBackground)
        def _get_RangeType(self) -> hints.Incomplete: ...
        def _set_RangeType(self, RangeType: hints.Incomplete) -> hints.Hresult: ...
        RangeType = hints.normal_property(_get_RangeType, _set_RangeType)
        def _get_Ranges(self) -> 'PrintRanges': ...
        Ranges = hints.normal_property(_get_Ranges)
        def _get_PrintFontsAsGraphics(self) -> hints.Incomplete: ...
        def _set_PrintFontsAsGraphics(self, PrintFontsAsGraphics: hints.Incomplete) -> hints.Hresult: ...
        PrintFontsAsGraphics = hints.normal_property(_get_PrintFontsAsGraphics, _set_PrintFontsAsGraphics)
        def _get_SlideShowName(self) -> hints.Incomplete: ...
        def _set_SlideShowName(self, SlideShowName: hints.Incomplete) -> hints.Hresult: ...
        SlideShowName = hints.normal_property(_get_SlideShowName, _set_SlideShowName)
        def _get_ActivePrinter(self) -> hints.Incomplete: ...
        def _set_ActivePrinter(self, ActivePrinter: hints.Incomplete) -> hints.Hresult: ...
        ActivePrinter = hints.normal_property(_get_ActivePrinter, _set_ActivePrinter)
        def _get_HandoutOrder(self) -> hints.Incomplete: ...
        def _set_HandoutOrder(self, HandoutOrder: hints.Incomplete) -> hints.Hresult: ...
        HandoutOrder = hints.normal_property(_get_HandoutOrder, _set_HandoutOrder)
        def _get_PrintComments(self) -> hints.Incomplete: ...
        def _set_PrintComments(self, PrintComments: hints.Incomplete) -> hints.Hresult: ...
        PrintComments = hints.normal_property(_get_PrintComments, _set_PrintComments)
        def _get_sectionIndex(self) -> hints.Incomplete: ...
        def _set_sectionIndex(self, sectionIndex: hints.Incomplete) -> hints.Hresult: ...
        sectionIndex = hints.normal_property(_get_sectionIndex, _set_sectionIndex)
        def _get_HighQuality(self) -> hints.Incomplete: ...
        def _set_HighQuality(self, HighQuality: hints.Incomplete) -> hints.Hresult: ...
        HighQuality = hints.normal_property(_get_HighQuality, _set_HighQuality)


class Designs(Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{914934D6-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Item(self, Index: hints.Incomplete) -> 'Design': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def Add(self, designName: hints.Incomplete, Index: hints.Incomplete = ...) -> 'Design': ...
        def Load(self, TemplateName: hints.Incomplete, Index: hints.Incomplete = ...) -> 'Design': ...
        def Clone(self, pOriginal: hints.Incomplete, Index: hints.Incomplete = ...) -> 'Design': ...


class SectionProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{BA72E551-4FF5-48F4-8215-5505F990966F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Name(self, sectionIndex: hints.Incomplete) -> hints.Incomplete: ...
        def Rename(self, sectionIndex: hints.Incomplete, sectionName: hints.Incomplete) -> hints.Hresult: ...
        def SlidesCount(self, sectionIndex: hints.Incomplete) -> hints.Incomplete: ...
        def FirstSlide(self, sectionIndex: hints.Incomplete) -> hints.Incomplete: ...
        def AddBeforeSlide(self, SlideIndex: hints.Incomplete, sectionName: hints.Incomplete) -> hints.Incomplete: ...
        def AddSection(self, sectionIndex: hints.Incomplete, sectionName: hints.Incomplete = ...) -> hints.Incomplete: ...
        def Move(self, sectionIndex: hints.Incomplete, toPos: hints.Incomplete) -> hints.Hresult: ...
        def Delete(self, sectionIndex: hints.Incomplete, deleteSlides: hints.Incomplete) -> hints.Hresult: ...
        def SectionID(self, sectionIndex: hints.Incomplete) -> hints.Incomplete: ...


class Coauthoring(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{BA72E557-4FF5-48F4-8215-5505F990966F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_MergeMode(self) -> hints.Incomplete: ...
        MergeMode = hints.normal_property(_get_MergeMode)
        def _get_FavorServerEditsDuringMerge(self) -> hints.Incomplete: ...
        def _set_FavorServerEditsDuringMerge(self, FavorServerEditsDuringMerge: hints.Incomplete) -> hints.Hresult: ...
        FavorServerEditsDuringMerge = hints.normal_property(_get_FavorServerEditsDuringMerge, _set_FavorServerEditsDuringMerge)
        def EndReview(self) -> hints.Hresult: ...
        def _get_PendingUpdates(self) -> hints.Incomplete: ...
        PendingUpdates = hints.normal_property(_get_PendingUpdates)
        def _get_CoauthorCount(self) -> hints.Incomplete: ...
        CoauthorCount = hints.normal_property(_get_CoauthorCount)


class Broadcast(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{BA72E558-4FF5-48F4-8215-5505F990966F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Start(self, serverUrl: hints.Incomplete) -> hints.Hresult: ...
        def End(self) -> hints.Hresult: ...
        def _get_AttendeeUrl(self) -> hints.Incomplete: ...
        AttendeeUrl = hints.normal_property(_get_AttendeeUrl)
        def _get_IsBroadcasting(self) -> hints.Incomplete: ...
        IsBroadcasting = hints.normal_property(_get_IsBroadcasting)
        def Pause(self) -> hints.Hresult: ...
        def Resume(self) -> hints.Hresult: ...
        def AddMeetingNotes(self, notesUrl: hints.Incomplete, notesWacUrl: hints.Incomplete) -> hints.Hresult: ...
        def _get_State(self) -> hints.Incomplete: ...
        State = hints.normal_property(_get_State)
        def _get_Capabilities(self) -> hints.Incomplete: ...
        Capabilities = hints.normal_property(_get_Capabilities)
        def _get_SessionID(self) -> hints.Incomplete: ...
        SessionID = hints.normal_property(_get_SessionID)
        def _get_PresenterServiceUrl(self) -> hints.Incomplete: ...
        PresenterServiceUrl = hints.normal_property(_get_PresenterServiceUrl)


_Presentation._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'SlideMaster',
        (['out', 'retval'], POINTER(POINTER(_Master)), 'SlideMaster')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'TitleMaster',
        (['out', 'retval'], POINTER(POINTER(_Master)), 'TitleMaster')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'HasTitleMaster',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'HasTitleMaster',
        )
    ),
    COMMETHOD(
        [dispid(2006)],
        HRESULT,
        'AddTitleMaster',
        (['out', 'retval'], POINTER(POINTER(_Master)), 'TitleMaster')
    ),
    COMMETHOD(
        [dispid(2007)],
        HRESULT,
        'ApplyTemplate',
        (['in'], BSTR, 'FileName')
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'TemplateName',
        (['out', 'retval'], POINTER(BSTR), 'TemplateName')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'NotesMaster',
        (['out', 'retval'], POINTER(POINTER(_Master)), 'NotesMaster')
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'HandoutMaster',
        (['out', 'retval'], POINTER(POINTER(_Master)), 'HandoutMaster')
    ),
    COMMETHOD(
        [dispid(2011), 'propget'],
        HRESULT,
        'Slides',
        (['out', 'retval'], POINTER(POINTER(Slides)), 'Slides')
    ),
    COMMETHOD(
        [dispid(2012), 'propget'],
        HRESULT,
        'PageSetup',
        (['out', 'retval'], POINTER(POINTER(PageSetup)), 'PageSetup')
    ),
    COMMETHOD(
        [dispid(2013), 'propget'],
        HRESULT,
        'ColorSchemes',
        (['out', 'retval'], POINTER(POINTER(ColorSchemes)), 'ColorSchemes')
    ),
    COMMETHOD(
        [dispid(2014), 'propget'],
        HRESULT,
        'ExtraColors',
        (['out', 'retval'], POINTER(POINTER(ExtraColors)), 'ExtraColors')
    ),
    COMMETHOD(
        [dispid(2015), 'propget'],
        HRESULT,
        'SlideShowSettings',
        (
            ['out', 'retval'],
            POINTER(POINTER(SlideShowSettings)),
            'SlideShowSettings',
        )
    ),
    COMMETHOD(
        [dispid(2016), 'propget'],
        HRESULT,
        'Fonts',
        (['out', 'retval'], POINTER(POINTER(Fonts)), 'Fonts')
    ),
    COMMETHOD(
        [dispid(2017), 'propget'],
        HRESULT,
        'Windows',
        (['out', 'retval'], POINTER(POINTER(DocumentWindows)), 'Windows')
    ),
    COMMETHOD(
        [dispid(2018), 'propget'],
        HRESULT,
        'Tags',
        (['out', 'retval'], POINTER(POINTER(Tags)), 'Tags')
    ),
    COMMETHOD(
        [dispid(2019), 'propget'],
        HRESULT,
        'DefaultShape',
        (['out', 'retval'], POINTER(POINTER(Shape)), 'DefaultShape')
    ),
    COMMETHOD(
        [dispid(2020), 'propget'],
        HRESULT,
        'BuiltInDocumentProperties',
        (
            ['out', 'retval'],
            POINTER(POINTER(IDispatch)),
            'BuiltInDocumentProperties',
        )
    ),
    COMMETHOD(
        [dispid(2021), 'propget'],
        HRESULT,
        'CustomDocumentProperties',
        (
            ['out', 'retval'],
            POINTER(POINTER(IDispatch)),
            'CustomDocumentProperties',
        )
    ),
    COMMETHOD(
        [dispid(2022), 'propget'],
        HRESULT,
        'VBProject',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._0002E157_0000_0000_C000_000000000046_0_5_3.VBProject)),
            'VBProject',
        )
    ),
    COMMETHOD(
        [dispid(2023), 'propget'],
        HRESULT,
        'ReadOnly',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'ReadOnly',
        )
    ),
    COMMETHOD(
        [dispid(2024), 'propget'],
        HRESULT,
        'FullName',
        (['out', 'retval'], POINTER(BSTR), 'FullName')
    ),
    COMMETHOD(
        [dispid(2025), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(2026), 'propget'],
        HRESULT,
        'Path',
        (['out', 'retval'], POINTER(BSTR), 'Path')
    ),
    COMMETHOD(
        [dispid(2027), 'propget'],
        HRESULT,
        'Saved',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Saved',
        )
    ),
    COMMETHOD(
        [dispid(2027), 'propput'],
        HRESULT,
        'Saved',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Saved',
        )
    ),
    COMMETHOD(
        [dispid(2028), 'propget'],
        HRESULT,
        'LayoutDirection',
        (['out', 'retval'], POINTER(PpDirection), 'LayoutDirection')
    ),
    COMMETHOD(
        [dispid(2028), 'propput'],
        HRESULT,
        'LayoutDirection',
        (['in'], PpDirection, 'LayoutDirection')
    ),
    COMMETHOD(
        [dispid(2029)],
        HRESULT,
        'NewWindow',
        (['out', 'retval'], POINTER(POINTER(DocumentWindow)), 'NewWindow')
    ),
    COMMETHOD(
        [dispid(2030)],
        HRESULT,
        'FollowHyperlink',
        (['in'], BSTR, 'Address'),
        (['in', 'optional'], BSTR, 'SubAddress', ''),
        (['in', 'optional'], VARIANT_BOOL, 'NewWindow', False),
        (['in', 'optional'], VARIANT_BOOL, 'AddHistory', True),
        (['in', 'optional'], BSTR, 'ExtraInfo', ''),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoExtraInfoMethod,
            'Method',
            0
        ),
        (['in', 'optional'], BSTR, 'HeaderInfo', '')
    ),
    COMMETHOD([dispid(2031)], HRESULT, 'AddToFavorites'),
    COMMETHOD([dispid(2032), 'restricted'], HRESULT, 'Unused'),
    COMMETHOD(
        [dispid(2033), 'propget'],
        HRESULT,
        'PrintOptions',
        (['out', 'retval'], POINTER(POINTER(PrintOptions)), 'PrintOptions')
    ),
    COMMETHOD(
        [dispid(2034)],
        HRESULT,
        'PrintOut',
        (['in', 'optional'], c_int, 'From', -1),
        (['in', 'optional'], c_int, 'To', -1),
        (['in', 'optional'], BSTR, 'PrintToFile', ''),
        (['in', 'optional'], c_int, 'Copies', 0),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Collate',
            -99
        )
    ),
    COMMETHOD([dispid(2035)], HRESULT, 'Save'),
    COMMETHOD(
        [dispid(2036)],
        HRESULT,
        'SaveAs',
        (['in'], BSTR, 'FileName'),
        (['in', 'optional'], PpSaveAsFileType, 'FileFormat', 11),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'EmbedTrueTypeFonts',
            -2
        )
    ),
    COMMETHOD(
        [dispid(2037)],
        HRESULT,
        'SaveCopyAs',
        (['in'], BSTR, 'FileName'),
        (['in', 'optional'], PpSaveAsFileType, 'FileFormat', 11),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'EmbedTrueTypeFonts',
            -2
        )
    ),
    COMMETHOD(
        [dispid(2038)],
        HRESULT,
        'Export',
        (['in'], BSTR, 'Path'),
        (['in'], BSTR, 'FilterName'),
        (['in', 'optional'], c_int, 'ScaleWidth', 0),
        (['in', 'optional'], c_int, 'ScaleHeight', 0)
    ),
    COMMETHOD([dispid(2039)], HRESULT, 'Close'),
    COMMETHOD(
        [dispid(2040), 'hidden'],
        HRESULT,
        'SetUndoText',
        (['in'], BSTR, 'Text')
    ),
    COMMETHOD(
        [dispid(2041), 'propget'],
        HRESULT,
        'Container',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Container')
    ),
    COMMETHOD(
        [dispid(2042), 'propget'],
        HRESULT,
        'DisplayComments',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'DisplayComments',
        )
    ),
    COMMETHOD(
        [dispid(2042), 'propput'],
        HRESULT,
        'DisplayComments',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'DisplayComments',
        )
    ),
    COMMETHOD(
        [dispid(2043), 'propget'],
        HRESULT,
        'FarEastLineBreakLevel',
        (
            ['out', 'retval'],
            POINTER(PpFarEastLineBreakLevel),
            'FarEastLineBreakLevel',
        )
    ),
    COMMETHOD(
        [dispid(2043), 'propput'],
        HRESULT,
        'FarEastLineBreakLevel',
        (['in'], PpFarEastLineBreakLevel, 'FarEastLineBreakLevel')
    ),
    COMMETHOD(
        [dispid(2044), 'propget'],
        HRESULT,
        'NoLineBreakBefore',
        (['out', 'retval'], POINTER(BSTR), 'NoLineBreakBefore')
    ),
    COMMETHOD(
        [dispid(2044), 'propput'],
        HRESULT,
        'NoLineBreakBefore',
        (['in'], BSTR, 'NoLineBreakBefore')
    ),
    COMMETHOD(
        [dispid(2045), 'propget'],
        HRESULT,
        'NoLineBreakAfter',
        (['out', 'retval'], POINTER(BSTR), 'NoLineBreakAfter')
    ),
    COMMETHOD(
        [dispid(2045), 'propput'],
        HRESULT,
        'NoLineBreakAfter',
        (['in'], BSTR, 'NoLineBreakAfter')
    ),
    COMMETHOD([dispid(2046)], HRESULT, 'UpdateLinks'),
    COMMETHOD(
        [dispid(2047), 'propget'],
        HRESULT,
        'SlideShowWindow',
        (
            ['out', 'retval'],
            POINTER(POINTER(SlideShowWindow)),
            'SlideShowWindow',
        )
    ),
    COMMETHOD(
        [dispid(2048), 'propget'],
        HRESULT,
        'FarEastLineBreakLanguage',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoFarEastLineBreakLanguageID),
            'FarEastLineBreakLanguage',
        )
    ),
    COMMETHOD(
        [dispid(2048), 'propput'],
        HRESULT,
        'FarEastLineBreakLanguage',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoFarEastLineBreakLanguageID,
            'FarEastLineBreakLanguage',
        )
    ),
    COMMETHOD([dispid(2049), 'hidden'], HRESULT, 'WebPagePreview'),
    COMMETHOD(
        [dispid(2050), 'propget'],
        HRESULT,
        'DefaultLanguageID',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoLanguageID),
            'DefaultLanguageID',
        )
    ),
    COMMETHOD(
        [dispid(2050), 'propput'],
        HRESULT,
        'DefaultLanguageID',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoLanguageID,
            'DefaultLanguageID',
        )
    ),
    COMMETHOD(
        [dispid(2051), 'propget'],
        HRESULT,
        'CommandBars',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.CommandBars)),
            'CommandBars',
        )
    ),
    COMMETHOD(
        [dispid(2052), 'hidden', 'propget'],
        HRESULT,
        'PublishObjects',
        (['out', 'retval'], POINTER(POINTER(PublishObjects)), 'PublishObjects')
    ),
    COMMETHOD(
        [dispid(2053), 'hidden', 'propget'],
        HRESULT,
        'WebOptions',
        (['out', 'retval'], POINTER(POINTER(WebOptions)), 'WebOptions')
    ),
    COMMETHOD(
        [dispid(2054), 'hidden', 'propget'],
        HRESULT,
        'HTMLProject',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.HTMLProject)),
            'HTMLProject',
        )
    ),
    COMMETHOD(
        [dispid(2055), 'hidden'],
        HRESULT,
        'ReloadAs',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoEncoding,
            'cp',
        )
    ),
    COMMETHOD(
        [dispid(2056), 'hidden'],
        HRESULT,
        'MakeIntoTemplate',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'IsDesignTemplate',
        )
    ),
    COMMETHOD(
        [dispid(2057), 'propget'],
        HRESULT,
        'EnvelopeVisible',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'EnvelopeVisible',
        )
    ),
    COMMETHOD(
        [dispid(2057), 'propput'],
        HRESULT,
        'EnvelopeVisible',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'EnvelopeVisible',
        )
    ),
    COMMETHOD(
        [dispid(2058), 'hidden'],
        HRESULT,
        'sblt',
        (['in'], BSTR, 's')
    ),
    COMMETHOD(
        [dispid(2059), 'propget'],
        HRESULT,
        'VBASigned',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'VBASigned',
        )
    ),
    COMMETHOD(
        [dispid(2061), 'propget'],
        HRESULT,
        'SnapToGrid',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'SnapToGrid',
        )
    ),
    COMMETHOD(
        [dispid(2061), 'propput'],
        HRESULT,
        'SnapToGrid',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'SnapToGrid',
        )
    ),
    COMMETHOD(
        [dispid(2062), 'propget'],
        HRESULT,
        'GridDistance',
        (['out', 'retval'], POINTER(c_float), 'GridDistance')
    ),
    COMMETHOD(
        [dispid(2062), 'propput'],
        HRESULT,
        'GridDistance',
        (['in'], c_float, 'GridDistance')
    ),
    COMMETHOD(
        [dispid(2063), 'propget'],
        HRESULT,
        'Designs',
        (['out', 'retval'], POINTER(POINTER(Designs)), 'Designs')
    ),
    COMMETHOD(
        [dispid(2064)],
        HRESULT,
        'Merge',
        (['in'], BSTR, 'Path')
    ),
    COMMETHOD(
        [dispid(2065)],
        HRESULT,
        'CheckIn',
        (['in', 'optional'], VARIANT_BOOL, 'SaveChanges', True),
        (['in', 'optional'], VARIANT, 'Comments'),
        (['in', 'optional'], VARIANT, 'MakePublic')
    ),
    COMMETHOD(
        [dispid(2066)],
        HRESULT,
        'CanCheckIn',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'CanCheckIn')
    ),
    COMMETHOD(
        [dispid(2067), 'propget'],
        HRESULT,
        'Signatures',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.SignatureSet)),
            'Signatures',
        )
    ),
    COMMETHOD(
        [dispid(2068), 'propget'],
        HRESULT,
        'RemovePersonalInformation',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'RemovePersonalInformation',
        )
    ),
    COMMETHOD(
        [dispid(2068), 'propput'],
        HRESULT,
        'RemovePersonalInformation',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'RemovePersonalInformation',
        )
    ),
    COMMETHOD(
        [dispid(2069), 'hidden'],
        HRESULT,
        'SendForReview',
        (['in', 'optional'], BSTR, 'Recipients'),
        (['in', 'optional'], BSTR, 'Subject'),
        (['in', 'optional'], VARIANT_BOOL, 'ShowMessage', True),
        (['in', 'optional'], VARIANT, 'IncludeAttachment')
    ),
    COMMETHOD(
        [dispid(2070), 'hidden'],
        HRESULT,
        'ReplyWithChanges',
        (['in', 'optional'], VARIANT_BOOL, 'ShowMessage', True)
    ),
    COMMETHOD([dispid(2071)], HRESULT, 'EndReview'),
    COMMETHOD(
        [dispid(2072), 'hidden', 'propget'],
        HRESULT,
        'HasRevisionInfo',
        (['out', 'retval'], POINTER(PpRevisionInfo), 'HasRevisionInfo')
    ),
    COMMETHOD(
        [dispid(2073), 'hidden'],
        HRESULT,
        'AddBaseline',
        (['in', 'optional'], BSTR, 'FileName', '')
    ),
    COMMETHOD([dispid(2074), 'hidden'], HRESULT, 'RemoveBaseline'),
    COMMETHOD(
        [dispid(2075), 'propget'],
        HRESULT,
        'PasswordEncryptionProvider',
        (['out', 'retval'], POINTER(BSTR), 'PasswordEncryptionProvider')
    ),
    COMMETHOD(
        [dispid(2076), 'propget'],
        HRESULT,
        'PasswordEncryptionAlgorithm',
        (['out', 'retval'], POINTER(BSTR), 'PasswordEncryptionAlgorithm')
    ),
    COMMETHOD(
        [dispid(2077), 'propget'],
        HRESULT,
        'PasswordEncryptionKeyLength',
        (['out', 'retval'], POINTER(c_int), 'PasswordEncryptionKeyLength')
    ),
    COMMETHOD(
        [dispid(2078), 'propget'],
        HRESULT,
        'PasswordEncryptionFileProperties',
        (
            ['out', 'retval'],
            POINTER(VARIANT_BOOL),
            'PasswordEncryptionFileProperties',
        )
    ),
    COMMETHOD(
        [dispid(2079)],
        HRESULT,
        'SetPasswordEncryptionOptions',
        (['in'], BSTR, 'PasswordEncryptionProvider'),
        (['in'], BSTR, 'PasswordEncryptionAlgorithm'),
        (['in'], c_int, 'PasswordEncryptionKeyLength'),
        (['in'], VARIANT_BOOL, 'PasswordEncryptionFileProperties')
    ),
    COMMETHOD(
        [dispid(2080), 'propget'],
        HRESULT,
        'Password',
        (['out', 'retval'], POINTER(BSTR), 'Password')
    ),
    COMMETHOD(
        [dispid(2080), 'propput'],
        HRESULT,
        'Password',
        (['in'], BSTR, 'Password')
    ),
    COMMETHOD(
        [dispid(2081), 'propget'],
        HRESULT,
        'WritePassword',
        (['out', 'retval'], POINTER(BSTR), 'WritePassword')
    ),
    COMMETHOD(
        [dispid(2081), 'propput'],
        HRESULT,
        'WritePassword',
        (['in'], BSTR, 'WritePassword')
    ),
    COMMETHOD(
        [dispid(2082), 'propget'],
        HRESULT,
        'Permission',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.Permission)),
            'Permission',
        )
    ),
    COMMETHOD(
        [dispid(2083), 'propget'],
        HRESULT,
        'SharedWorkspace',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.SharedWorkspace)),
            'SharedWorkspace',
        )
    ),
    COMMETHOD(
        [dispid(2084), 'propget'],
        HRESULT,
        'Sync',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.Sync)),
            'Sync',
        )
    ),
    COMMETHOD(
        [dispid(2085)],
        HRESULT,
        'SendFaxOverInternet',
        (['in', 'optional'], BSTR, 'Recipients'),
        (['in', 'optional'], BSTR, 'Subject'),
        (['in', 'optional'], VARIANT_BOOL, 'ShowMessage', False)
    ),
    COMMETHOD(
        [dispid(2086), 'propget'],
        HRESULT,
        'DocumentLibraryVersions',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.DocumentLibraryVersions)),
            'DocumentLibraryVersions',
        )
    ),
    COMMETHOD(
        [dispid(2087), 'propget'],
        HRESULT,
        'ContentTypeProperties',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MetaProperties)),
            'ContentTypeProperties',
        )
    ),
    COMMETHOD(
        [dispid(2088), 'hidden', 'propget'],
        HRESULT,
        'SectionCount',
        (['out', 'retval'], POINTER(c_int), 'SectionCount')
    ),
    COMMETHOD(
        [dispid(2089), 'hidden', 'propget'],
        HRESULT,
        'HasSections',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'HasSections')
    ),
    COMMETHOD(
        [dispid(2090), 'hidden'],
        HRESULT,
        'NewSectionAfter',
        (['in'], c_int, 'Index'),
        (['in'], VARIANT_BOOL, 'AfterSlide'),
        (['in'], BSTR, 'sectionTitle'),
        (['out'], POINTER(c_int), 'newSectionIndex')
    ),
    COMMETHOD(
        [dispid(2091), 'hidden'],
        HRESULT,
        'DeleteSection',
        (['in'], c_int, 'Index')
    ),
    COMMETHOD([dispid(2092), 'hidden'], HRESULT, 'DisableSections'),
    COMMETHOD(
        [dispid(2093), 'hidden'],
        HRESULT,
        'sectionTitle',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(BSTR), 'sectionTitle')
    ),
    COMMETHOD(
        [dispid(2094)],
        HRESULT,
        'RemoveDocumentInformation',
        (['in'], PpRemoveDocInfoType, 'Type')
    ),
    COMMETHOD(
        [dispid(2095)],
        HRESULT,
        'CheckInWithVersion',
        (['in', 'optional'], VARIANT_BOOL, 'SaveChanges', True),
        (['in', 'optional'], VARIANT, 'Comments'),
        (['in', 'optional'], VARIANT, 'MakePublic'),
        (['in', 'optional'], VARIANT, 'VersionType')
    ),
    COMMETHOD(
        [dispid(2096)],
        HRESULT,
        'ExportAsFixedFormat',
        (['in'], BSTR, 'Path'),
        (['in'], PpFixedFormatType, 'FixedFormatType'),
        (['in', 'optional'], PpFixedFormatIntent, 'Intent', 1),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'FrameSlides',
            0
        ),
        (['in', 'optional'], PpPrintHandoutOrder, 'HandoutOrder', 1),
        (['in', 'optional'], PpPrintOutputType, 'OutputType', 1),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'PrintHiddenSlides',
            0
        ),
        (['in', 'optional'], POINTER(PrintRange), 'PrintRange', 0),
        (['in', 'optional'], PpPrintRangeType, 'RangeType', 1),
        (['in', 'optional'], BSTR, 'SlideShowName', ''),
        (['in', 'optional'], VARIANT_BOOL, 'IncludeDocProperties', False),
        (['in', 'optional'], VARIANT_BOOL, 'KeepIRMSettings', True),
        (['in', 'optional'], VARIANT_BOOL, 'DocStructureTags', True),
        (['in', 'optional'], VARIANT_BOOL, 'BitmapMissingFonts', True),
        (['in', 'optional'], VARIANT_BOOL, 'UseISO19005_1', False),
        (['in', 'optional'], VARIANT, 'ExternalExporter')
    ),
    COMMETHOD(
        [dispid(2097), 'propget'],
        HRESULT,
        'ServerPolicy',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.ServerPolicy)),
            'ServerPolicy',
        )
    ),
    COMMETHOD(
        [dispid(2098)],
        HRESULT,
        'GetWorkflowTasks',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.WorkflowTasks)),
            'GetWorkflowTasks',
        )
    ),
    COMMETHOD(
        [dispid(2099)],
        HRESULT,
        'GetWorkflowTemplates',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.WorkflowTemplates)),
            'GetWorkflowTemplates',
        )
    ),
    COMMETHOD([dispid(2100)], HRESULT, 'LockServerFile'),
    COMMETHOD(
        [dispid(2101), 'propget'],
        HRESULT,
        'DocumentInspectors',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.DocumentInspectors)),
            'DocumentInspectors',
        )
    ),
    COMMETHOD(
        [dispid(2102), 'propget'],
        HRESULT,
        'HasVBProject',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'HasVBProject')
    ),
    COMMETHOD(
        [dispid(2103), 'propget'],
        HRESULT,
        'CustomXMLParts',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.CustomXMLParts)),
            'CustomXMLParts',
        )
    ),
    COMMETHOD(
        [dispid(2104), 'propget'],
        HRESULT,
        'Final',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Final')
    ),
    COMMETHOD(
        [dispid(2104), 'propput'],
        HRESULT,
        'Final',
        (['in'], VARIANT_BOOL, 'Final')
    ),
    COMMETHOD(
        [dispid(2105)],
        HRESULT,
        'ApplyTheme',
        (['in'], BSTR, 'themeName')
    ),
    COMMETHOD(
        [dispid(2106), 'propget'],
        HRESULT,
        'CustomerData',
        (['out', 'retval'], POINTER(POINTER(CustomerData)), 'CustomerData')
    ),
    COMMETHOD(
        [dispid(2107), 'propget'],
        HRESULT,
        'Research',
        (['out', 'retval'], POINTER(POINTER(Research)), 'Research')
    ),
    COMMETHOD(
        [dispid(2108), 'hidden'],
        HRESULT,
        'PublishSlides',
        (['in'], BSTR, 'SlideLibraryUrl'),
        (['in', 'optional'], VARIANT_BOOL, 'Overwrite', False),
        (['in', 'optional'], VARIANT_BOOL, 'UseSlideOrder', False)
    ),
    COMMETHOD(
        [dispid(2109), 'propget'],
        HRESULT,
        'EncryptionProvider',
        (['out', 'retval'], POINTER(BSTR), 'EncryptionProvider')
    ),
    COMMETHOD(
        [dispid(2109), 'propput'],
        HRESULT,
        'EncryptionProvider',
        (['in'], BSTR, 'EncryptionProvider')
    ),
    COMMETHOD([dispid(2110), 'hidden'], HRESULT, 'Convert'),
    COMMETHOD(
        [dispid(2111), 'propget'],
        HRESULT,
        'SectionProperties',
        (
            ['out', 'retval'],
            POINTER(POINTER(SectionProperties)),
            'SectionProperties',
        )
    ),
    COMMETHOD(
        [dispid(2112), 'propget'],
        HRESULT,
        'Coauthoring',
        (['out', 'retval'], POINTER(POINTER(Coauthoring)), 'Coauthoring')
    ),
    COMMETHOD(
        [dispid(2113)],
        HRESULT,
        'MergeWithBaseline',
        (['in'], BSTR, 'withPresentation'),
        (['in'], BSTR, 'baselinePresentation')
    ),
    COMMETHOD(
        [dispid(2114), 'propget'],
        HRESULT,
        'InMergeMode',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'InMergeMode')
    ),
    COMMETHOD([dispid(2115)], HRESULT, 'AcceptAll'),
    COMMETHOD([dispid(2116)], HRESULT, 'RejectAll'),
    COMMETHOD([dispid(2117)], HRESULT, 'EnsureAllMediaUpgraded'),
    COMMETHOD(
        [dispid(2118), 'propget'],
        HRESULT,
        'Broadcast',
        (['out', 'retval'], POINTER(POINTER(Broadcast)), 'Broadcast')
    ),
    COMMETHOD(
        [dispid(2119), 'propget'],
        HRESULT,
        'HasNotesMaster',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'HasNotesMaster')
    ),
    COMMETHOD(
        [dispid(2120), 'propget'],
        HRESULT,
        'HasHandoutMaster',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'HasHandoutMaster')
    ),
    COMMETHOD(
        [dispid(2121)],
        HRESULT,
        'Convert2',
        (['in'], BSTR, 'FileName')
    ),
    COMMETHOD(
        [dispid(2122), 'propget'],
        HRESULT,
        'CreateVideoStatus',
        (['out', 'retval'], POINTER(PpMediaTaskStatus), 'CreateVideoStatus')
    ),
    COMMETHOD(
        [dispid(2123)],
        HRESULT,
        'CreateVideo',
        (['in'], BSTR, 'FileName'),
        (['in', 'optional'], VARIANT_BOOL, 'UseTimingsAndNarrations', True),
        (['in', 'optional'], c_int, 'DefaultSlideDuration', 5),
        (['in', 'optional'], c_int, 'VertResolution', 720),
        (['in', 'optional'], c_int, 'FramesPerSecond', 30),
        (['in', 'optional'], c_int, 'Quality', 85)
    ),
    COMMETHOD(
        [dispid(2124)],
        HRESULT,
        'ApplyTemplate2',
        (['in'], BSTR, 'FileName'),
        (['in'], BSTR, 'VariantGUID')
    ),
    COMMETHOD(
        [dispid(2125), 'propget'],
        HRESULT,
        'ChartDataPointTrack',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pfChartDataPointTrack')
    ),
    COMMETHOD(
        [dispid(2125), 'propput'],
        HRESULT,
        'ChartDataPointTrack',
        (['in'], VARIANT_BOOL, 'pfChartDataPointTrack')
    ),
    COMMETHOD(
        [dispid(2126)],
        HRESULT,
        'ExportAsFixedFormat2',
        (['in'], BSTR, 'Path'),
        (['in'], PpFixedFormatType, 'FixedFormatType'),
        (['in', 'optional'], PpFixedFormatIntent, 'Intent', 1),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'FrameSlides',
            0
        ),
        (['in', 'optional'], PpPrintHandoutOrder, 'HandoutOrder', 1),
        (['in', 'optional'], PpPrintOutputType, 'OutputType', 1),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'PrintHiddenSlides',
            0
        ),
        (['in', 'optional'], POINTER(PrintRange), 'PrintRange', 0),
        (['in', 'optional'], PpPrintRangeType, 'RangeType', 1),
        (['in', 'optional'], BSTR, 'SlideShowName', ''),
        (['in', 'optional'], VARIANT_BOOL, 'IncludeDocProperties', False),
        (['in', 'optional'], VARIANT_BOOL, 'KeepIRMSettings', True),
        (['in', 'optional'], VARIANT_BOOL, 'DocStructureTags', True),
        (['in', 'optional'], VARIANT_BOOL, 'BitmapMissingFonts', True),
        (['in', 'optional'], VARIANT_BOOL, 'UseISO19005_1', False),
        (['in', 'optional'], VARIANT_BOOL, 'IncludeMarkup', False),
        (['in', 'optional'], VARIANT, 'ExternalExporter')
    ),
    COMMETHOD(
        [dispid(2127), 'propget'],
        HRESULT,
        'Guides',
        (['out', 'retval'], POINTER(POINTER(Guides)), 'Guides')
    ),
    COMMETHOD(
        [dispid(2128), 'propget'],
        HRESULT,
        'WorkIdentity',
        (['out', 'retval'], POINTER(BSTR), 'WorkIdentity')
    ),
    COMMETHOD(
        [dispid(2128), 'propput'],
        HRESULT,
        'WorkIdentity',
        (['in'], BSTR, 'WorkIdentity')
    ),
    COMMETHOD(
        [dispid(2129), 'propget'],
        HRESULT,
        'AutoSaveOn',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pfAutoSaveOn')
    ),
    COMMETHOD(
        [dispid(2129), 'propput'],
        HRESULT,
        'AutoSaveOn',
        (['in'], VARIANT_BOOL, 'pfAutoSaveOn')
    ),
    COMMETHOD(
        [dispid(2130)],
        HRESULT,
        'SaveCopyAs2',
        (['in'], BSTR, 'FileName'),
        (['in', 'optional'], PpSaveAsFileType, 'FileFormat', 11),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'EmbedTrueTypeFonts',
            -2
        ),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'ReadOnlyRecommended',
            -2
        )
    ),
    COMMETHOD(
        [dispid(2131), 'propget'],
        HRESULT,
        'ReadOnlyRecommended',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pfReadOnlyRecommended')
    ),
    COMMETHOD(
        [dispid(2132), 'propget'],
        HRESULT,
        'SensitivityLabel',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.ISensitivityLabel)),
            'SensitivityLabel',
        )
    ),
    COMMETHOD(
        [dispid(2133), 'propget'],
        HRESULT,
        'IsFullyDownloaded',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pfIsFullyDownloaded')
    ),
    COMMETHOD(
        [dispid(2134)],
        HRESULT,
        'ExportAsFixedFormat3',
        (['in'], BSTR, 'Path'),
        (['in'], PpFixedFormatType, 'FixedFormatType'),
        (['in', 'optional'], PpFixedFormatIntent, 'Intent', 1),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'FrameSlides',
            0
        ),
        (['in', 'optional'], PpPrintHandoutOrder, 'HandoutOrder', 1),
        (['in', 'optional'], PpPrintOutputType, 'OutputType', 1),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'PrintHiddenSlides',
            0
        ),
        (['in', 'optional'], POINTER(PrintRange), 'PrintRange', 0),
        (['in', 'optional'], PpPrintRangeType, 'RangeType', 1),
        (['in', 'optional'], BSTR, 'SlideShowName', ''),
        (['in', 'optional'], VARIANT_BOOL, 'IncludeDocProperties', False),
        (['in', 'optional'], VARIANT_BOOL, 'KeepIRMSettings', True),
        (['in', 'optional'], VARIANT_BOOL, 'DocStructureTags', True),
        (['in', 'optional'], VARIANT_BOOL, 'BitmapMissingFonts', True),
        (['in', 'optional'], VARIANT_BOOL, 'UseISO19005_1', False),
        (['in', 'optional'], VARIANT_BOOL, 'IncludeMarkup', False),
        (['in', 'optional'], VARIANT_BOOL, 'Bookmarks', True),
        (['in', 'optional'], VARIANT_BOOL, 'DocumentMarkup', True),
        (['in', 'optional'], VARIANT_BOOL, 'PromotedHyperlinkShape', True),
        (['in', 'optional'], VARIANT, 'ExternalExporter')
    ),
]

################################################################
# code template for _Presentation implementation
# class _Presentation_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def SlideMaster(self):
#         '-no docstring-'
#         #return SlideMaster
#
#     @property
#     def TitleMaster(self):
#         '-no docstring-'
#         #return TitleMaster
#
#     @property
#     def HasTitleMaster(self):
#         '-no docstring-'
#         #return HasTitleMaster
#
#     def AddTitleMaster(self):
#         '-no docstring-'
#         #return TitleMaster
#
#     def ApplyTemplate(self, FileName):
#         '-no docstring-'
#         #return 
#
#     @property
#     def TemplateName(self):
#         '-no docstring-'
#         #return TemplateName
#
#     @property
#     def NotesMaster(self):
#         '-no docstring-'
#         #return NotesMaster
#
#     @property
#     def HandoutMaster(self):
#         '-no docstring-'
#         #return HandoutMaster
#
#     @property
#     def Slides(self):
#         '-no docstring-'
#         #return Slides
#
#     @property
#     def PageSetup(self):
#         '-no docstring-'
#         #return PageSetup
#
#     @property
#     def ColorSchemes(self):
#         '-no docstring-'
#         #return ColorSchemes
#
#     @property
#     def ExtraColors(self):
#         '-no docstring-'
#         #return ExtraColors
#
#     @property
#     def SlideShowSettings(self):
#         '-no docstring-'
#         #return SlideShowSettings
#
#     @property
#     def Fonts(self):
#         '-no docstring-'
#         #return Fonts
#
#     @property
#     def Windows(self):
#         '-no docstring-'
#         #return Windows
#
#     @property
#     def Tags(self):
#         '-no docstring-'
#         #return Tags
#
#     @property
#     def DefaultShape(self):
#         '-no docstring-'
#         #return DefaultShape
#
#     @property
#     def BuiltInDocumentProperties(self):
#         '-no docstring-'
#         #return BuiltInDocumentProperties
#
#     @property
#     def CustomDocumentProperties(self):
#         '-no docstring-'
#         #return CustomDocumentProperties
#
#     @property
#     def VBProject(self):
#         '-no docstring-'
#         #return VBProject
#
#     @property
#     def ReadOnly(self):
#         '-no docstring-'
#         #return ReadOnly
#
#     @property
#     def FullName(self):
#         '-no docstring-'
#         #return FullName
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return Name
#
#     @property
#     def Path(self):
#         '-no docstring-'
#         #return Path
#
#     def _get(self):
#         '-no docstring-'
#         #return Saved
#     def _set(self, Saved):
#         '-no docstring-'
#     Saved = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return LayoutDirection
#     def _set(self, LayoutDirection):
#         '-no docstring-'
#     LayoutDirection = property(_get, _set, doc = _set.__doc__)
#
#     def NewWindow(self):
#         '-no docstring-'
#         #return NewWindow
#
#     def FollowHyperlink(self, Address, SubAddress, NewWindow, AddHistory, ExtraInfo, Method, HeaderInfo):
#         '-no docstring-'
#         #return 
#
#     def AddToFavorites(self):
#         '-no docstring-'
#         #return 
#
#     def Unused(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def PrintOptions(self):
#         '-no docstring-'
#         #return PrintOptions
#
#     def PrintOut(self, From, To, PrintToFile, Copies, Collate):
#         '-no docstring-'
#         #return 
#
#     def Save(self):
#         '-no docstring-'
#         #return 
#
#     def SaveAs(self, FileName, FileFormat, EmbedTrueTypeFonts):
#         '-no docstring-'
#         #return 
#
#     def SaveCopyAs(self, FileName, FileFormat, EmbedTrueTypeFonts):
#         '-no docstring-'
#         #return 
#
#     def Export(self, Path, FilterName, ScaleWidth, ScaleHeight):
#         '-no docstring-'
#         #return 
#
#     def Close(self):
#         '-no docstring-'
#         #return 
#
#     def SetUndoText(self, Text):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Container(self):
#         '-no docstring-'
#         #return Container
#
#     def _get(self):
#         '-no docstring-'
#         #return DisplayComments
#     def _set(self, DisplayComments):
#         '-no docstring-'
#     DisplayComments = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return FarEastLineBreakLevel
#     def _set(self, FarEastLineBreakLevel):
#         '-no docstring-'
#     FarEastLineBreakLevel = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return NoLineBreakBefore
#     def _set(self, NoLineBreakBefore):
#         '-no docstring-'
#     NoLineBreakBefore = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return NoLineBreakAfter
#     def _set(self, NoLineBreakAfter):
#         '-no docstring-'
#     NoLineBreakAfter = property(_get, _set, doc = _set.__doc__)
#
#     def UpdateLinks(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def SlideShowWindow(self):
#         '-no docstring-'
#         #return SlideShowWindow
#
#     def _get(self):
#         '-no docstring-'
#         #return FarEastLineBreakLanguage
#     def _set(self, FarEastLineBreakLanguage):
#         '-no docstring-'
#     FarEastLineBreakLanguage = property(_get, _set, doc = _set.__doc__)
#
#     def WebPagePreview(self):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return DefaultLanguageID
#     def _set(self, DefaultLanguageID):
#         '-no docstring-'
#     DefaultLanguageID = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def CommandBars(self):
#         '-no docstring-'
#         #return CommandBars
#
#     @property
#     def PublishObjects(self):
#         '-no docstring-'
#         #return PublishObjects
#
#     @property
#     def WebOptions(self):
#         '-no docstring-'
#         #return WebOptions
#
#     @property
#     def HTMLProject(self):
#         '-no docstring-'
#         #return HTMLProject
#
#     def ReloadAs(self, cp):
#         '-no docstring-'
#         #return 
#
#     def MakeIntoTemplate(self, IsDesignTemplate):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return EnvelopeVisible
#     def _set(self, EnvelopeVisible):
#         '-no docstring-'
#     EnvelopeVisible = property(_get, _set, doc = _set.__doc__)
#
#     def sblt(self, s):
#         '-no docstring-'
#         #return 
#
#     @property
#     def VBASigned(self):
#         '-no docstring-'
#         #return VBASigned
#
#     def _get(self):
#         '-no docstring-'
#         #return SnapToGrid
#     def _set(self, SnapToGrid):
#         '-no docstring-'
#     SnapToGrid = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return GridDistance
#     def _set(self, GridDistance):
#         '-no docstring-'
#     GridDistance = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Designs(self):
#         '-no docstring-'
#         #return Designs
#
#     def Merge(self, Path):
#         '-no docstring-'
#         #return 
#
#     def CheckIn(self, SaveChanges, Comments, MakePublic):
#         '-no docstring-'
#         #return 
#
#     def CanCheckIn(self):
#         '-no docstring-'
#         #return CanCheckIn
#
#     @property
#     def Signatures(self):
#         '-no docstring-'
#         #return Signatures
#
#     def _get(self):
#         '-no docstring-'
#         #return RemovePersonalInformation
#     def _set(self, RemovePersonalInformation):
#         '-no docstring-'
#     RemovePersonalInformation = property(_get, _set, doc = _set.__doc__)
#
#     def SendForReview(self, Recipients, Subject, ShowMessage, IncludeAttachment):
#         '-no docstring-'
#         #return 
#
#     def ReplyWithChanges(self, ShowMessage):
#         '-no docstring-'
#         #return 
#
#     def EndReview(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def HasRevisionInfo(self):
#         '-no docstring-'
#         #return HasRevisionInfo
#
#     def AddBaseline(self, FileName):
#         '-no docstring-'
#         #return 
#
#     def RemoveBaseline(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def PasswordEncryptionProvider(self):
#         '-no docstring-'
#         #return PasswordEncryptionProvider
#
#     @property
#     def PasswordEncryptionAlgorithm(self):
#         '-no docstring-'
#         #return PasswordEncryptionAlgorithm
#
#     @property
#     def PasswordEncryptionKeyLength(self):
#         '-no docstring-'
#         #return PasswordEncryptionKeyLength
#
#     @property
#     def PasswordEncryptionFileProperties(self):
#         '-no docstring-'
#         #return PasswordEncryptionFileProperties
#
#     def SetPasswordEncryptionOptions(self, PasswordEncryptionProvider, PasswordEncryptionAlgorithm, PasswordEncryptionKeyLength, PasswordEncryptionFileProperties):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return Password
#     def _set(self, Password):
#         '-no docstring-'
#     Password = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return WritePassword
#     def _set(self, WritePassword):
#         '-no docstring-'
#     WritePassword = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Permission(self):
#         '-no docstring-'
#         #return Permission
#
#     @property
#     def SharedWorkspace(self):
#         '-no docstring-'
#         #return SharedWorkspace
#
#     @property
#     def Sync(self):
#         '-no docstring-'
#         #return Sync
#
#     def SendFaxOverInternet(self, Recipients, Subject, ShowMessage):
#         '-no docstring-'
#         #return 
#
#     @property
#     def DocumentLibraryVersions(self):
#         '-no docstring-'
#         #return DocumentLibraryVersions
#
#     @property
#     def ContentTypeProperties(self):
#         '-no docstring-'
#         #return ContentTypeProperties
#
#     @property
#     def SectionCount(self):
#         '-no docstring-'
#         #return SectionCount
#
#     @property
#     def HasSections(self):
#         '-no docstring-'
#         #return HasSections
#
#     def NewSectionAfter(self, Index, AfterSlide, sectionTitle):
#         '-no docstring-'
#         #return newSectionIndex
#
#     def DeleteSection(self, Index):
#         '-no docstring-'
#         #return 
#
#     def DisableSections(self):
#         '-no docstring-'
#         #return 
#
#     def sectionTitle(self, Index):
#         '-no docstring-'
#         #return sectionTitle
#
#     def RemoveDocumentInformation(self, Type):
#         '-no docstring-'
#         #return 
#
#     def CheckInWithVersion(self, SaveChanges, Comments, MakePublic, VersionType):
#         '-no docstring-'
#         #return 
#
#     def ExportAsFixedFormat(self, Path, FixedFormatType, Intent, FrameSlides, HandoutOrder, OutputType, PrintHiddenSlides, PrintRange, RangeType, SlideShowName, IncludeDocProperties, KeepIRMSettings, DocStructureTags, BitmapMissingFonts, UseISO19005_1, ExternalExporter):
#         '-no docstring-'
#         #return 
#
#     @property
#     def ServerPolicy(self):
#         '-no docstring-'
#         #return ServerPolicy
#
#     def GetWorkflowTasks(self):
#         '-no docstring-'
#         #return GetWorkflowTasks
#
#     def GetWorkflowTemplates(self):
#         '-no docstring-'
#         #return GetWorkflowTemplates
#
#     def LockServerFile(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def DocumentInspectors(self):
#         '-no docstring-'
#         #return DocumentInspectors
#
#     @property
#     def HasVBProject(self):
#         '-no docstring-'
#         #return HasVBProject
#
#     @property
#     def CustomXMLParts(self):
#         '-no docstring-'
#         #return CustomXMLParts
#
#     def _get(self):
#         '-no docstring-'
#         #return Final
#     def _set(self, Final):
#         '-no docstring-'
#     Final = property(_get, _set, doc = _set.__doc__)
#
#     def ApplyTheme(self, themeName):
#         '-no docstring-'
#         #return 
#
#     @property
#     def CustomerData(self):
#         '-no docstring-'
#         #return CustomerData
#
#     @property
#     def Research(self):
#         '-no docstring-'
#         #return Research
#
#     def PublishSlides(self, SlideLibraryUrl, Overwrite, UseSlideOrder):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return EncryptionProvider
#     def _set(self, EncryptionProvider):
#         '-no docstring-'
#     EncryptionProvider = property(_get, _set, doc = _set.__doc__)
#
#     def Convert(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def SectionProperties(self):
#         '-no docstring-'
#         #return SectionProperties
#
#     @property
#     def Coauthoring(self):
#         '-no docstring-'
#         #return Coauthoring
#
#     def MergeWithBaseline(self, withPresentation, baselinePresentation):
#         '-no docstring-'
#         #return 
#
#     @property
#     def InMergeMode(self):
#         '-no docstring-'
#         #return InMergeMode
#
#     def AcceptAll(self):
#         '-no docstring-'
#         #return 
#
#     def RejectAll(self):
#         '-no docstring-'
#         #return 
#
#     def EnsureAllMediaUpgraded(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Broadcast(self):
#         '-no docstring-'
#         #return Broadcast
#
#     @property
#     def HasNotesMaster(self):
#         '-no docstring-'
#         #return HasNotesMaster
#
#     @property
#     def HasHandoutMaster(self):
#         '-no docstring-'
#         #return HasHandoutMaster
#
#     def Convert2(self, FileName):
#         '-no docstring-'
#         #return 
#
#     @property
#     def CreateVideoStatus(self):
#         '-no docstring-'
#         #return CreateVideoStatus
#
#     def CreateVideo(self, FileName, UseTimingsAndNarrations, DefaultSlideDuration, VertResolution, FramesPerSecond, Quality):
#         '-no docstring-'
#         #return 
#
#     def ApplyTemplate2(self, FileName, VariantGUID):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return pfChartDataPointTrack
#     def _set(self, pfChartDataPointTrack):
#         '-no docstring-'
#     ChartDataPointTrack = property(_get, _set, doc = _set.__doc__)
#
#     def ExportAsFixedFormat2(self, Path, FixedFormatType, Intent, FrameSlides, HandoutOrder, OutputType, PrintHiddenSlides, PrintRange, RangeType, SlideShowName, IncludeDocProperties, KeepIRMSettings, DocStructureTags, BitmapMissingFonts, UseISO19005_1, IncludeMarkup, ExternalExporter):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Guides(self):
#         '-no docstring-'
#         #return Guides
#
#     def _get(self):
#         '-no docstring-'
#         #return WorkIdentity
#     def _set(self, WorkIdentity):
#         '-no docstring-'
#     WorkIdentity = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pfAutoSaveOn
#     def _set(self, pfAutoSaveOn):
#         '-no docstring-'
#     AutoSaveOn = property(_get, _set, doc = _set.__doc__)
#
#     def SaveCopyAs2(self, FileName, FileFormat, EmbedTrueTypeFonts, ReadOnlyRecommended):
#         '-no docstring-'
#         #return 
#
#     @property
#     def ReadOnlyRecommended(self):
#         '-no docstring-'
#         #return pfReadOnlyRecommended
#
#     @property
#     def SensitivityLabel(self):
#         '-no docstring-'
#         #return SensitivityLabel
#
#     @property
#     def IsFullyDownloaded(self):
#         '-no docstring-'
#         #return pfIsFullyDownloaded
#
#     def ExportAsFixedFormat3(self, Path, FixedFormatType, Intent, FrameSlides, HandoutOrder, OutputType, PrintHiddenSlides, PrintRange, RangeType, SlideShowName, IncludeDocProperties, KeepIRMSettings, DocStructureTags, BitmapMissingFonts, UseISO19005_1, IncludeMarkup, Bookmarks, DocumentMarkup, PromotedHyperlinkShape, ExternalExporter):
#         '-no docstring-'
#         #return 
#

SeriesLines._methods_ = [
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'bstr')
    ),
    COMMETHOD(
        [dispid(235)],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppparent')
    ),
    COMMETHOD(
        [dispid(128), 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(ChartBorder)), 'ppborder')
    ),
    COMMETHOD(
        [dispid(117)],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(ChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2003)],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'Id'),
        (['out', 'retval'], POINTER(VARIANT), 'pValue')
    ),
    COMMETHOD(
        [dispid(2004)],
        HRESULT,
        'SetProperty',
        (['in'], BSTR, 'Id'),
        (['in'], VARIANT, 'Value')
    ),
]

################################################################
# code template for SeriesLines implementation
# class SeriesLines_Impl(object):
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return bstr
#
#     def Select(self):
#         '-no docstring-'
#         #return pvar
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppparent
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return ppborder
#
#     def Delete(self):
#         '-no docstring-'
#         #return pvar
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     def GetProperty(self, Id):
#         '-no docstring-'
#         #return pValue
#
#     def SetProperty(self, Id, Value):
#         '-no docstring-'
#         #return 
#


class OCXExtender(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934C0-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Visible(self) -> hints.Incomplete: ...
        def _set_Visible(self, Visible: hints.Incomplete) -> hints.Hresult: ...
        Visible = hints.normal_property(_get_Visible, _set_Visible)
        def _get_Left(self) -> hints.Incomplete: ...
        def _set_Left(self, Left: hints.Incomplete) -> hints.Hresult: ...
        Left = hints.normal_property(_get_Left, _set_Left)
        def _get_Top(self) -> hints.Incomplete: ...
        def _set_Top(self, Top: hints.Incomplete) -> hints.Hresult: ...
        Top = hints.normal_property(_get_Top, _set_Top)
        def _get_Height(self) -> hints.Incomplete: ...
        def _set_Height(self, Height: hints.Incomplete) -> hints.Hresult: ...
        Height = hints.normal_property(_get_Height, _set_Height)
        def _get_Width(self) -> hints.Incomplete: ...
        def _set_Width(self, Width: hints.Incomplete) -> hints.Hresult: ...
        Width = hints.normal_property(_get_Width, _set_Width)
        def _get_ZOrderPosition(self) -> hints.Incomplete: ...
        ZOrderPosition = hints.normal_property(_get_ZOrderPosition)
        def _get_Name(self) -> hints.Incomplete: ...
        def _set_Name(self, Name: hints.Incomplete) -> hints.Hresult: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def _get_AltHTML(self) -> hints.Incomplete: ...
        def _set_AltHTML(self, AltHTML: hints.Incomplete) -> hints.Hresult: ...
        AltHTML = hints.normal_property(_get_AltHTML, _set_AltHTML)


OCXExtender._methods_ = [
    COMMETHOD(
        [dispid(-2147418105), 'propget'],
        HRESULT,
        'Visible',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Visible')
    ),
    COMMETHOD(
        [dispid(-2147418105), 'propput'],
        HRESULT,
        'Visible',
        (['in'], VARIANT_BOOL, 'Visible')
    ),
    COMMETHOD(
        [dispid(-2147418109), 'propget'],
        HRESULT,
        'Left',
        (['out', 'retval'], POINTER(c_float), 'Left')
    ),
    COMMETHOD(
        [dispid(-2147418109), 'propput'],
        HRESULT,
        'Left',
        (['in'], c_float, 'Left')
    ),
    COMMETHOD(
        [dispid(-2147418108), 'propget'],
        HRESULT,
        'Top',
        (['out', 'retval'], POINTER(c_float), 'Top')
    ),
    COMMETHOD(
        [dispid(-2147418108), 'propput'],
        HRESULT,
        'Top',
        (['in'], c_float, 'Top')
    ),
    COMMETHOD(
        [dispid(-2147418107), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_float), 'Height')
    ),
    COMMETHOD(
        [dispid(-2147418107), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_float, 'Height')
    ),
    COMMETHOD(
        [dispid(-2147418106), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_float), 'Width')
    ),
    COMMETHOD(
        [dispid(-2147418106), 'propput'],
        HRESULT,
        'Width',
        (['in'], c_float, 'Width')
    ),
    COMMETHOD(
        [dispid(-2147417882), 'propget'],
        HRESULT,
        'ZOrderPosition',
        (['out', 'retval'], POINTER(c_int), 'ZOrderPosition')
    ),
    COMMETHOD(
        [dispid(-2147418112), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(-2147418112), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'Name')
    ),
    COMMETHOD(
        [dispid(-2147417881), 'hidden', 'propget'],
        HRESULT,
        'AltHTML',
        (['out', 'retval'], POINTER(BSTR), 'AltHTML')
    ),
    COMMETHOD(
        [dispid(-2147417881), 'hidden', 'propput'],
        HRESULT,
        'AltHTML',
        (['in'], BSTR, 'AltHTML')
    ),
]

################################################################
# code template for OCXExtender implementation
# class OCXExtender_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return Visible
#     def _set(self, Visible):
#         '-no docstring-'
#     Visible = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Left
#     def _set(self, Left):
#         '-no docstring-'
#     Left = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Top
#     def _set(self, Top):
#         '-no docstring-'
#     Top = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Height
#     def _set(self, Height):
#         '-no docstring-'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Width
#     def _set(self, Width):
#         '-no docstring-'
#     Width = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def ZOrderPosition(self):
#         '-no docstring-'
#         #return ZOrderPosition
#
#     def _get(self):
#         '-no docstring-'
#         #return Name
#     def _set(self, Name):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return AltHTML
#     def _set(self, AltHTML):
#         '-no docstring-'
#     AltHTML = property(_get, _set, doc = _set.__doc__)
#


class MouseTracker(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{914934BE-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['hidden']

    if TYPE_CHECKING:  # commembers
        def OnTrack(self, X: hints.Incomplete, Y: hints.Incomplete) -> hints.Hresult: ...
        def EndTrack(self, X: hints.Incomplete, Y: hints.Incomplete) -> hints.Hresult: ...


SlideShowView._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Zoom',
        (['out', 'retval'], POINTER(c_int), 'Zoom')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Slide',
        (['out', 'retval'], POINTER(POINTER(Slide)), 'Slide')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'PointerType',
        (['out', 'retval'], POINTER(PpSlideShowPointerType), 'PointerType')
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'PointerType',
        (['in'], PpSlideShowPointerType, 'PointerType')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'State',
        (['out', 'retval'], POINTER(PpSlideShowState), 'State')
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'State',
        (['in'], PpSlideShowState, 'State')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'AcceleratorsEnabled',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'AcceleratorsEnabled',
        )
    ),
    COMMETHOD(
        [dispid(2007), 'propput'],
        HRESULT,
        'AcceleratorsEnabled',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'AcceleratorsEnabled',
        )
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'PresentationElapsedTime',
        (['out', 'retval'], POINTER(c_float), 'PresentationElapsedTime')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'SlideElapsedTime',
        (['out', 'retval'], POINTER(c_float), 'SlideElapsedTime')
    ),
    COMMETHOD(
        [dispid(2009), 'propput'],
        HRESULT,
        'SlideElapsedTime',
        (['in'], c_float, 'SlideElapsedTime')
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'LastSlideViewed',
        (['out', 'retval'], POINTER(POINTER(Slide)), 'LastSlideViewed')
    ),
    COMMETHOD(
        [dispid(2011), 'propget'],
        HRESULT,
        'AdvanceMode',
        (['out', 'retval'], POINTER(PpSlideShowAdvanceMode), 'AdvanceMode')
    ),
    COMMETHOD(
        [dispid(2012), 'propget'],
        HRESULT,
        'PointerColor',
        (['out', 'retval'], POINTER(POINTER(ColorFormat)), 'PointerColor')
    ),
    COMMETHOD(
        [dispid(2013), 'propget'],
        HRESULT,
        'IsNamedShow',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'IsNamedShow',
        )
    ),
    COMMETHOD(
        [dispid(2014), 'propget'],
        HRESULT,
        'SlideShowName',
        (['out', 'retval'], POINTER(BSTR), 'SlideShowName')
    ),
    COMMETHOD(
        [dispid(2015)],
        HRESULT,
        'DrawLine',
        (['in'], c_float, 'BeginX'),
        (['in'], c_float, 'BeginY'),
        (['in'], c_float, 'EndX'),
        (['in'], c_float, 'EndY')
    ),
    COMMETHOD([dispid(2016)], HRESULT, 'EraseDrawing'),
    COMMETHOD([dispid(2017)], HRESULT, 'First'),
    COMMETHOD([dispid(2018)], HRESULT, 'Last'),
    COMMETHOD([dispid(2019)], HRESULT, 'Next'),
    COMMETHOD([dispid(2020)], HRESULT, 'Previous'),
    COMMETHOD(
        [dispid(2021)],
        HRESULT,
        'GotoSlide',
        (['in'], c_int, 'Index'),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'ResetSlide',
            -1
        )
    ),
    COMMETHOD(
        [dispid(2022)],
        HRESULT,
        'GotoNamedShow',
        (['in'], BSTR, 'SlideShowName')
    ),
    COMMETHOD([dispid(2023)], HRESULT, 'EndNamedShow'),
    COMMETHOD([dispid(2024)], HRESULT, 'ResetSlideTime'),
    COMMETHOD([dispid(2025)], HRESULT, 'Exit'),
    COMMETHOD(
        [dispid(2026), 'hidden'],
        HRESULT,
        'InstallTracker',
        (['in'], POINTER(MouseTracker), 'pTracker'),
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Presenter',
        )
    ),
    COMMETHOD(
        [dispid(2027), 'propget'],
        HRESULT,
        'CurrentShowPosition',
        (['out', 'retval'], POINTER(c_int), 'CurrentShowPosition')
    ),
    COMMETHOD(
        [dispid(2028)],
        HRESULT,
        'GotoClick',
        (['in'], c_int, 'Index')
    ),
    COMMETHOD(
        [dispid(2029)],
        HRESULT,
        'GetClickIndex',
        (['out', 'retval'], POINTER(c_int), 'GetClickIndex')
    ),
    COMMETHOD(
        [dispid(2030)],
        HRESULT,
        'GetClickCount',
        (['out', 'retval'], POINTER(c_int), 'GetClickCount')
    ),
    COMMETHOD(
        [dispid(2031)],
        HRESULT,
        'FirstAnimationIsAutomatic',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'FirstAnimationIsAutomatic')
    ),
    COMMETHOD(
        [dispid(2032)],
        HRESULT,
        'Player',
        (['in'], VARIANT, 'ShapeId'),
        (['out', 'retval'], POINTER(POINTER(Player)), 'Player')
    ),
    COMMETHOD(
        [dispid(2033), 'propget'],
        HRESULT,
        'MediaControlsVisible',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'MediaControlsVisible',
        )
    ),
    COMMETHOD(
        [dispid(2034), 'propget'],
        HRESULT,
        'MediaControlsLeft',
        (['out', 'retval'], POINTER(c_float), 'MediaControlsLeft')
    ),
    COMMETHOD(
        [dispid(2035), 'propget'],
        HRESULT,
        'MediaControlsTop',
        (['out', 'retval'], POINTER(c_float), 'MediaControlsTop')
    ),
    COMMETHOD(
        [dispid(2036), 'propget'],
        HRESULT,
        'MediaControlsWidth',
        (['out', 'retval'], POINTER(c_float), 'MediaControlsWidth')
    ),
    COMMETHOD(
        [dispid(2037), 'propget'],
        HRESULT,
        'MediaControlsHeight',
        (['out', 'retval'], POINTER(c_float), 'MediaControlsHeight')
    ),
    COMMETHOD(
        [dispid(2038), 'propget'],
        HRESULT,
        'LaserPointerEnabled',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'LaserPointerEnabled')
    ),
    COMMETHOD(
        [dispid(2038), 'propput'],
        HRESULT,
        'LaserPointerEnabled',
        (['in'], VARIANT_BOOL, 'LaserPointerEnabled')
    ),
]

################################################################
# code template for SlideShowView implementation
# class SlideShowView_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Zoom(self):
#         '-no docstring-'
#         #return Zoom
#
#     @property
#     def Slide(self):
#         '-no docstring-'
#         #return Slide
#
#     def _get(self):
#         '-no docstring-'
#         #return PointerType
#     def _set(self, PointerType):
#         '-no docstring-'
#     PointerType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return State
#     def _set(self, State):
#         '-no docstring-'
#     State = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return AcceleratorsEnabled
#     def _set(self, AcceleratorsEnabled):
#         '-no docstring-'
#     AcceleratorsEnabled = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def PresentationElapsedTime(self):
#         '-no docstring-'
#         #return PresentationElapsedTime
#
#     def _get(self):
#         '-no docstring-'
#         #return SlideElapsedTime
#     def _set(self, SlideElapsedTime):
#         '-no docstring-'
#     SlideElapsedTime = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def LastSlideViewed(self):
#         '-no docstring-'
#         #return LastSlideViewed
#
#     @property
#     def AdvanceMode(self):
#         '-no docstring-'
#         #return AdvanceMode
#
#     @property
#     def PointerColor(self):
#         '-no docstring-'
#         #return PointerColor
#
#     @property
#     def IsNamedShow(self):
#         '-no docstring-'
#         #return IsNamedShow
#
#     @property
#     def SlideShowName(self):
#         '-no docstring-'
#         #return SlideShowName
#
#     def DrawLine(self, BeginX, BeginY, EndX, EndY):
#         '-no docstring-'
#         #return 
#
#     def EraseDrawing(self):
#         '-no docstring-'
#         #return 
#
#     def First(self):
#         '-no docstring-'
#         #return 
#
#     def Last(self):
#         '-no docstring-'
#         #return 
#
#     def Next(self):
#         '-no docstring-'
#         #return 
#
#     def Previous(self):
#         '-no docstring-'
#         #return 
#
#     def GotoSlide(self, Index, ResetSlide):
#         '-no docstring-'
#         #return 
#
#     def GotoNamedShow(self, SlideShowName):
#         '-no docstring-'
#         #return 
#
#     def EndNamedShow(self):
#         '-no docstring-'
#         #return 
#
#     def ResetSlideTime(self):
#         '-no docstring-'
#         #return 
#
#     def Exit(self):
#         '-no docstring-'
#         #return 
#
#     def InstallTracker(self, pTracker, Presenter):
#         '-no docstring-'
#         #return 
#
#     @property
#     def CurrentShowPosition(self):
#         '-no docstring-'
#         #return CurrentShowPosition
#
#     def GotoClick(self, Index):
#         '-no docstring-'
#         #return 
#
#     def GetClickIndex(self):
#         '-no docstring-'
#         #return GetClickIndex
#
#     def GetClickCount(self):
#         '-no docstring-'
#         #return GetClickCount
#
#     def FirstAnimationIsAutomatic(self):
#         '-no docstring-'
#         #return FirstAnimationIsAutomatic
#
#     def Player(self, ShapeId):
#         '-no docstring-'
#         #return Player
#
#     @property
#     def MediaControlsVisible(self):
#         '-no docstring-'
#         #return MediaControlsVisible
#
#     @property
#     def MediaControlsLeft(self):
#         '-no docstring-'
#         #return MediaControlsLeft
#
#     @property
#     def MediaControlsTop(self):
#         '-no docstring-'
#         #return MediaControlsTop
#
#     @property
#     def MediaControlsWidth(self):
#         '-no docstring-'
#         #return MediaControlsWidth
#
#     @property
#     def MediaControlsHeight(self):
#         '-no docstring-'
#         #return MediaControlsHeight
#
#     def _get(self):
#         '-no docstring-'
#         #return LaserPointerEnabled
#     def _set(self, LaserPointerEnabled):
#         '-no docstring-'
#     LaserPointerEnabled = property(_get, _set, doc = _set.__doc__)
#


class HeaderFooter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{9149349C-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Visible(self) -> hints.Incomplete: ...
        def _set_Visible(self, Visible: hints.Incomplete) -> hints.Hresult: ...
        Visible = hints.normal_property(_get_Visible, _set_Visible)
        def _get_Text(self) -> hints.Incomplete: ...
        def _set_Text(self, Text: hints.Incomplete) -> hints.Hresult: ...
        Text = hints.normal_property(_get_Text, _set_Text)
        def _get_UseFormat(self) -> hints.Incomplete: ...
        def _set_UseFormat(self, UseFormat: hints.Incomplete) -> hints.Hresult: ...
        UseFormat = hints.normal_property(_get_UseFormat, _set_UseFormat)
        def _get_Format(self) -> hints.Incomplete: ...
        def _set_Format(self, Format: hints.Incomplete) -> hints.Hresult: ...
        Format = hints.normal_property(_get_Format, _set_Format)


HeadersFooters._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'DateAndTime',
        (['out', 'retval'], POINTER(POINTER(HeaderFooter)), 'DateAndTime')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'SlideNumber',
        (['out', 'retval'], POINTER(POINTER(HeaderFooter)), 'SlideNumber')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'Header',
        (['out', 'retval'], POINTER(POINTER(HeaderFooter)), 'Header')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'Footer',
        (['out', 'retval'], POINTER(POINTER(HeaderFooter)), 'Footer')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'DisplayOnTitleSlide',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'DisplayOnTitleSlide',
        )
    ),
    COMMETHOD(
        [dispid(2007), 'propput'],
        HRESULT,
        'DisplayOnTitleSlide',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'DisplayOnTitleSlide',
        )
    ),
    COMMETHOD([dispid(2008)], HRESULT, 'Clear'),
]

################################################################
# code template for HeadersFooters implementation
# class HeadersFooters_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def DateAndTime(self):
#         '-no docstring-'
#         #return DateAndTime
#
#     @property
#     def SlideNumber(self):
#         '-no docstring-'
#         #return SlideNumber
#
#     @property
#     def Header(self):
#         '-no docstring-'
#         #return Header
#
#     @property
#     def Footer(self):
#         '-no docstring-'
#         #return Footer
#
#     def _get(self):
#         '-no docstring-'
#         #return DisplayOnTitleSlide
#     def _set(self, DisplayOnTitleSlide):
#         '-no docstring-'
#     DisplayOnTitleSlide = property(_get, _set, doc = _set.__doc__)
#
#     def Clear(self):
#         '-no docstring-'
#         #return 
#

Panes._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(Pane)), 'Item')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
]

################################################################
# code template for Panes implementation
# class Panes_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#

SectionProperties._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
    COMMETHOD(
        [dispid(2004)],
        HRESULT,
        'Name',
        (['in'], c_int, 'sectionIndex'),
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(2005)],
        HRESULT,
        'Rename',
        (['in'], c_int, 'sectionIndex'),
        (['in'], BSTR, 'sectionName')
    ),
    COMMETHOD(
        [dispid(2006)],
        HRESULT,
        'SlidesCount',
        (['in'], c_int, 'sectionIndex'),
        (['out', 'retval'], POINTER(c_int), 'SlidesCount')
    ),
    COMMETHOD(
        [dispid(2007)],
        HRESULT,
        'FirstSlide',
        (['in'], c_int, 'sectionIndex'),
        (['out', 'retval'], POINTER(c_int), 'FirstSlide')
    ),
    COMMETHOD(
        [dispid(2008)],
        HRESULT,
        'AddBeforeSlide',
        (['in'], c_int, 'SlideIndex'),
        (['in'], BSTR, 'sectionName'),
        (['out', 'retval'], POINTER(c_int), 'BeforeSlide')
    ),
    COMMETHOD(
        [dispid(2009)],
        HRESULT,
        'AddSection',
        (['in'], c_int, 'sectionIndex'),
        (['in', 'optional'], VARIANT, 'sectionName'),
        (['out', 'retval'], POINTER(c_int), 'Section')
    ),
    COMMETHOD(
        [dispid(2010)],
        HRESULT,
        'Move',
        (['in'], c_int, 'sectionIndex'),
        (['in'], c_int, 'toPos')
    ),
    COMMETHOD(
        [dispid(2011)],
        HRESULT,
        'Delete',
        (['in'], c_int, 'sectionIndex'),
        (['in'], VARIANT_BOOL, 'deleteSlides')
    ),
    COMMETHOD(
        [dispid(2012)],
        HRESULT,
        'SectionID',
        (['in'], c_int, 'sectionIndex'),
        (['out', 'retval'], POINTER(BSTR), 'SectionID')
    ),
]

################################################################
# code template for SectionProperties implementation
# class SectionProperties_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return Count
#
#     def Name(self, sectionIndex):
#         '-no docstring-'
#         #return Name
#
#     def Rename(self, sectionIndex, sectionName):
#         '-no docstring-'
#         #return 
#
#     def SlidesCount(self, sectionIndex):
#         '-no docstring-'
#         #return SlidesCount
#
#     def FirstSlide(self, sectionIndex):
#         '-no docstring-'
#         #return FirstSlide
#
#     def AddBeforeSlide(self, SlideIndex, sectionName):
#         '-no docstring-'
#         #return BeforeSlide
#
#     def AddSection(self, sectionIndex, sectionName):
#         '-no docstring-'
#         #return Section
#
#     def Move(self, sectionIndex, toPos):
#         '-no docstring-'
#         #return 
#
#     def Delete(self, sectionIndex, deleteSlides):
#         '-no docstring-'
#         #return 
#
#     def SectionID(self, sectionIndex):
#         '-no docstring-'
#         #return SectionID
#

EffectInformation._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'AfterEffect',
        (['out', 'retval'], POINTER(MsoAnimAfterEffect), 'AfterEffect')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'AnimateBackground',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'AnimateBackground',
        )
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'AnimateTextInReverse',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'AnimateTextInReverse',
        )
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'BuildByLevelEffect',
        (['out', 'retval'], POINTER(MsoAnimateByLevel), 'BuildByLevelEffect')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'Dim',
        (['out', 'retval'], POINTER(POINTER(ColorFormat)), 'Dim')
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'PlaySettings',
        (['out', 'retval'], POINTER(POINTER(PlaySettings)), 'PlaySettings')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'SoundEffect',
        (['out', 'retval'], POINTER(POINTER(SoundEffect)), 'SoundEffect')
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'TextUnitEffect',
        (['out', 'retval'], POINTER(MsoAnimTextUnitEffect), 'TextUnitEffect')
    ),
]

################################################################
# code template for EffectInformation implementation
# class EffectInformation_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def AfterEffect(self):
#         '-no docstring-'
#         #return AfterEffect
#
#     @property
#     def AnimateBackground(self):
#         '-no docstring-'
#         #return AnimateBackground
#
#     @property
#     def AnimateTextInReverse(self):
#         '-no docstring-'
#         #return AnimateTextInReverse
#
#     @property
#     def BuildByLevelEffect(self):
#         '-no docstring-'
#         #return BuildByLevelEffect
#
#     @property
#     def Dim(self):
#         '-no docstring-'
#         #return Dim
#
#     @property
#     def PlaySettings(self):
#         '-no docstring-'
#         #return PlaySettings
#
#     @property
#     def SoundEffect(self):
#         '-no docstring-'
#         #return SoundEffect
#
#     @property
#     def TextUnitEffect(self):
#         '-no docstring-'
#         #return TextUnitEffect
#

ColorEffect._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'By',
        (['out', 'retval'], POINTER(POINTER(ColorFormat)), 'By')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'From',
        (['out', 'retval'], POINTER(POINTER(ColorFormat)), 'From')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'To',
        (['out', 'retval'], POINTER(POINTER(ColorFormat)), 'To')
    ),
]

################################################################
# code template for ColorEffect implementation
# class ColorEffect_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def By(self):
#         '-no docstring-'
#         #return By
#
#     @property
#     def From(self):
#         '-no docstring-'
#         #return From
#
#     @property
#     def To(self):
#         '-no docstring-'
#         #return To
#

View._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(PpViewType), 'Type')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Zoom',
        (['out', 'retval'], POINTER(c_int), 'Zoom')
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'Zoom',
        (['in'], c_int, 'Zoom')
    ),
    COMMETHOD([dispid(2005)], HRESULT, 'Paste'),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'Slide',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Slide')
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'Slide',
        (['in'], POINTER(IDispatch), 'Slide')
    ),
    COMMETHOD(
        [dispid(2007)],
        HRESULT,
        'GotoSlide',
        (['in'], c_int, 'Index')
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'DisplaySlideMiniature',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'DisplaySlideMiniature',
        )
    ),
    COMMETHOD(
        [dispid(2008), 'propput'],
        HRESULT,
        'DisplaySlideMiniature',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'DisplaySlideMiniature',
        )
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'ZoomToFit',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'ZoomToFit',
        )
    ),
    COMMETHOD(
        [dispid(2009), 'propput'],
        HRESULT,
        'ZoomToFit',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'ZoomToFit',
        )
    ),
    COMMETHOD(
        [dispid(2010)],
        HRESULT,
        'PasteSpecial',
        (['in', 'optional'], PpPasteDataType, 'DataType', 0),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'DisplayAsIcon',
            0
        ),
        (['in', 'optional'], BSTR, 'IconFileName', ''),
        (['in', 'optional'], c_int, 'IconIndex', 0),
        (['in', 'optional'], BSTR, 'IconLabel', ''),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Link',
            0
        )
    ),
    COMMETHOD(
        [dispid(2011), 'propget'],
        HRESULT,
        'PrintOptions',
        (['out', 'retval'], POINTER(POINTER(PrintOptions)), 'PrintOptions')
    ),
    COMMETHOD(
        [dispid(2012)],
        HRESULT,
        'PrintOut',
        (['in', 'optional'], c_int, 'From', -1),
        (['in', 'optional'], c_int, 'To', -1),
        (['in', 'optional'], BSTR, 'PrintToFile', ''),
        (['in', 'optional'], c_int, 'Copies', 0),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Collate',
            -99
        )
    ),
    COMMETHOD(
        [dispid(2013)],
        HRESULT,
        'Player',
        (['in'], VARIANT, 'ShapeId'),
        (['out', 'retval'], POINTER(POINTER(Player)), 'Player')
    ),
    COMMETHOD(
        [dispid(2014), 'propget'],
        HRESULT,
        'MediaControlsVisible',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'MediaControlsVisible',
        )
    ),
    COMMETHOD(
        [dispid(2015), 'propget'],
        HRESULT,
        'MediaControlsLeft',
        (['out', 'retval'], POINTER(c_float), 'MediaControlsLeft')
    ),
    COMMETHOD(
        [dispid(2016), 'propget'],
        HRESULT,
        'MediaControlsTop',
        (['out', 'retval'], POINTER(c_float), 'MediaControlsTop')
    ),
    COMMETHOD(
        [dispid(2017), 'propget'],
        HRESULT,
        'MediaControlsWidth',
        (['out', 'retval'], POINTER(c_float), 'MediaControlsWidth')
    ),
    COMMETHOD(
        [dispid(2018), 'propget'],
        HRESULT,
        'MediaControlsHeight',
        (['out', 'retval'], POINTER(c_float), 'MediaControlsHeight')
    ),
]

################################################################
# code template for View implementation
# class View_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Type(self):
#         '-no docstring-'
#         #return Type
#
#     def _get(self):
#         '-no docstring-'
#         #return Zoom
#     def _set(self, Zoom):
#         '-no docstring-'
#     Zoom = property(_get, _set, doc = _set.__doc__)
#
#     def Paste(self):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return Slide
#     def _set(self, Slide):
#         '-no docstring-'
#     Slide = property(_get, _set, doc = _set.__doc__)
#
#     def GotoSlide(self, Index):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return DisplaySlideMiniature
#     def _set(self, DisplaySlideMiniature):
#         '-no docstring-'
#     DisplaySlideMiniature = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ZoomToFit
#     def _set(self, ZoomToFit):
#         '-no docstring-'
#     ZoomToFit = property(_get, _set, doc = _set.__doc__)
#
#     def PasteSpecial(self, DataType, DisplayAsIcon, IconFileName, IconIndex, IconLabel, Link):
#         '-no docstring-'
#         #return 
#
#     @property
#     def PrintOptions(self):
#         '-no docstring-'
#         #return PrintOptions
#
#     def PrintOut(self, From, To, PrintToFile, Copies, Collate):
#         '-no docstring-'
#         #return 
#
#     def Player(self, ShapeId):
#         '-no docstring-'
#         #return Player
#
#     @property
#     def MediaControlsVisible(self):
#         '-no docstring-'
#         #return MediaControlsVisible
#
#     @property
#     def MediaControlsLeft(self):
#         '-no docstring-'
#         #return MediaControlsLeft
#
#     @property
#     def MediaControlsTop(self):
#         '-no docstring-'
#         #return MediaControlsTop
#
#     @property
#     def MediaControlsWidth(self):
#         '-no docstring-'
#         #return MediaControlsWidth
#
#     @property
#     def MediaControlsHeight(self):
#         '-no docstring-'
#         #return MediaControlsHeight
#

FilterEffect._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(MsoAnimFilterEffectType), 'Type')
    ),
    COMMETHOD(
        [dispid(2003), 'propput'],
        HRESULT,
        'Type',
        (['in'], MsoAnimFilterEffectType, 'Type')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Subtype',
        (['out', 'retval'], POINTER(MsoAnimFilterEffectSubtype), 'Subtype')
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'Subtype',
        (['in'], MsoAnimFilterEffectSubtype, 'Subtype')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'Reveal',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Reveal',
        )
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'Reveal',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Reveal',
        )
    ),
]

################################################################
# code template for FilterEffect implementation
# class FilterEffect_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return Type
#     def _set(self, Type):
#         '-no docstring-'
#     Type = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Subtype
#     def _set(self, Subtype):
#         '-no docstring-'
#     Subtype = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Reveal
#     def _set(self, Reveal):
#         '-no docstring-'
#     Reveal = property(_get, _set, doc = _set.__doc__)
#

ChartFont._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propput'],
        HRESULT,
        'Background',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Background',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2002), 'propput'],
        HRESULT,
        'Bold',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Bold',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2003), 'propput'],
        HRESULT,
        'Color',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Color',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'ColorIndex',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'ColorIndex',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'FontStyle',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'FontStyle',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'Italic',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'Italic',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2007), 'propput'],
        HRESULT,
        'Name',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2008), 'hidden', 'propput'],
        HRESULT,
        'OutlineFont',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2008), 'hidden', 'propget'],
        HRESULT,
        'OutlineFont',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2009), 'hidden', 'propput'],
        HRESULT,
        'Shadow',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2009), 'hidden', 'propget'],
        HRESULT,
        'Shadow',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2010), 'propput'],
        HRESULT,
        'Size',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'Size',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2011), 'propput'],
        HRESULT,
        'Strikethrough',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2011), 'propget'],
        HRESULT,
        'Strikethrough',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2012), 'propput'],
        HRESULT,
        'Subscript',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2012), 'propget'],
        HRESULT,
        'Subscript',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2013), 'propput'],
        HRESULT,
        'Superscript',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2013), 'propget'],
        HRESULT,
        'Superscript',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2014), 'propput'],
        HRESULT,
        'Underline',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2014), 'propget'],
        HRESULT,
        'Underline',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2015), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
]

################################################################
# code template for ChartFont implementation
# class ChartFont_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Background = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Bold = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Color = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ColorIndex = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     FontStyle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Italic = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     OutlineFont = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Shadow = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Size = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Strikethrough = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Subscript = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Superscript = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Underline = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#

SetEffect._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Property',
        (['out', 'retval'], POINTER(MsoAnimProperty), 'Property')
    ),
    COMMETHOD(
        [dispid(2003), 'propput'],
        HRESULT,
        'Property',
        (['in'], MsoAnimProperty, 'Property')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'To',
        (['out', 'retval'], POINTER(VARIANT), 'To')
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'To',
        (['in'], VARIANT, 'To')
    ),
]

################################################################
# code template for SetEffect implementation
# class SetEffect_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return Property
#     def _set(self, Property):
#         '-no docstring-'
#     Property = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return To
#     def _set(self, To):
#         '-no docstring-'
#     To = property(_get, _set, doc = _set.__doc__)
#


class Trendline(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A79-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Border(self) -> 'ChartBorder': ...
        Border = hints.normal_property(_get_Border)
        def ClearFormats(self) -> hints.Incomplete: ...
        def _get_DataLabel(self) -> 'DataLabel': ...
        DataLabel = hints.normal_property(_get_DataLabel)
        def Delete(self) -> hints.Incomplete: ...
        def _get_DisplayEquation(self) -> hints.Incomplete: ...
        def _set_DisplayEquation(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        DisplayEquation = hints.normal_property(_get_DisplayEquation, _set_DisplayEquation)
        def _get_DisplayRSquared(self) -> hints.Incomplete: ...
        def _set_DisplayRSquared(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        DisplayRSquared = hints.normal_property(_get_DisplayRSquared, _set_DisplayRSquared)
        def _get_Index(self) -> hints.Incomplete: ...
        Index = hints.normal_property(_get_Index)
        def _get_Intercept(self) -> hints.Incomplete: ...
        def _set_Intercept(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Intercept = hints.normal_property(_get_Intercept, _set_Intercept)
        def _get_InterceptIsAuto(self) -> hints.Incomplete: ...
        def _set_InterceptIsAuto(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        InterceptIsAuto = hints.normal_property(_get_InterceptIsAuto, _set_InterceptIsAuto)
        def _get_Name(self) -> hints.Incomplete: ...
        def _set_Name(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def _get_NameIsAuto(self) -> hints.Incomplete: ...
        def _set_NameIsAuto(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        NameIsAuto = hints.normal_property(_get_NameIsAuto, _set_NameIsAuto)
        def _get_Order(self) -> hints.Incomplete: ...
        def _set_Order(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Order = hints.normal_property(_get_Order, _set_Order)
        def _get_Period(self) -> hints.Incomplete: ...
        def _set_Period(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Period = hints.normal_property(_get_Period, _set_Period)
        def Select(self) -> hints.Incomplete: ...
        def _get_Type(self) -> hints.Incomplete: ...
        def _set_Type(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Type = hints.normal_property(_get_Type, _set_Type)
        def _get_Format(self) -> 'ChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Backward2(self) -> hints.Incomplete: ...
        def _set_Backward2(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Backward2 = hints.normal_property(_get_Backward2, _set_Backward2)
        def _get_Forward2(self) -> hints.Incomplete: ...
        def _set_Forward2(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Forward2 = hints.normal_property(_get_Forward2, _set_Forward2)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Backward(self) -> hints.Incomplete: ...
        def _set_Backward(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Backward = hints.normal_property(_get_Backward, _set_Backward)
        def _get_Forward(self) -> hints.Incomplete: ...
        def _set_Forward(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Forward = hints.normal_property(_get_Forward, _set_Forward)
        def GetProperty(self, Id: hints.Incomplete) -> hints.Incomplete: ...
        def SetProperty(self, Id: hints.Incomplete, Value: hints.Incomplete) -> hints.Hresult: ...


Trendline._methods_ = [
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(128), 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(ChartBorder)), 'RHS')
    ),
    COMMETHOD(
        [dispid(112)],
        HRESULT,
        'ClearFormats',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(158), 'propget'],
        HRESULT,
        'DataLabel',
        (['out', 'retval'], POINTER(POINTER(DataLabel)), 'RHS')
    ),
    COMMETHOD(
        [dispid(117)],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(190), 'propget'],
        HRESULT,
        'DisplayEquation',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(190), 'propput'],
        HRESULT,
        'DisplayEquation',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(189), 'propget'],
        HRESULT,
        'DisplayRSquared',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(189), 'propput'],
        HRESULT,
        'DisplayRSquared',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(486), 'propget'],
        HRESULT,
        'Index',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(186), 'propget'],
        HRESULT,
        'Intercept',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(186), 'propput'],
        HRESULT,
        'Intercept',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(187), 'propget'],
        HRESULT,
        'InterceptIsAuto',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(187), 'propput'],
        HRESULT,
        'InterceptIsAuto',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(110), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'RHS')
    ),
    COMMETHOD(
        [dispid(188), 'propget'],
        HRESULT,
        'NameIsAuto',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(188), 'propput'],
        HRESULT,
        'NameIsAuto',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(192), 'propget'],
        HRESULT,
        'Order',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(192), 'propput'],
        HRESULT,
        'Order',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(184), 'propget'],
        HRESULT,
        'Period',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(184), 'propput'],
        HRESULT,
        'Period',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(235)],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(108), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(XlTrendlineType), 'RHS')
    ),
    COMMETHOD(
        [dispid(108), 'propput'],
        HRESULT,
        'Type',
        (['in'], XlTrendlineType, 'RHS')
    ),
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(ChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(2650), 'propget'],
        HRESULT,
        'Backward2',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(2650), 'propput'],
        HRESULT,
        'Backward2',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(2651), 'propget'],
        HRESULT,
        'Forward2',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(2651), 'propput'],
        HRESULT,
        'Forward2',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2003), 'hidden', 'propget'],
        HRESULT,
        'Backward',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2003), 'hidden', 'propput'],
        HRESULT,
        'Backward',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(2004), 'hidden', 'propget'],
        HRESULT,
        'Forward',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2004), 'hidden', 'propput'],
        HRESULT,
        'Forward',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(2005)],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'Id'),
        (['out', 'retval'], POINTER(VARIANT), 'pValue')
    ),
    COMMETHOD(
        [dispid(2006)],
        HRESULT,
        'SetProperty',
        (['in'], BSTR, 'Id'),
        (['in'], VARIANT, 'Value')
    ),
]

################################################################
# code template for Trendline implementation
# class Trendline_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return RHS
#
#     def ClearFormats(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def DataLabel(self):
#         '-no docstring-'
#         #return RHS
#
#     def Delete(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     DisplayEquation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     DisplayRSquared = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Index(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Intercept = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     InterceptIsAuto = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     NameIsAuto = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Order = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Period = property(_get, _set, doc = _set.__doc__)
#
#     def Select(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Type = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Backward2 = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Forward2 = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Backward = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Forward = property(_get, _set, doc = _set.__doc__)
#
#     def GetProperty(self, Id):
#         '-no docstring-'
#         #return pValue
#
#     def SetProperty(self, Id, Value):
#         '-no docstring-'
#         #return 
#


class Trendlines(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92D41A7A-F07E-4CA4-AF6F-BEF486AA4E6F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Add(self, Type: hints.Incomplete = ..., Order: hints.Incomplete = ..., Period: hints.Incomplete = ..., Forward: hints.Incomplete = ..., Backward: hints.Incomplete = ..., Intercept: hints.Incomplete = ..., DisplayEquation: hints.Incomplete = ..., DisplayRSquared: hints.Incomplete = ..., Name: hints.Incomplete = ...) -> 'Trendline': ...
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Item(self, Index: hints.Incomplete = ...) -> 'Trendline': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _NewEnum(self) -> hints.Incomplete: ...
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _Default(self, Index: hints.Incomplete = ...) -> 'Trendline': ...


Trendlines._methods_ = [
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(181)],
        HRESULT,
        'Add',
        (['in', 'optional'], XlTrendlineType, 'Type', -4132),
        (['in', 'optional'], VARIANT, 'Order'),
        (['in', 'optional'], VARIANT, 'Period'),
        (['in', 'optional'], VARIANT, 'Forward'),
        (['in', 'optional'], VARIANT, 'Backward'),
        (['in', 'optional'], VARIANT, 'Intercept'),
        (['in', 'optional'], VARIANT, 'DisplayEquation'),
        (['in', 'optional'], VARIANT, 'DisplayRSquared'),
        (['in', 'optional'], VARIANT, 'Name'),
        (['out', 'retval'], POINTER(POINTER(Trendline)), 'RHS')
    ),
    COMMETHOD(
        [dispid(118), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(170)],
        HRESULT,
        'Item',
        (['in', 'optional'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(Trendline)), 'RHS')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'RHS')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(0), 'nonbrowsable'],
        HRESULT,
        '_Default',
        (['in', 'optional'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(Trendline)), 'RHS')
    ),
]

################################################################
# code template for Trendlines implementation
# class Trendlines_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     def Add(self, Type, Order, Period, Forward, Backward, Intercept, DisplayEquation, DisplayRSquared, Name):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return RHS
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return RHS
#
#     def _NewEnum(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     def _Default(self, Index):
#         '-no docstring-'
#         #return RHS
#

Sequences._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(Sequence)), 'Item')
    ),
    COMMETHOD(
        [dispid(2003)],
        HRESULT,
        'Add',
        (['in', 'optional'], c_int, 'Index', -1),
        (['out', 'retval'], POINTER(POINTER(Sequence)), 'Add')
    ),
]

################################################################
# code template for Sequences implementation
# class Sequences_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     def Add(self, Index):
#         '-no docstring-'
#         #return Add
#

HeaderFooter._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Visible',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Visible',
        )
    ),
    COMMETHOD(
        [dispid(2003), 'propput'],
        HRESULT,
        'Visible',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Visible',
        )
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Text',
        (['out', 'retval'], POINTER(BSTR), 'Text')
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'Text',
        (['in'], BSTR, 'Text')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'UseFormat',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'UseFormat',
        )
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'UseFormat',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'UseFormat',
        )
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(PpDateTimeFormat), 'Format')
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'Format',
        (['in'], PpDateTimeFormat, 'Format')
    ),
]

################################################################
# code template for HeaderFooter implementation
# class HeaderFooter_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return Visible
#     def _set(self, Visible):
#         '-no docstring-'
#     Visible = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Text
#     def _set(self, Text):
#         '-no docstring-'
#     Text = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return UseFormat
#     def _set(self, UseFormat):
#         '-no docstring-'
#     UseFormat = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Format
#     def _set(self, Format):
#         '-no docstring-'
#     Format = property(_get, _set, doc = _set.__doc__)
#

UpBars._methods_ = [
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'bstr')
    ),
    COMMETHOD(
        [dispid(235)],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppparent')
    ),
    COMMETHOD(
        [dispid(128), 'hidden', 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(ChartBorder)), 'ppborder')
    ),
    COMMETHOD(
        [dispid(117)],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(129), 'hidden', 'propget'],
        HRESULT,
        'Interior',
        (['out', 'retval'], POINTER(POINTER(Interior)), 'ppinterior')
    ),
    COMMETHOD(
        [dispid(1663), 'propget'],
        HRESULT,
        'Fill',
        (['out', 'retval'], POINTER(POINTER(ChartFillFormat)), 'ppFill')
    ),
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(ChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2003)],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'Id'),
        (['out', 'retval'], POINTER(VARIANT), 'pValue')
    ),
    COMMETHOD(
        [dispid(2004)],
        HRESULT,
        'SetProperty',
        (['in'], BSTR, 'Id'),
        (['in'], VARIANT, 'Value')
    ),
]

################################################################
# code template for UpBars implementation
# class UpBars_Impl(object):
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return bstr
#
#     def Select(self):
#         '-no docstring-'
#         #return pvar
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppparent
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return ppborder
#
#     def Delete(self):
#         '-no docstring-'
#         #return pvar
#
#     @property
#     def Interior(self):
#         '-no docstring-'
#         #return ppinterior
#
#     @property
#     def Fill(self):
#         '-no docstring-'
#         #return ppFill
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     def GetProperty(self, Id):
#         '-no docstring-'
#         #return pValue
#
#     def SetProperty(self, Id, Value):
#         '-no docstring-'
#         #return 
#

Font._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Color',
        (['out', 'retval'], POINTER(POINTER(ColorFormat)), 'Color')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Bold',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Bold',
        )
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'Bold',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Bold',
        )
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'Italic',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Italic',
        )
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'Italic',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Italic',
        )
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'Shadow',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Shadow',
        )
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'Shadow',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Shadow',
        )
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'Emboss',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Emboss',
        )
    ),
    COMMETHOD(
        [dispid(2007), 'propput'],
        HRESULT,
        'Emboss',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Emboss',
        )
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'Underline',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Underline',
        )
    ),
    COMMETHOD(
        [dispid(2008), 'propput'],
        HRESULT,
        'Underline',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Underline',
        )
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'Subscript',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Subscript',
        )
    ),
    COMMETHOD(
        [dispid(2009), 'propput'],
        HRESULT,
        'Subscript',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Subscript',
        )
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'Superscript',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Superscript',
        )
    ),
    COMMETHOD(
        [dispid(2010), 'propput'],
        HRESULT,
        'Superscript',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Superscript',
        )
    ),
    COMMETHOD(
        [dispid(2011), 'propget'],
        HRESULT,
        'BaselineOffset',
        (['out', 'retval'], POINTER(c_float), 'BaselineOffset')
    ),
    COMMETHOD(
        [dispid(2011), 'propput'],
        HRESULT,
        'BaselineOffset',
        (['in'], c_float, 'BaselineOffset')
    ),
    COMMETHOD(
        [dispid(2012), 'propget'],
        HRESULT,
        'Embedded',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Embedded',
        )
    ),
    COMMETHOD(
        [dispid(2013), 'propget'],
        HRESULT,
        'Embeddable',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Embeddable',
        )
    ),
    COMMETHOD(
        [dispid(2014), 'propget'],
        HRESULT,
        'Size',
        (['out', 'retval'], POINTER(c_float), 'Size')
    ),
    COMMETHOD(
        [dispid(2014), 'propput'],
        HRESULT,
        'Size',
        (['in'], c_float, 'Size')
    ),
    COMMETHOD(
        [dispid(2015), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(2015), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'Name')
    ),
    COMMETHOD(
        [dispid(2016), 'propget'],
        HRESULT,
        'NameFarEast',
        (['out', 'retval'], POINTER(BSTR), 'NameFarEast')
    ),
    COMMETHOD(
        [dispid(2016), 'propput'],
        HRESULT,
        'NameFarEast',
        (['in'], BSTR, 'NameFarEast')
    ),
    COMMETHOD(
        [dispid(2017), 'propget'],
        HRESULT,
        'NameAscii',
        (['out', 'retval'], POINTER(BSTR), 'NameAscii')
    ),
    COMMETHOD(
        [dispid(2017), 'propput'],
        HRESULT,
        'NameAscii',
        (['in'], BSTR, 'NameAscii')
    ),
    COMMETHOD(
        [dispid(2018), 'propget'],
        HRESULT,
        'AutoRotateNumbers',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'AutoRotateNumbers',
        )
    ),
    COMMETHOD(
        [dispid(2018), 'propput'],
        HRESULT,
        'AutoRotateNumbers',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'AutoRotateNumbers',
        )
    ),
    COMMETHOD(
        [dispid(2019), 'propget'],
        HRESULT,
        'NameOther',
        (['out', 'retval'], POINTER(BSTR), 'NameOther')
    ),
    COMMETHOD(
        [dispid(2019), 'propput'],
        HRESULT,
        'NameOther',
        (['in'], BSTR, 'NameOther')
    ),
    COMMETHOD(
        [dispid(2020), 'propget'],
        HRESULT,
        'NameComplexScript',
        (['out', 'retval'], POINTER(BSTR), 'NameComplexScript')
    ),
    COMMETHOD(
        [dispid(2020), 'propput'],
        HRESULT,
        'NameComplexScript',
        (['in'], BSTR, 'NameComplexScript')
    ),
]

################################################################
# code template for Font implementation
# class Font_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Color(self):
#         '-no docstring-'
#         #return Color
#
#     def _get(self):
#         '-no docstring-'
#         #return Bold
#     def _set(self, Bold):
#         '-no docstring-'
#     Bold = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Italic
#     def _set(self, Italic):
#         '-no docstring-'
#     Italic = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Shadow
#     def _set(self, Shadow):
#         '-no docstring-'
#     Shadow = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Emboss
#     def _set(self, Emboss):
#         '-no docstring-'
#     Emboss = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Underline
#     def _set(self, Underline):
#         '-no docstring-'
#     Underline = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Subscript
#     def _set(self, Subscript):
#         '-no docstring-'
#     Subscript = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Superscript
#     def _set(self, Superscript):
#         '-no docstring-'
#     Superscript = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return BaselineOffset
#     def _set(self, BaselineOffset):
#         '-no docstring-'
#     BaselineOffset = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Embedded(self):
#         '-no docstring-'
#         #return Embedded
#
#     @property
#     def Embeddable(self):
#         '-no docstring-'
#         #return Embeddable
#
#     def _get(self):
#         '-no docstring-'
#         #return Size
#     def _set(self, Size):
#         '-no docstring-'
#     Size = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Name
#     def _set(self, Name):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return NameFarEast
#     def _set(self, NameFarEast):
#         '-no docstring-'
#     NameFarEast = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return NameAscii
#     def _set(self, NameAscii):
#         '-no docstring-'
#     NameAscii = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return AutoRotateNumbers
#     def _set(self, AutoRotateNumbers):
#         '-no docstring-'
#     AutoRotateNumbers = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return NameOther
#     def _set(self, NameOther):
#         '-no docstring-'
#     NameOther = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return NameComplexScript
#     def _set(self, NameComplexScript):
#         '-no docstring-'
#     NameComplexScript = property(_get, _set, doc = _set.__doc__)
#

PlaySettings._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'ActionVerb',
        (['out', 'retval'], POINTER(BSTR), 'ActionVerb')
    ),
    COMMETHOD(
        [dispid(2003), 'propput'],
        HRESULT,
        'ActionVerb',
        (['in'], BSTR, 'ActionVerb')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'HideWhileNotPlaying',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'HideWhileNotPlaying',
        )
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'HideWhileNotPlaying',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'HideWhileNotPlaying',
        )
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'LoopUntilStopped',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'LoopUntilStopped',
        )
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'LoopUntilStopped',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'LoopUntilStopped',
        )
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'PlayOnEntry',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'PlayOnEntry',
        )
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'PlayOnEntry',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'PlayOnEntry',
        )
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'RewindMovie',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'RewindMovie',
        )
    ),
    COMMETHOD(
        [dispid(2007), 'propput'],
        HRESULT,
        'RewindMovie',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'RewindMovie',
        )
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'PauseAnimation',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'PauseAnimation',
        )
    ),
    COMMETHOD(
        [dispid(2008), 'propput'],
        HRESULT,
        'PauseAnimation',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'PauseAnimation',
        )
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'StopAfterSlides',
        (['out', 'retval'], POINTER(c_int), 'StopAfterSlides')
    ),
    COMMETHOD(
        [dispid(2009), 'propput'],
        HRESULT,
        'StopAfterSlides',
        (['in'], c_int, 'StopAfterSlides')
    ),
]

################################################################
# code template for PlaySettings implementation
# class PlaySettings_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return ActionVerb
#     def _set(self, ActionVerb):
#         '-no docstring-'
#     ActionVerb = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return HideWhileNotPlaying
#     def _set(self, HideWhileNotPlaying):
#         '-no docstring-'
#     HideWhileNotPlaying = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return LoopUntilStopped
#     def _set(self, LoopUntilStopped):
#         '-no docstring-'
#     LoopUntilStopped = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return PlayOnEntry
#     def _set(self, PlayOnEntry):
#         '-no docstring-'
#     PlayOnEntry = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RewindMovie
#     def _set(self, RewindMovie):
#         '-no docstring-'
#     RewindMovie = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return PauseAnimation
#     def _set(self, PauseAnimation):
#         '-no docstring-'
#     PauseAnimation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return StopAfterSlides
#     def _set(self, StopAfterSlides):
#         '-no docstring-'
#     StopAfterSlides = property(_get, _set, doc = _set.__doc__)
#


class OLEControl(CoClass):
    _reg_clsid_ = GUID('{91493446-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['hidden']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{91493440-5A91-11CF-8700-00AA0060263B}', 2, 12)


OLEControl._com_interfaces_ = [OCXExtender]
OLEControl._outgoing_interfaces_ = [OCXExtenderEvents]


class MasterEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{914934D2-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['hidden']


MasterEvents._methods_ = [
]

################################################################
# code template for MasterEvents implementation
# class MasterEvents_Impl(object):

ProtectedViewWindows._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(ProtectedViewWindow)), 'Item')
    ),
    COMMETHOD(
        [dispid(2003)],
        HRESULT,
        'Open',
        (['in'], BSTR, 'FileName'),
        (['in', 'optional'], BSTR, 'ReadPassword', ''),
        (
            ['in', 'optional'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'OpenAndRepair',
            0
        ),
        (['out', 'retval'], POINTER(POINTER(ProtectedViewWindow)), 'Open')
    ),
]

################################################################
# code template for ProtectedViewWindows implementation
# class ProtectedViewWindows_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     def Open(self, FileName, ReadPassword, OpenAndRepair):
#         '-no docstring-'
#         #return Open
#

Floor._methods_ = [
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'bstr')
    ),
    COMMETHOD(
        [dispid(235)],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppparent')
    ),
    COMMETHOD(
        [dispid(128), 'hidden', 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(ChartBorder)), 'ppborder')
    ),
    COMMETHOD(
        [dispid(112)],
        HRESULT,
        'ClearFormats',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(129), 'hidden', 'propget'],
        HRESULT,
        'Interior',
        (['out', 'retval'], POINTER(POINTER(Interior)), 'ppinterior')
    ),
    COMMETHOD(
        [dispid(1663), 'hidden', 'propget'],
        HRESULT,
        'Fill',
        (['out', 'retval'], POINTER(POINTER(ChartFillFormat)), 'ppFill')
    ),
    COMMETHOD(
        [dispid(161), 'propget'],
        HRESULT,
        'PictureType',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(161), 'propput'],
        HRESULT,
        'PictureType',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD([dispid(211)], HRESULT, 'Paste'),
    COMMETHOD(
        [dispid(2419), 'propget'],
        HRESULT,
        'Thickness',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2419), 'propput'],
        HRESULT,
        'Thickness',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(ChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
]

################################################################
# code template for Floor implementation
# class Floor_Impl(object):
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return bstr
#
#     def Select(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppparent
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return ppborder
#
#     def ClearFormats(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Interior(self):
#         '-no docstring-'
#         #return ppinterior
#
#     @property
#     def Fill(self):
#         '-no docstring-'
#         #return ppFill
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     PictureType = property(_get, _set, doc = _set.__doc__)
#
#     def Paste(self):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Thickness = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#

EffectParameters._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Direction',
        (['out', 'retval'], POINTER(MsoAnimDirection), 'Direction')
    ),
    COMMETHOD(
        [dispid(2003), 'propput'],
        HRESULT,
        'Direction',
        (['in'], MsoAnimDirection, 'Direction')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Amount',
        (['out', 'retval'], POINTER(c_float), 'Amount')
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'Amount',
        (['in'], c_float, 'Amount')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'Size',
        (['out', 'retval'], POINTER(c_float), 'Size')
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'Size',
        (['in'], c_float, 'Size')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'Color2',
        (['out', 'retval'], POINTER(POINTER(ColorFormat)), 'Color2')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'Relative',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Relative',
        )
    ),
    COMMETHOD(
        [dispid(2007), 'propput'],
        HRESULT,
        'Relative',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Relative',
        )
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'FontName',
        (['out', 'retval'], POINTER(BSTR), 'FontName')
    ),
    COMMETHOD(
        [dispid(2008), 'propput'],
        HRESULT,
        'FontName',
        (['in'], BSTR, 'FontName')
    ),
]

################################################################
# code template for EffectParameters implementation
# class EffectParameters_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return Direction
#     def _set(self, Direction):
#         '-no docstring-'
#     Direction = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Amount
#     def _set(self, Amount):
#         '-no docstring-'
#     Amount = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Size
#     def _set(self, Size):
#         '-no docstring-'
#     Size = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Color2(self):
#         '-no docstring-'
#         #return Color2
#
#     def _get(self):
#         '-no docstring-'
#         #return Relative
#     def _set(self, Relative):
#         '-no docstring-'
#     Relative = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return FontName
#     def _set(self, FontName):
#         '-no docstring-'
#     FontName = property(_get, _set, doc = _set.__doc__)
#


class Master(CoClass):
    _reg_clsid_ = GUID('{91493447-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{91493440-5A91-11CF-8700-00AA0060263B}', 2, 12)


Master._com_interfaces_ = [_Master]
Master._outgoing_interfaces_ = [MasterEvents]

ParagraphFormat._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Alignment',
        (['out', 'retval'], POINTER(PpParagraphAlignment), 'Alignment')
    ),
    COMMETHOD(
        [dispid(2003), 'propput'],
        HRESULT,
        'Alignment',
        (['in'], PpParagraphAlignment, 'Alignment')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Bullet',
        (['out', 'retval'], POINTER(POINTER(BulletFormat)), 'Bullet')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'LineRuleBefore',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'LineRuleBefore',
        )
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'LineRuleBefore',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'LineRuleBefore',
        )
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'LineRuleAfter',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'LineRuleAfter',
        )
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'LineRuleAfter',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'LineRuleAfter',
        )
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'LineRuleWithin',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'LineRuleWithin',
        )
    ),
    COMMETHOD(
        [dispid(2007), 'propput'],
        HRESULT,
        'LineRuleWithin',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'LineRuleWithin',
        )
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'SpaceBefore',
        (['out', 'retval'], POINTER(c_float), 'SpaceBefore')
    ),
    COMMETHOD(
        [dispid(2008), 'propput'],
        HRESULT,
        'SpaceBefore',
        (['in'], c_float, 'SpaceBefore')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'SpaceAfter',
        (['out', 'retval'], POINTER(c_float), 'SpaceAfter')
    ),
    COMMETHOD(
        [dispid(2009), 'propput'],
        HRESULT,
        'SpaceAfter',
        (['in'], c_float, 'SpaceAfter')
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'SpaceWithin',
        (['out', 'retval'], POINTER(c_float), 'SpaceWithin')
    ),
    COMMETHOD(
        [dispid(2010), 'propput'],
        HRESULT,
        'SpaceWithin',
        (['in'], c_float, 'SpaceWithin')
    ),
    COMMETHOD(
        [dispid(2011), 'propget'],
        HRESULT,
        'BaseLineAlignment',
        (['out', 'retval'], POINTER(PpBaselineAlignment), 'BaseLineAlignment')
    ),
    COMMETHOD(
        [dispid(2011), 'propput'],
        HRESULT,
        'BaseLineAlignment',
        (['in'], PpBaselineAlignment, 'BaseLineAlignment')
    ),
    COMMETHOD(
        [dispid(2012), 'propget'],
        HRESULT,
        'FarEastLineBreakControl',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'FarEastLineBreakControl',
        )
    ),
    COMMETHOD(
        [dispid(2012), 'propput'],
        HRESULT,
        'FarEastLineBreakControl',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'FarEastLineBreakControl',
        )
    ),
    COMMETHOD(
        [dispid(2013), 'propget'],
        HRESULT,
        'WordWrap',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'WordWrap',
        )
    ),
    COMMETHOD(
        [dispid(2013), 'propput'],
        HRESULT,
        'WordWrap',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'WordWrap',
        )
    ),
    COMMETHOD(
        [dispid(2014), 'propget'],
        HRESULT,
        'HangingPunctuation',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'HangingPunctuation',
        )
    ),
    COMMETHOD(
        [dispid(2014), 'propput'],
        HRESULT,
        'HangingPunctuation',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'HangingPunctuation',
        )
    ),
    COMMETHOD(
        [dispid(2015), 'propget'],
        HRESULT,
        'TextDirection',
        (['out', 'retval'], POINTER(PpDirection), 'TextDirection')
    ),
    COMMETHOD(
        [dispid(2015), 'propput'],
        HRESULT,
        'TextDirection',
        (['in'], PpDirection, 'TextDirection')
    ),
]

################################################################
# code template for ParagraphFormat implementation
# class ParagraphFormat_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return Alignment
#     def _set(self, Alignment):
#         '-no docstring-'
#     Alignment = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Bullet(self):
#         '-no docstring-'
#         #return Bullet
#
#     def _get(self):
#         '-no docstring-'
#         #return LineRuleBefore
#     def _set(self, LineRuleBefore):
#         '-no docstring-'
#     LineRuleBefore = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return LineRuleAfter
#     def _set(self, LineRuleAfter):
#         '-no docstring-'
#     LineRuleAfter = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return LineRuleWithin
#     def _set(self, LineRuleWithin):
#         '-no docstring-'
#     LineRuleWithin = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return SpaceBefore
#     def _set(self, SpaceBefore):
#         '-no docstring-'
#     SpaceBefore = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return SpaceAfter
#     def _set(self, SpaceAfter):
#         '-no docstring-'
#     SpaceAfter = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return SpaceWithin
#     def _set(self, SpaceWithin):
#         '-no docstring-'
#     SpaceWithin = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return BaseLineAlignment
#     def _set(self, BaseLineAlignment):
#         '-no docstring-'
#     BaseLineAlignment = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return FarEastLineBreakControl
#     def _set(self, FarEastLineBreakControl):
#         '-no docstring-'
#     FarEastLineBreakControl = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return WordWrap
#     def _set(self, WordWrap):
#         '-no docstring-'
#     WordWrap = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return HangingPunctuation
#     def _set(self, HangingPunctuation):
#         '-no docstring-'
#     HangingPunctuation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return TextDirection
#     def _set(self, TextDirection):
#         '-no docstring-'
#     TextDirection = property(_get, _set, doc = _set.__doc__)
#

CustomLayouts._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(CustomLayout)), 'Item')
    ),
    COMMETHOD(
        [dispid(2003)],
        HRESULT,
        'Add',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(CustomLayout)), 'Add')
    ),
    COMMETHOD(
        [dispid(2004)],
        HRESULT,
        'Paste',
        (['in', 'optional'], c_int, 'Index', -1),
        (['out', 'retval'], POINTER(POINTER(CustomLayout)), 'Paste')
    ),
]

################################################################
# code template for CustomLayouts implementation
# class CustomLayouts_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     def Add(self, Index):
#         '-no docstring-'
#         #return Add
#
#     def Paste(self, Index):
#         '-no docstring-'
#         #return Paste
#

Slides._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(Slide)), 'Item')
    ),
    COMMETHOD(
        [dispid(2003)],
        HRESULT,
        'FindBySlideID',
        (['in'], c_int, 'SlideID'),
        (['out', 'retval'], POINTER(POINTER(Slide)), 'FindBySlideID')
    ),
    COMMETHOD(
        [dispid(2004), 'hidden'],
        HRESULT,
        'Add',
        (['in'], c_int, 'Index'),
        (['in'], PpSlideLayout, 'Layout'),
        (['out', 'retval'], POINTER(POINTER(Slide)), 'Add')
    ),
    COMMETHOD(
        [dispid(2005)],
        HRESULT,
        'InsertFromFile',
        (['in'], BSTR, 'FileName'),
        (['in'], c_int, 'Index'),
        (['in', 'optional'], c_int, 'SlideStart', 1),
        (['in', 'optional'], c_int, 'SlideEnd', -1),
        (['out', 'retval'], POINTER(c_int), 'FromFile')
    ),
    COMMETHOD(
        [dispid(2006)],
        HRESULT,
        'Range',
        (['in', 'optional'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(SlideRange)), 'Range')
    ),
    COMMETHOD(
        [dispid(2007)],
        HRESULT,
        'Paste',
        (['in', 'optional'], c_int, 'Index', -1),
        (['out', 'retval'], POINTER(POINTER(SlideRange)), 'Paste')
    ),
    COMMETHOD(
        [dispid(2008)],
        HRESULT,
        'AddSlide',
        (['in'], c_int, 'Index'),
        (['in'], POINTER(CustomLayout), 'pCustomLayout'),
        (['out', 'retval'], POINTER(POINTER(Slide)), 'Slide')
    ),
]

################################################################
# code template for Slides implementation
# class Slides_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     def FindBySlideID(self, SlideID):
#         '-no docstring-'
#         #return FindBySlideID
#
#     def Add(self, Index, Layout):
#         '-no docstring-'
#         #return Add
#
#     def InsertFromFile(self, FileName, Index, SlideStart, SlideEnd):
#         '-no docstring-'
#         #return FromFile
#
#     def Range(self, Index):
#         '-no docstring-'
#         #return Range
#
#     def Paste(self, Index):
#         '-no docstring-'
#         #return Paste
#
#     def AddSlide(self, Index, pCustomLayout):
#         '-no docstring-'
#         #return Slide
#

ScaleEffect._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'ByX',
        (['out', 'retval'], POINTER(c_float), 'ByX')
    ),
    COMMETHOD(
        [dispid(2003), 'propput'],
        HRESULT,
        'ByX',
        (['in'], c_float, 'ByX')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'ByY',
        (['out', 'retval'], POINTER(c_float), 'ByY')
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'ByY',
        (['in'], c_float, 'ByY')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'FromX',
        (['out', 'retval'], POINTER(c_float), 'FromX')
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'FromX',
        (['in'], c_float, 'FromX')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'FromY',
        (['out', 'retval'], POINTER(c_float), 'FromY')
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'FromY',
        (['in'], c_float, 'FromY')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'ToX',
        (['out', 'retval'], POINTER(c_float), 'ToX')
    ),
    COMMETHOD(
        [dispid(2007), 'propput'],
        HRESULT,
        'ToX',
        (['in'], c_float, 'ToX')
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'ToY',
        (['out', 'retval'], POINTER(c_float), 'ToY')
    ),
    COMMETHOD(
        [dispid(2008), 'propput'],
        HRESULT,
        'ToY',
        (['in'], c_float, 'ToY')
    ),
]

################################################################
# code template for ScaleEffect implementation
# class ScaleEffect_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return ByX
#     def _set(self, ByX):
#         '-no docstring-'
#     ByX = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ByY
#     def _set(self, ByY):
#         '-no docstring-'
#     ByY = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return FromX
#     def _set(self, FromX):
#         '-no docstring-'
#     FromX = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return FromY
#     def _set(self, FromY):
#         '-no docstring-'
#     FromY = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ToX
#     def _set(self, ToX):
#         '-no docstring-'
#     ToX = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ToY
#     def _set(self, ToY):
#         '-no docstring-'
#     ToY = property(_get, _set, doc = _set.__doc__)
#

Coauthoring._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'MergeMode',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'MergeMode')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'FavorServerEditsDuringMerge',
        (
            ['out', 'retval'],
            POINTER(VARIANT_BOOL),
            'FavorServerEditsDuringMerge',
        )
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'FavorServerEditsDuringMerge',
        (['in'], VARIANT_BOOL, 'FavorServerEditsDuringMerge')
    ),
    COMMETHOD([dispid(2005)], HRESULT, 'EndReview'),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'PendingUpdates',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'PendingUpdates')
    ),
    COMMETHOD(
        [dispid(2007), 'hidden', 'propget'],
        HRESULT,
        'CoauthorCount',
        (['out', 'retval'], POINTER(c_int), 'CoauthorCount')
    ),
]

################################################################
# code template for Coauthoring implementation
# class Coauthoring_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def MergeMode(self):
#         '-no docstring-'
#         #return MergeMode
#
#     def _get(self):
#         '-no docstring-'
#         #return FavorServerEditsDuringMerge
#     def _set(self, FavorServerEditsDuringMerge):
#         '-no docstring-'
#     FavorServerEditsDuringMerge = property(_get, _set, doc = _set.__doc__)
#
#     def EndReview(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def PendingUpdates(self):
#         '-no docstring-'
#         #return PendingUpdates
#
#     @property
#     def CoauthorCount(self):
#         '-no docstring-'
#         #return CoauthorCount
#


class _PowerRex(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{914934D3-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def OnAsfEncoderEvent(self, erorCode: hints.Incomplete, bstrErrorDesc: hints.Incomplete) -> hints.Hresult: ...


_PowerRex._methods_ = [
    COMMETHOD(
        [dispid(2001), 'hidden'],
        HRESULT,
        'OnAsfEncoderEvent',
        (['in'], VARIANT, 'erorCode'),
        (['in'], VARIANT, 'bstrErrorDesc')
    ),
]

################################################################
# code template for _PowerRex implementation
# class _PowerRex_Impl(object):
#     def OnAsfEncoderEvent(self, erorCode, bstrErrorDesc):
#         '-no docstring-'
#         #return 
#

RotationEffect._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'By',
        (['out', 'retval'], POINTER(c_float), 'By')
    ),
    COMMETHOD(
        [dispid(2003), 'propput'],
        HRESULT,
        'By',
        (['in'], c_float, 'By')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'From',
        (['out', 'retval'], POINTER(c_float), 'From')
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'From',
        (['in'], c_float, 'From')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'To',
        (['out', 'retval'], POINTER(c_float), 'To')
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'To',
        (['in'], c_float, 'To')
    ),
]

################################################################
# code template for RotationEffect implementation
# class RotationEffect_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return By
#     def _set(self, By):
#         '-no docstring-'
#     By = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return From
#     def _set(self, From):
#         '-no docstring-'
#     From = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return To
#     def _set(self, To):
#         '-no docstring-'
#     To = property(_get, _set, doc = _set.__doc__)
#


class PowerRex(CoClass):
    _reg_clsid_ = GUID('{91493448-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['hidden']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{91493440-5A91-11CF-8700-00AA0060263B}', 2, 12)


PowerRex._com_interfaces_ = [_PowerRex]

Designs._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(Design)), 'Item')
    ),
    COMMETHOD(
        [dispid(2003)],
        HRESULT,
        'Add',
        (['in'], BSTR, 'designName'),
        (['in', 'optional'], c_int, 'Index', -1),
        (['out', 'retval'], POINTER(POINTER(Design)), 'Add')
    ),
    COMMETHOD(
        [dispid(2004)],
        HRESULT,
        'Load',
        (['in'], BSTR, 'TemplateName'),
        (['in', 'optional'], c_int, 'Index', -1),
        (['out', 'retval'], POINTER(POINTER(Design)), 'Load')
    ),
    COMMETHOD(
        [dispid(2005)],
        HRESULT,
        'Clone',
        (['in'], POINTER(Design), 'pOriginal'),
        (['in', 'optional'], c_int, 'Index', -1),
        (['out', 'retval'], POINTER(POINTER(Design)), 'Clone')
    ),
]

################################################################
# code template for Designs implementation
# class Designs_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     def Add(self, designName, Index):
#         '-no docstring-'
#         #return Add
#
#     def Load(self, TemplateName, Index):
#         '-no docstring-'
#         #return Load
#
#     def Clone(self, pOriginal, Index):
#         '-no docstring-'
#         #return Clone
#

CustomLayout._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Shapes',
        (['out', 'retval'], POINTER(POINTER(Shapes)), 'Shapes')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'HeadersFooters',
        (['out', 'retval'], POINTER(POINTER(HeadersFooters)), 'HeadersFooters')
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'Background',
        (['out', 'retval'], POINTER(POINTER(ShapeRange)), 'Background')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'Name')
    ),
    COMMETHOD([dispid(2007)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_float), 'Height')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_float), 'Width')
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'Hyperlinks',
        (['out', 'retval'], POINTER(POINTER(Hyperlinks)), 'Hyperlinks')
    ),
    COMMETHOD(
        [dispid(2011), 'propget'],
        HRESULT,
        'Design',
        (['out', 'retval'], POINTER(POINTER(Design)), 'Design')
    ),
    COMMETHOD(
        [dispid(2012), 'propget'],
        HRESULT,
        'TimeLine',
        (['out', 'retval'], POINTER(POINTER(TimeLine)), 'TimeLine')
    ),
    COMMETHOD(
        [dispid(2013), 'propget'],
        HRESULT,
        'SlideShowTransition',
        (
            ['out', 'retval'],
            POINTER(POINTER(SlideShowTransition)),
            'SlideShowTransition',
        )
    ),
    COMMETHOD(
        [dispid(2014), 'propget'],
        HRESULT,
        'MatchingName',
        (['out', 'retval'], POINTER(BSTR), 'MatchingName')
    ),
    COMMETHOD(
        [dispid(2014), 'propput'],
        HRESULT,
        'MatchingName',
        (['in'], BSTR, 'MatchingName')
    ),
    COMMETHOD(
        [dispid(2015), 'propget'],
        HRESULT,
        'Preserved',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Preserved',
        )
    ),
    COMMETHOD(
        [dispid(2015), 'propput'],
        HRESULT,
        'Preserved',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Preserved',
        )
    ),
    COMMETHOD(
        [dispid(2016), 'propget'],
        HRESULT,
        'Index',
        (['out', 'retval'], POINTER(c_int), 'Index')
    ),
    COMMETHOD([dispid(2017)], HRESULT, 'Select'),
    COMMETHOD([dispid(2018)], HRESULT, 'Cut'),
    COMMETHOD([dispid(2019)], HRESULT, 'Copy'),
    COMMETHOD(
        [dispid(2020)],
        HRESULT,
        'Duplicate',
        (['out', 'retval'], POINTER(POINTER(CustomLayout)), 'Duplicate')
    ),
    COMMETHOD(
        [dispid(2021)],
        HRESULT,
        'MoveTo',
        (['in'], c_int, 'toPos')
    ),
    COMMETHOD(
        [dispid(2022), 'propget'],
        HRESULT,
        'DisplayMasterShapes',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'DisplayMasterShapes',
        )
    ),
    COMMETHOD(
        [dispid(2022), 'propput'],
        HRESULT,
        'DisplayMasterShapes',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'DisplayMasterShapes',
        )
    ),
    COMMETHOD(
        [dispid(2023), 'propget'],
        HRESULT,
        'FollowMasterBackground',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'FollowMasterBackground',
        )
    ),
    COMMETHOD(
        [dispid(2023), 'propput'],
        HRESULT,
        'FollowMasterBackground',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'FollowMasterBackground',
        )
    ),
    COMMETHOD(
        [dispid(2024), 'propget'],
        HRESULT,
        'ThemeColorScheme',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.ThemeColorScheme)),
            'ThemeColorScheme',
        )
    ),
    COMMETHOD(
        [dispid(2025), 'propget'],
        HRESULT,
        'CustomerData',
        (['out', 'retval'], POINTER(POINTER(CustomerData)), 'CustomerData')
    ),
    COMMETHOD(
        [dispid(2026), 'propget'],
        HRESULT,
        'Guides',
        (['out', 'retval'], POINTER(POINTER(Guides)), 'Guides')
    ),
]

################################################################
# code template for CustomLayout implementation
# class CustomLayout_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Shapes(self):
#         '-no docstring-'
#         #return Shapes
#
#     @property
#     def HeadersFooters(self):
#         '-no docstring-'
#         #return HeadersFooters
#
#     @property
#     def Background(self):
#         '-no docstring-'
#         #return Background
#
#     def _get(self):
#         '-no docstring-'
#         #return Name
#     def _set(self, Name):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Height(self):
#         '-no docstring-'
#         #return Height
#
#     @property
#     def Width(self):
#         '-no docstring-'
#         #return Width
#
#     @property
#     def Hyperlinks(self):
#         '-no docstring-'
#         #return Hyperlinks
#
#     @property
#     def Design(self):
#         '-no docstring-'
#         #return Design
#
#     @property
#     def TimeLine(self):
#         '-no docstring-'
#         #return TimeLine
#
#     @property
#     def SlideShowTransition(self):
#         '-no docstring-'
#         #return SlideShowTransition
#
#     def _get(self):
#         '-no docstring-'
#         #return MatchingName
#     def _set(self, MatchingName):
#         '-no docstring-'
#     MatchingName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Preserved
#     def _set(self, Preserved):
#         '-no docstring-'
#     Preserved = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Index(self):
#         '-no docstring-'
#         #return Index
#
#     def Select(self):
#         '-no docstring-'
#         #return 
#
#     def Cut(self):
#         '-no docstring-'
#         #return 
#
#     def Copy(self):
#         '-no docstring-'
#         #return 
#
#     def Duplicate(self):
#         '-no docstring-'
#         #return Duplicate
#
#     def MoveTo(self, toPos):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return DisplayMasterShapes
#     def _set(self, DisplayMasterShapes):
#         '-no docstring-'
#     DisplayMasterShapes = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return FollowMasterBackground
#     def _set(self, FollowMasterBackground):
#         '-no docstring-'
#     FollowMasterBackground = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def ThemeColorScheme(self):
#         '-no docstring-'
#         #return ThemeColorScheme
#
#     @property
#     def CustomerData(self):
#         '-no docstring-'
#         #return CustomerData
#
#     @property
#     def Guides(self):
#         '-no docstring-'
#         #return Guides
#


class Global(CoClass):
    _reg_clsid_ = GUID('{91493443-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['appobject', 'hidden']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{91493440-5A91-11CF-8700-00AA0060263B}', 2, 12)


class _Global(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{91493451-5A91-11CF-8700-00AA0060263B}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_ActivePresentation(self) -> hints.Annotated['_Presentation', hints.FirstComItfOf['Presentation']]: ...
        ActivePresentation = hints.normal_property(_get_ActivePresentation)
        def _get_ActiveWindow(self) -> 'DocumentWindow': ...
        ActiveWindow = hints.normal_property(_get_ActiveWindow)
        def _get_AddIns(self) -> 'AddIns': ...
        AddIns = hints.normal_property(_get_AddIns)
        def _get_Application(self) -> hints.Annotated['_Application', hints.FirstComItfOf['Application']]: ...
        Application = hints.normal_property(_get_Application)
        def _get_Assistant(self) -> hints.Incomplete: ...
        Assistant = hints.normal_property(_get_Assistant)
        def _get_Dialogs(self) -> hints.Incomplete: ...
        Dialogs = hints.normal_property(_get_Dialogs)
        def _get_Presentations(self) -> 'Presentations': ...
        Presentations = hints.normal_property(_get_Presentations)
        def _get_SlideShowWindows(self) -> 'SlideShowWindows': ...
        SlideShowWindows = hints.normal_property(_get_SlideShowWindows)
        def _get_Windows(self) -> 'DocumentWindows': ...
        Windows = hints.normal_property(_get_Windows)
        def _get_CommandBars(self) -> hints.Incomplete: ...
        CommandBars = hints.normal_property(_get_CommandBars)
        def _get_AnswerWizard(self) -> hints.Incomplete: ...
        AnswerWizard = hints.normal_property(_get_AnswerWizard)
        def _get_FileConverters(self) -> 'FileConverters': ...
        FileConverters = hints.normal_property(_get_FileConverters)
        def _get_ProtectedViewWindows(self) -> 'ProtectedViewWindows': ...
        ProtectedViewWindows = hints.normal_property(_get_ProtectedViewWindows)
        def _get_ActiveProtectedViewWindow(self) -> 'ProtectedViewWindow': ...
        ActiveProtectedViewWindow = hints.normal_property(_get_ActiveProtectedViewWindow)
        def _get_IsSandboxed(self) -> hints.Incomplete: ...
        IsSandboxed = hints.normal_property(_get_IsSandboxed)


Global._com_interfaces_ = [_Global]

PrintOptions._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'PrintColorType',
        (['out', 'retval'], POINTER(PpPrintColorType), 'PrintColorType')
    ),
    COMMETHOD(
        [dispid(2002), 'propput'],
        HRESULT,
        'PrintColorType',
        (['in'], PpPrintColorType, 'PrintColorType')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'Collate',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Collate',
        )
    ),
    COMMETHOD(
        [dispid(2003), 'propput'],
        HRESULT,
        'Collate',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Collate',
        )
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'FitToPage',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'FitToPage',
        )
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'FitToPage',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'FitToPage',
        )
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'FrameSlides',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'FrameSlides',
        )
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'FrameSlides',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'FrameSlides',
        )
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'NumberOfCopies',
        (['out', 'retval'], POINTER(c_int), 'NumberOfCopies')
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'NumberOfCopies',
        (['in'], c_int, 'NumberOfCopies')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'OutputType',
        (['out', 'retval'], POINTER(PpPrintOutputType), 'OutputType')
    ),
    COMMETHOD(
        [dispid(2007), 'propput'],
        HRESULT,
        'OutputType',
        (['in'], PpPrintOutputType, 'OutputType')
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'PrintHiddenSlides',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'PrintHiddenSlides',
        )
    ),
    COMMETHOD(
        [dispid(2009), 'propput'],
        HRESULT,
        'PrintHiddenSlides',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'PrintHiddenSlides',
        )
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'PrintInBackground',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'PrintInBackground',
        )
    ),
    COMMETHOD(
        [dispid(2010), 'propput'],
        HRESULT,
        'PrintInBackground',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'PrintInBackground',
        )
    ),
    COMMETHOD(
        [dispid(2011), 'propget'],
        HRESULT,
        'RangeType',
        (['out', 'retval'], POINTER(PpPrintRangeType), 'RangeType')
    ),
    COMMETHOD(
        [dispid(2011), 'propput'],
        HRESULT,
        'RangeType',
        (['in'], PpPrintRangeType, 'RangeType')
    ),
    COMMETHOD(
        [dispid(2012), 'propget'],
        HRESULT,
        'Ranges',
        (['out', 'retval'], POINTER(POINTER(PrintRanges)), 'Ranges')
    ),
    COMMETHOD(
        [dispid(2013), 'propget'],
        HRESULT,
        'PrintFontsAsGraphics',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'PrintFontsAsGraphics',
        )
    ),
    COMMETHOD(
        [dispid(2013), 'propput'],
        HRESULT,
        'PrintFontsAsGraphics',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'PrintFontsAsGraphics',
        )
    ),
    COMMETHOD(
        [dispid(2014), 'propget'],
        HRESULT,
        'SlideShowName',
        (['out', 'retval'], POINTER(BSTR), 'SlideShowName')
    ),
    COMMETHOD(
        [dispid(2014), 'propput'],
        HRESULT,
        'SlideShowName',
        (['in'], BSTR, 'SlideShowName')
    ),
    COMMETHOD(
        [dispid(2015), 'propget'],
        HRESULT,
        'ActivePrinter',
        (['out', 'retval'], POINTER(BSTR), 'ActivePrinter')
    ),
    COMMETHOD(
        [dispid(2015), 'propput'],
        HRESULT,
        'ActivePrinter',
        (['in'], BSTR, 'ActivePrinter')
    ),
    COMMETHOD(
        [dispid(2016), 'propget'],
        HRESULT,
        'HandoutOrder',
        (['out', 'retval'], POINTER(PpPrintHandoutOrder), 'HandoutOrder')
    ),
    COMMETHOD(
        [dispid(2016), 'propput'],
        HRESULT,
        'HandoutOrder',
        (['in'], PpPrintHandoutOrder, 'HandoutOrder')
    ),
    COMMETHOD(
        [dispid(2017), 'propget'],
        HRESULT,
        'PrintComments',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'PrintComments',
        )
    ),
    COMMETHOD(
        [dispid(2017), 'propput'],
        HRESULT,
        'PrintComments',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'PrintComments',
        )
    ),
    COMMETHOD(
        [dispid(2018), 'propget'],
        HRESULT,
        'sectionIndex',
        (['out', 'retval'], POINTER(c_int), 'sectionIndex')
    ),
    COMMETHOD(
        [dispid(2018), 'propput'],
        HRESULT,
        'sectionIndex',
        (['in'], c_int, 'sectionIndex')
    ),
    COMMETHOD(
        [dispid(2019), 'propget'],
        HRESULT,
        'HighQuality',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'HighQuality',
        )
    ),
    COMMETHOD(
        [dispid(2019), 'propput'],
        HRESULT,
        'HighQuality',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'HighQuality',
        )
    ),
]

################################################################
# code template for PrintOptions implementation
# class PrintOptions_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     def _get(self):
#         '-no docstring-'
#         #return PrintColorType
#     def _set(self, PrintColorType):
#         '-no docstring-'
#     PrintColorType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Collate
#     def _set(self, Collate):
#         '-no docstring-'
#     Collate = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return FitToPage
#     def _set(self, FitToPage):
#         '-no docstring-'
#     FitToPage = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return FrameSlides
#     def _set(self, FrameSlides):
#         '-no docstring-'
#     FrameSlides = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return NumberOfCopies
#     def _set(self, NumberOfCopies):
#         '-no docstring-'
#     NumberOfCopies = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return OutputType
#     def _set(self, OutputType):
#         '-no docstring-'
#     OutputType = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return PrintHiddenSlides
#     def _set(self, PrintHiddenSlides):
#         '-no docstring-'
#     PrintHiddenSlides = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return PrintInBackground
#     def _set(self, PrintInBackground):
#         '-no docstring-'
#     PrintInBackground = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RangeType
#     def _set(self, RangeType):
#         '-no docstring-'
#     RangeType = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Ranges(self):
#         '-no docstring-'
#         #return Ranges
#
#     def _get(self):
#         '-no docstring-'
#         #return PrintFontsAsGraphics
#     def _set(self, PrintFontsAsGraphics):
#         '-no docstring-'
#     PrintFontsAsGraphics = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return SlideShowName
#     def _set(self, SlideShowName):
#         '-no docstring-'
#     SlideShowName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ActivePrinter
#     def _set(self, ActivePrinter):
#         '-no docstring-'
#     ActivePrinter = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return HandoutOrder
#     def _set(self, HandoutOrder):
#         '-no docstring-'
#     HandoutOrder = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return PrintComments
#     def _set(self, PrintComments):
#         '-no docstring-'
#     PrintComments = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return sectionIndex
#     def _set(self, sectionIndex):
#         '-no docstring-'
#     sectionIndex = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return HighQuality
#     def _set(self, HighQuality):
#         '-no docstring-'
#     HighQuality = property(_get, _set, doc = _set.__doc__)
#

SlideShowTransition._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'AdvanceOnClick',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'AdvanceOnClick',
        )
    ),
    COMMETHOD(
        [dispid(2003), 'propput'],
        HRESULT,
        'AdvanceOnClick',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'AdvanceOnClick',
        )
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'AdvanceOnTime',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'AdvanceOnTime',
        )
    ),
    COMMETHOD(
        [dispid(2004), 'propput'],
        HRESULT,
        'AdvanceOnTime',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'AdvanceOnTime',
        )
    ),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'AdvanceTime',
        (['out', 'retval'], POINTER(c_float), 'AdvanceTime')
    ),
    COMMETHOD(
        [dispid(2005), 'propput'],
        HRESULT,
        'AdvanceTime',
        (['in'], c_float, 'AdvanceTime')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'EntryEffect',
        (['out', 'retval'], POINTER(PpEntryEffect), 'EntryEffect')
    ),
    COMMETHOD(
        [dispid(2006), 'propput'],
        HRESULT,
        'EntryEffect',
        (['in'], PpEntryEffect, 'EntryEffect')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'Hidden',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'Hidden',
        )
    ),
    COMMETHOD(
        [dispid(2007), 'propput'],
        HRESULT,
        'Hidden',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'Hidden',
        )
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'LoopSoundUntilNext',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState),
            'LoopSoundUntilNext',
        )
    ),
    COMMETHOD(
        [dispid(2008), 'propput'],
        HRESULT,
        'LoopSoundUntilNext',
        (
            ['in'],
            comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoTriState,
            'LoopSoundUntilNext',
        )
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'SoundEffect',
        (['out', 'retval'], POINTER(POINTER(SoundEffect)), 'SoundEffect')
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'Speed',
        (['out', 'retval'], POINTER(PpTransitionSpeed), 'Speed')
    ),
    COMMETHOD(
        [dispid(2010), 'propput'],
        HRESULT,
        'Speed',
        (['in'], PpTransitionSpeed, 'Speed')
    ),
    COMMETHOD(
        [dispid(2011), 'propget'],
        HRESULT,
        'Duration',
        (['out', 'retval'], POINTER(c_float), 'Duration')
    ),
    COMMETHOD(
        [dispid(2011), 'propput'],
        HRESULT,
        'Duration',
        (['in'], c_float, 'Duration')
    ),
]

################################################################
# code template for SlideShowTransition implementation
# class SlideShowTransition_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return AdvanceOnClick
#     def _set(self, AdvanceOnClick):
#         '-no docstring-'
#     AdvanceOnClick = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return AdvanceOnTime
#     def _set(self, AdvanceOnTime):
#         '-no docstring-'
#     AdvanceOnTime = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return AdvanceTime
#     def _set(self, AdvanceTime):
#         '-no docstring-'
#     AdvanceTime = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return EntryEffect
#     def _set(self, EntryEffect):
#         '-no docstring-'
#     EntryEffect = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Hidden
#     def _set(self, Hidden):
#         '-no docstring-'
#     Hidden = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return LoopSoundUntilNext
#     def _set(self, LoopSoundUntilNext):
#         '-no docstring-'
#     LoopSoundUntilNext = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def SoundEffect(self):
#         '-no docstring-'
#         #return SoundEffect
#
#     def _get(self):
#         '-no docstring-'
#         #return Speed
#     def _set(self, Speed):
#         '-no docstring-'
#     Speed = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Duration
#     def _set(self, Duration):
#         '-no docstring-'
#     Duration = property(_get, _set, doc = _set.__doc__)
#

ResampleMediaTasks._methods_ = [
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(ResampleMediaTask)), 'Item')
    ),
    COMMETHOD([dispid(2001)], HRESULT, 'Pause'),
    COMMETHOD([dispid(2002)], HRESULT, 'Cancel'),
    COMMETHOD([dispid(2003)], HRESULT, 'Resume'),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'PercentComplete',
        (['out', 'retval'], POINTER(c_int), 'PercentComplete')
    ),
]

################################################################
# code template for ResampleMediaTasks implementation
# class ResampleMediaTasks_Impl(object):
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     def Pause(self):
#         '-no docstring-'
#         #return 
#
#     def Cancel(self):
#         '-no docstring-'
#         #return 
#
#     def Resume(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def PercentComplete(self):
#         '-no docstring-'
#         #return PercentComplete
#

_Global._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'ActivePresentation',
        (
            ['out', 'retval'],
            POINTER(POINTER(Presentation)),
            'ActivePresentation',
        )
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'ActiveWindow',
        (['out', 'retval'], POINTER(POINTER(DocumentWindow)), 'ActiveWindow')
    ),
    COMMETHOD(
        [dispid(2003), 'propget'],
        HRESULT,
        'AddIns',
        (['out', 'retval'], POINTER(POINTER(AddIns)), 'AddIns')
    ),
    COMMETHOD(
        [dispid(2004), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2005), 'hidden', 'propget'],
        HRESULT,
        'Assistant',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.Assistant)),
            'Assistant',
        )
    ),
    COMMETHOD(
        [dispid(2006), 'hidden', 'propget'],
        HRESULT,
        'Dialogs',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'Dialogs')
    ),
    COMMETHOD(
        [dispid(2007), 'propget'],
        HRESULT,
        'Presentations',
        (['out', 'retval'], POINTER(POINTER(Presentations)), 'Presentations')
    ),
    COMMETHOD(
        [dispid(2008), 'propget'],
        HRESULT,
        'SlideShowWindows',
        (
            ['out', 'retval'],
            POINTER(POINTER(SlideShowWindows)),
            'SlideShowWindows',
        )
    ),
    COMMETHOD(
        [dispid(2009), 'propget'],
        HRESULT,
        'Windows',
        (['out', 'retval'], POINTER(POINTER(DocumentWindows)), 'Windows')
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'CommandBars',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.CommandBars)),
            'CommandBars',
        )
    ),
    COMMETHOD(
        [dispid(2011), 'hidden', 'propget'],
        HRESULT,
        'AnswerWizard',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.AnswerWizard)),
            'AnswerWizard',
        )
    ),
    COMMETHOD(
        [dispid(2012), 'propget'],
        HRESULT,
        'FileConverters',
        (['out', 'retval'], POINTER(POINTER(FileConverters)), 'FileConverters')
    ),
    COMMETHOD(
        [dispid(2013), 'propget'],
        HRESULT,
        'ProtectedViewWindows',
        (
            ['out', 'retval'],
            POINTER(POINTER(ProtectedViewWindows)),
            'ProtectedViewWindows',
        )
    ),
    COMMETHOD(
        [dispid(2014), 'propget'],
        HRESULT,
        'ActiveProtectedViewWindow',
        (
            ['out', 'retval'],
            POINTER(POINTER(ProtectedViewWindow)),
            'ActiveProtectedViewWindow',
        )
    ),
    COMMETHOD(
        [dispid(2015), 'propget'],
        HRESULT,
        'IsSandboxed',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'IsSandboxed')
    ),
]

################################################################
# code template for _Global implementation
# class _Global_Impl(object):
#     @property
#     def ActivePresentation(self):
#         '-no docstring-'
#         #return ActivePresentation
#
#     @property
#     def ActiveWindow(self):
#         '-no docstring-'
#         #return ActiveWindow
#
#     @property
#     def AddIns(self):
#         '-no docstring-'
#         #return AddIns
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Assistant(self):
#         '-no docstring-'
#         #return Assistant
#
#     @property
#     def Dialogs(self):
#         '-no docstring-'
#         #return Dialogs
#
#     @property
#     def Presentations(self):
#         '-no docstring-'
#         #return Presentations
#
#     @property
#     def SlideShowWindows(self):
#         '-no docstring-'
#         #return SlideShowWindows
#
#     @property
#     def Windows(self):
#         '-no docstring-'
#         #return Windows
#
#     @property
#     def CommandBars(self):
#         '-no docstring-'
#         #return CommandBars
#
#     @property
#     def AnswerWizard(self):
#         '-no docstring-'
#         #return AnswerWizard
#
#     @property
#     def FileConverters(self):
#         '-no docstring-'
#         #return FileConverters
#
#     @property
#     def ProtectedViewWindows(self):
#         '-no docstring-'
#         #return ProtectedViewWindows
#
#     @property
#     def ActiveProtectedViewWindow(self):
#         '-no docstring-'
#         #return ActiveProtectedViewWindow
#
#     @property
#     def IsSandboxed(self):
#         '-no docstring-'
#         #return IsSandboxed
#

MouseTracker._methods_ = [
    COMMETHOD(
        [],
        HRESULT,
        'OnTrack',
        (['in'], c_float, 'X'),
        (['in'], c_float, 'Y')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'EndTrack',
        (['in'], c_float, 'X'),
        (['in'], c_float, 'Y')
    ),
]

################################################################
# code template for MouseTracker implementation
# class MouseTracker_Impl(object):
#     def OnTrack(self, X, Y):
#         '-no docstring-'
#         #return 
#
#     def EndTrack(self, X, Y):
#         '-no docstring-'
#         #return 
#

Broadcast._methods_ = [
    COMMETHOD(
        [dispid(2001), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(Application)), 'Application')
    ),
    COMMETHOD(
        [dispid(2002), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2003)],
        HRESULT,
        'Start',
        (['in'], BSTR, 'serverUrl')
    ),
    COMMETHOD([dispid(2004)], HRESULT, 'End'),
    COMMETHOD(
        [dispid(2005), 'propget'],
        HRESULT,
        'AttendeeUrl',
        (['out', 'retval'], POINTER(BSTR), 'AttendeeUrl')
    ),
    COMMETHOD(
        [dispid(2006), 'propget'],
        HRESULT,
        'IsBroadcasting',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'IsBroadcasting')
    ),
    COMMETHOD([dispid(2007)], HRESULT, 'Pause'),
    COMMETHOD([dispid(2008)], HRESULT, 'Resume'),
    COMMETHOD(
        [dispid(2009)],
        HRESULT,
        'AddMeetingNotes',
        (['in'], BSTR, 'notesUrl'),
        (['in'], BSTR, 'notesWacUrl')
    ),
    COMMETHOD(
        [dispid(2010), 'propget'],
        HRESULT,
        'State',
        (
            ['out', 'retval'],
            POINTER(comtypes.gen._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52_0_2_8.MsoBroadcastState),
            'BroadcastState',
        )
    ),
    COMMETHOD(
        [dispid(2011), 'propget'],
        HRESULT,
        'Capabilities',
        (['out', 'retval'], POINTER(c_int), 'Capabilities')
    ),
    COMMETHOD(
        [dispid(2012), 'propget'],
        HRESULT,
        'SessionID',
        (['out', 'retval'], POINTER(BSTR), 'SessionID')
    ),
    COMMETHOD(
        [dispid(2013), 'propget'],
        HRESULT,
        'PresenterServiceUrl',
        (['out', 'retval'], POINTER(BSTR), 'PresenterServiceUrl')
    ),
]

################################################################
# code template for Broadcast implementation
# class Broadcast_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return Application
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Start(self, serverUrl):
#         '-no docstring-'
#         #return 
#
#     def End(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def AttendeeUrl(self):
#         '-no docstring-'
#         #return AttendeeUrl
#
#     @property
#     def IsBroadcasting(self):
#         '-no docstring-'
#         #return IsBroadcasting
#
#     def Pause(self):
#         '-no docstring-'
#         #return 
#
#     def Resume(self):
#         '-no docstring-'
#         #return 
#
#     def AddMeetingNotes(self, notesUrl, notesWacUrl):
#         '-no docstring-'
#         #return 
#
#     @property
#     def State(self):
#         '-no docstring-'
#         #return BroadcastState
#
#     @property
#     def Capabilities(self):
#         '-no docstring-'
#         #return Capabilities
#
#     @property
#     def SessionID(self):
#         '-no docstring-'
#         #return SessionID
#
#     @property
#     def PresenterServiceUrl(self):
#         '-no docstring-'
#         #return PresenterServiceUrl
#

__all__ = [
    'xlBelow', 'msoAnimEffectPathRight', 'ThemeVariant',
    'CustomLayout', 'msoAnimEffectPath5PointStar',
    'ppDateTimeMMMMdyyyy', 'BulletFormat', 'rgbLightGray',
    'ppBulletThaiAlphaPeriod', 'rgbCrimson', 'ppPasteMetafilePicture',
    'xlChartTitle', 'xlParentDataLabelOptionsNone',
    'ppEffectCrawlFromUp', 'ppTabStopCenter', 'xlPatternLightDown',
    'ppEffectCoverDown', 'xlCombination', 'ppBulletHindiAlpha1Period',
    'xlAxisCrossesAutomatic', 'ppUpdateOptionMixed', 'rgbDarkMagenta',
    'xlPyramidToMax', 'xlDataTable', 'rgbSalmon',
    'msoAnimDirectionDownRight', 'ppLayoutTextAndMediaClip',
    'xlValue', 'xlGeoMappingLevelAutomatic', 'ppMediaTaskStatusNone',
    'msoAnimTextUnitEffectByParagraph', 'ppEffectCoverRightDown',
    'Options', 'PrintOptions', 'rgbKhaki', 'ppSaveAsTemplate',
    'rgbDarkRed', 'ppPasteEnhancedMetafile',
    'ppTransitionSpeedMedium', 'ProtectedViewWindows',
    'msoAnimDirectionIn', 'ppBulletRomanLCParenBoth', 'Timing',
    'msoAnimEffectDesaturate', 'DocumentWindow',
    'ppViewMasterThumbnails', 'msoAnimDirectionFontItalic',
    'ppBulletArabicPlain', 'ppEffectWipeDown',
    'msoAnimAfterEffectHideOnNextClick', 'ppEffectRotateUp',
    'msoAnimEffectPathWave', 'xlSecondary', 'ppSaveAsAddIn',
    'xlBinsTypeManual', 'rgbDarkGrey', 'ppActionEndShow',
    'ppBulletHindiAlphaPeriod', 'ppEffectHoneycomb',
    'msoAnimTriggerNone', 'msoAnimWidth', 'rgbNavy',
    'ppActionRunMacro', 'ppCaseSentence',
    'msoAnimTextUnitEffectByCharacter', 'ppEffectCrawlFromLeft',
    'msoAnimDirectionAcross', 'XlErrorBarType',
    'msoAnimTextBulletColor', 'xlLabelPositionCustom', 'GroupShapes',
    'ppAnimateByAllLevels', 'msoAnimEffectArcUp', 'ppPasteHTML',
    'rgbPowderBlue', 'ppEffectFlyThroughOut', 'ppEffectBoxIn',
    'ppPlaceholderTitle', 'FileConverter', 'msoAnimEffectCustom',
    'XlGeoMappingLevel', 'xlGray25',
    'msoAnimEffectComplementaryColor', 'rgbOrangeRed', 'Interior',
    'xlPatternGray75', 'msoAnimEffectPathLoopdeLoop', 'rgbBlue',
    'xlMonths', 'msoAnimEffectPathSCurve1', 'xlBackgroundAutomatic',
    'ppBulletArabicDBPeriod', 'ppEffectFlipRight', 'ppEffectPushDown',
    'xlGeoMappingLevelWorld', 'msoAnimFilterEffectSubtypeRight',
    'ppDateTimeMdyy', 'xlConeToPoint', 'XlTickLabelOrientation',
    'xlPatternSemiGray75', 'msoAnimDirectionOrdinalMask', 'rgbPurple',
    'MouseDownHandler', 'ppAfterEffectDim',
    'ppBulletKanjiSimpChinDBPeriod', 'msoAnimEffectAfterHold',
    'msoAnimDirectionBottom', 'msoAnimDirectionVerticalOut',
    'ppSlideSizeB5ISOPaper', 'Model3DFormat', 'ppEffectWheel1Spoke',
    'rgbDarkViolet', 'CategoryCollection',
    'ppMediaTaskStatusInProgress', 'msoAnimEffectPathHexagon',
    'msoClickStateAfterAllAnimations',
    'msoAnimEffectPathInvertedTriangle', 'xlCircle',
    'xlLightVertical', 'ppLayoutTextAndObject', 'rgbWhite',
    'rgbDarkKhaki', 'ppBaselineAlignMixed', 'ChartGroups',
    'ppBulletAlphaLCParenRight', 'msoAnimEffectPathSquare',
    'ppEffectFlyThroughIn', 'rgbBisque', 'DataLabel',
    'msoAnimTextBulletCharacter', 'ppEffectPageCurlSingleRight',
    'ppSlideSizeB4ISOPaper', 'ppDateTimeMMMMyy',
    'xlLegendPositionCorner', 'LeaderLines',
    'xlTickLabelPositionNextToAxis', 'rgbLightCyan',
    'PpPrintOutputType', 'ppDateTimeUAQ3', 'ppEffectUncoverLeftDown',
    'xlLinear', 'TextFrame2', 'msoAnimEffectDissolve',
    'ppPlaceholderTable', 'ppAdvanceModeMixed',
    'PpSlideShowRangeType', 'ppBulletAlphaUCParenRight',
    'ppSaveAsPowerPoint3', 'ppFill', 'xlLegendPositionBottom',
    'ppEffectNone', 'msoAnimEffectEaseIn',
    'msoAnimFilterEffectTypeWedge', 'ppEffectRippleRightDown',
    'msoAnimShapeFillOpacity', 'msoAnimOpacity', 'SectionProperties',
    'msoAnimTypeScale', 'msoAnimEffectPathTeardrop',
    'xlGeoMappingLevelCountryRegion', 'XlValueSortOrder',
    'ppEffectCombVertical', 'xlPivotChartDropZone', 'xlHairline',
    'xlRTL', 'msoAnimEffectBlast', 'ppEffectPanUp', 'rgbGrey',
    'ppProtectedViewCloseForced', 'msoAnimEffectFold',
    'MsoAnimProperty', 'ppLayoutObjectOverText',
    'ppEffectFlyFromRight', 'ColorFormat', 'ppBulletNumbered',
    'rgbMistyRose', 'AutoCorrect', 'msoAnimEffectPathBean',
    'ppLayoutSectionHeader', 'ppDateTimeUAQ5', 'PpSoundEffectType',
    'ppSchemeColorMixed', 'xlThousandMillions', 'Theme',
    'ppEffectVortexDown', 'xlStar', 'xlTickLabelOrientationVertical',
    'ppBulletThaiAlphaParenBoth', 'xlValueAscending',
    'ppActionPreviousSlide', 'XlLegendPosition',
    'msoAnimShapePictureGrayscale', 'ShadowFormat', 'ppRDIAtMentions',
    'xlLegend', 'rgbCoral', 'msoAnimEffectSpiral', 'RotationEffect',
    'xlOpaque', 'ppEffectFallOverRight', 'xlLeaderLines',
    'ppSlideSizeHagakiCard', 'ppEffectMixed', 'ppHorizontalGuide',
    'ppEffectCheckerboardDown', 'xlPlusValues', 'rgbMediumPurple',
    'ppSaveAsOpenXMLPresentationMacroEnabled',
    'ppSlideShowPointerEraser', 'msoAnimFilterEffectSubtypeUpRight',
    'ppEffectCrush', 'ppUpdateOptionAutomatic', 'ppEffectCircleOut',
    'ppEffectGalleryRight', 'ChartBorder', 'msoAnimEffectSling',
    'ppLayoutTwoColumnText', 'ColorEffect', 'ppEffectFerrisWheelLeft',
    'msoAnimEffectChangeLineColor', 'ppVerticalGuide', 'xlSeriesAxis',
    'msoAnimTriggerWithPrevious', 'PpParagraphAlignment',
    'xlMarkerStyleTriangle', 'msoAnimateTextByThirdLevel',
    'ppEffectFlyFromTopLeft', 'LegendKey', 'xlTickLabelPositionNone',
    'Guide', 'rgbPaleGoldenrod', 'ppViewThumbnails',
    'xlTickMarkOutside', 'ppViewNotesPage',
    'msoAnimEffectBrushOnUnderline', 'TickLabels', 'ppSelectionNone',
    'ppEffectWipeLeft', 'ppEffectAirplaneRight',
    'msoAnimFilterEffectSubtypeVertical', 'msoAnimEffectPathUp',
    'SlideNavigation', 'SeriesCollection', 'ppSlideSizeLedgerPaper',
    'ppActionHyperlink', 'ppViewSlide', 'AnimationBehaviors',
    'ppEffectZoomOut', 'msoAnimEffectPathStairsDown',
    'msoAnimateTextBySecondLevel', 'msoAnimEffectVerticalGrow',
    'msoAnimTypeCommand', 'Font', 'ppAnimateChartAllAtOnce',
    'xlCategoryLabelLevelCustom', 'DataTable', 'rgbLightGrey',
    'xlColorIndexNone', 'ppAnimateUnitMixed',
    'ppSaveAsOpenXMLTemplate', 'ppAlignLeft', 'ppSaveAsXPS',
    'PpSlideShowAdvanceMode', 'ppTransitionSpeedFast',
    'CalloutFormat', 'rgbIndianRed', 'PpRevisionInfo',
    'msoAnimEffectMediaPlayFromBookmark',
    'xlRegionLabelOptionsShowAll', 'xlMinorGridlines', 'xlTimeScale',
    'xlMarkerStyleStar', 'ppPrintHandoutVerticalFirst',
    'ppEffectFlashOnceFast', 'ppPasteGIF', 'ppBulletSimpChinPeriod',
    'xlMarkerStylePicture', 'XlChartPictureType', 'ppSlideShowDone',
    'rgbLightGoldenrodYellow', 'xlThin', 'rgbLightPink',
    'ppFollowColorsNone', 'xlHAlignGeneral',
    'ppDateTimeddddMMMMddyyyy', 'xlShape', 'msoAnimEffectWheel',
    'ppEffectWheel3Spokes', 'PpSlideShowType', 'ppEffectBoxUp',
    'ppAutoSizeMixed', 'xlUnderlineStyleDouble',
    'ppEffectDoorsHorizontal', 'msoAnimFilterEffectSubtypeNone',
    'msoAnimEffectColorReveal', 'xlShowLabelAndPercent',
    'ppEffectWindowHorizontal', 'Ruler', 'ppMediaTaskStatusFailed',
    'ppEffectPushRight', 'msoAnimFilterEffectSubtypeFromTop',
    'xlDropLines', 'MsoAnimAccumulate', 'ppEffectStripsUpLeft',
    'PageSetup', 'Hyperlinks', 'ppBulletTradChinPlain',
    'ppRDISlideUpdateInformation', 'Trendline', 'rgbTomato',
    'ppEffectCubeRight', 'PpExportMode', 'HiLoLines',
    'msoAnimEffectPathDiamond', 'rgbBlack',
    'ppLayoutObjectAndTwoObjects', 'ppLayoutTwoObjectsAndText',
    'ppHTMLv4', 'msoAnimEffectPathSpring', 'rgbMediumSeaGreen',
    'ppEffectFlyThroughInBounce', 'ppSaveAsShow',
    'ppFrameColorsPresentationSchemeTextColor', 'DiagramNode',
    'ppEffectPageCurlDoubleRight', 'ppSaveAsPDF', 'ppSaveAsHTMLDual',
    'msoAnimDirectionCenter', 'ppBulletKanjiKoreanPeriod',
    'ppSaveAsXMLPresentation', 'ppEffectWindRight',
    'ppPlaceholderVerticalTitle', 'msoAnimFilterEffectTypeRandomBar',
    'msoAnimTextFontShadow', 'msoAnimFilterEffectTypeNone',
    'XlChartElementPosition', 'ppMouseClick',
    'msoAnimEffectPathCrescentMoon', 'msoAnimTextBulletStyle',
    'EffectInformation', 'xlParentDataLabelOptionsOverlapping',
    'ppDateTimeUAQ7', 'msoAnimDirectionTopRight', 'CustomLayouts',
    'msoAnimateTextByFirstLevel', 'ppLayoutChartAndText',
    'ppSaveAsHTMLv3', 'ppCaseUpper', 'OLEFormat', 'xlAxisTitle',
    'PpTabStopType', 'msoAnimFilterEffectTypeBarn',
    'ppSlideShowBlackScreen', 'ppEffectBlindsVertical',
    'xlFrontSides', 'rgbPeachPuff', 'PpRemoveDocInfoType',
    'RulerLevel', 'ppBulletAlphaLCParenBoth',
    'ppEffectFlyThroughOutBounce', 'ppFarEastLineBreakLevelNormal',
    'ppPlaceholderVerticalObject', 'ppRDIDocumentManagementPolicy',
    'xlPatternCrissCross', 'ppEffectCheckerboardAcross',
    'xlLabelPositionAbove', 'ppPlaceholderMediaClip', 'Global',
    'xlLightUp', 'msoAnimDirectionCycleCounterclockwise',
    'xlLegendEntry', 'xlDouble', 'PrintRanges',
    'msoAnimEffectDescend', 'ppEffectZoomInSlightly',
    'ppDateTimeMMyy', 'msoAnimateDiagramClockwiseOut', 'xlHAlignLeft',
    'ppEffectUncoverUp', 'ppPrintSlideRange', 'ppEffectPeekFromLeft',
    'xlFixedValue', 'xlZero', 'xlCenter', 'ppAdvanceOnTime',
    'msoAnimateDiagramCounterClockwise',
    'xlInnerCounterClockwisePoint', 'WebOptions',
    'rgbMediumAquamarine', 'ppEffectRandomBarsVertical',
    'xlPatternLinearGradient', 'xlGray16', 'xlPyramidToPoint',
    'ppEffectCoverLeftUp', 'xlInside', 'ppDateTimeUAQ1',
    'msoAnimateTextByFifthLevel', 'xlDataLabelsShowLabelAndPercent',
    'ppSoundNone', 'ppEffectStretchAcross', 'ppEffectVortexLeft',
    'xlTickMarkInside', 'msoAnimEffectDarken', 'ChartFont',
    'msoAnimEffectFadedZoom', 'ChartGroup', 'msoAnimEffectPathFunnel',
    'SoundEffect', 'ppPrintHandoutHorizontalFirst', 'xlNoCap',
    'rgbDarkGreen', 'xlPatternChecker', 'ppEffectCoverLeft',
    'xlLegendPositionRight', 'xlValueDescending', 'XlSizeRepresents',
    'xlPatternDown', 'xlPatternLightHorizontal', 'MsoClickState',
    'MsoAnimateByLevel', 'ppPrintOutputFourSlideHandouts',
    'xlAutomatic', 'XlAxisType', 'ppViewTitleMaster', 'rgbGoldenrod',
    'msoAnimEffectFadedSwivel', 'ppIndentReplaceAttr',
    'msoAnimateDiagramCounterClockwiseIn', 'ppActionPlay',
    'ObjectVerbs', 'xlCap', 'XlDataLabelSeparator', 'ppPublishAll',
    'FileConverters', 'ppPrintOutputThreeSlideHandouts',
    'xlErrorBars', 'msoAnimEffectPathHeartbeat', 'ppEffectWipeUp',
    'ppResampleMediaProfileCustom', 'ppDateTimehmmssAMPM',
    'ppBulletPicture', 'msoAnimAfterEffectHide', 'xlHundreds',
    'xlGeoMappingLevelState', 'ppHTMLDual', 'xlRight', 'xlDataLabel',
    'msoAnimEffectCrawl', 'ppEffectUncoverLeft', 'rgbSeashell',
    'ppPlaceholderCenterTitle', 'XlBarShape', 'ppHTMLAutodetect',
    'msoAnimateDiagramOutByRing', 'xlAxisCrossesMaximum', 'Row',
    'ppEffectDrapeLeft', 'xlSolid', 'ppEffectFlyFromBottomLeft',
    'ppEffectZoomBottom', 'msoAnimEffect3DTurntable',
    'ppEffectStripsLeftUp', 'ppShadow', 'msoAnimEffectShimmer',
    'ppEffectPrestige', 'Walls', 'rgbGold', 'xlPatternGrid',
    'ppSlideShowWhiteScreen', 'Sequences', 'PpShapeFormat',
    'XlHAlign', 'rgbLavender', 'xlOuterCounterClockwisePoint',
    'msoAnimTextFontSuperscript', 'ppViewPrintPreview', 'rgbDarkBlue',
    'ppEffectPlusOut', 'XlGeoProjectionType', 'xlSides',
    'ppLayoutTitle', 'PpPrintRangeType', 'ppSaveAsRTF', 'rgbLinen',
    'xlHundredThousands', 'ppEffectFlyFromTopRight',
    'ppActionLastSlide', 'msoAnimDirectionOut', 'msoAnimDirectionTop',
    'msoAnimateChartBySeriesElements', 'msoAnimFilterEffectTypeSlide',
    'msoAnimDirectionGradual', 'ppMediaTaskStatusDone',
    'xlTickLabelPositionLow', 'XlTimeUnit', 'ppSaveAsTIF',
    'ppSaveAsHTML', 'CommandEffect', 'XlDisplayUnit',
    'rgbPaleVioletRed', 'msoAnimEffectChangeFontSize',
    'ppEffectBoxDown', 'rgbGray', 'msoAnimEffectBlinds', 'PlotArea',
    'rgbMediumSpringGreen', 'Selection', 'DataLabels', 'ppSaveAsBMP',
    'msoAnimEffectPathZigzag', 'msoAnimEffectPath6PointStar',
    'ppLayoutBlank', 'xlGeoMappingLevelDataOnly',
    'xlGeoProjectionTypeMiller', 'ppShapeFormatBMP',
    'msoAnimDirectionOutSlightly', 'msoAnimAfterEffectMixed',
    'XlChartItem', 'msoAnimTextUnitEffectByWord',
    'msoAnimFilterEffectSubtypeSpokes2', 'ppAfterEffectNothing',
    'msoAnimDirectionFontBold', 'TabStops', 'xlStretch',
    'PpSaveAsFileType', 'xlSplitByPosition', 'rgbHoneydew',
    'DownBars', 'xlHundredMillions', 'xlPatternHorizontal',
    'ppActionFirstSlide', 'Application', 'xlGray75', 'xlPower',
    'ppPrintBlackAndWhite', 'msoAnimFilterEffectTypeImage',
    'rgbCadetBlue', 'msoAnimDirectionVerticalIn', 'xlMarkerStyleX',
    'ppEffectSplitVerticalIn', 'xlDownBars', 'TextFrame',
    'ppEffectRippleCenter', 'ppPrintPureBlackAndWhite',
    'ppEffectPageCurlSingleLeft', 'FullSeriesCollection',
    'ppDateTimehmmAMPM', 'ppSlideSize35MM', 'ppAlignCenter',
    'ppEffectWheel2Spokes', 'ppPlaceholderFooter',
    'msoAnimEffectExpand', 'msoAnimEffect3DArrive', 'PpChangeCase',
    'msoAnimDirectionVertical', 'msoAnimFilterEffectTypeCheckerboard',
    'ppEffectWipeRight', 'TextStyle', 'msoAnimEffectPathPlus',
    'ppLayoutChart', 'ppEffectSwitchUp', 'xlScreen', 'Player',
    'ppSlideSizeOnScreen16x10', 'MsoAnimFilterEffectSubtype',
    'msoAnimFilterEffectSubtypeOutHorizontal', 'xlRadarAxisLabels',
    'msoAnimFilterEffectSubtypeSpokes8', 'rgbFloralWhite',
    'ppEffectShredRectangleOut', 'msoAnimShapeShadowType',
    'msoAnimTextBulletRelativeSize', 'ppAnimateByCharacter',
    'xlColumnField', 'MediaBookmark', 'XlRowCol', 'ppPlaceholderBody',
    'ppEffectPeelOffRight', 'ppPrintOutputNineSlideHandouts',
    'xlPatternGray8', 'Adjustments', 'ppDirectionMixed',
    'ppBulletCircleNumWDBlackPlain', 'rgbLightSalmon',
    'PropertyEffect', 'ThemeVariants', 'msoAnimShapeFillColor',
    'PpSlideShowState', 'ppShapeFormatEMF', 'ppSaveAsOpenXMLShow',
    'ShapeNode', 'msoAnimHeight', 'rgbLawnGreen', 'rgbPapayaWhip',
    'xlPatternLightVertical', 'xlLabelPositionInsideBase',
    'msoAnimFilterEffectSubtypeFromLeft', 'ppAdvanceOnClick',
    'xlTickLabelOrientationAutomatic', 'msoAnimEffectPath8PointStar',
    'msoAnimCommandTypeCall', 'xlPatternRectangularGradient',
    'msoAnimEffectPinwheel', 'ppPastePNG', 'ppBulletRomanLCPeriod',
    'ppEffectDrapeRight', 'ppEffectSwitchRight', 'ppShowTypeWindow2',
    'xlIndexDescending', 'ppEffectStretchLeft',
    'msoAnimEffectMediaStop', 'ppShowTypeKiosk', 'ppDateTimeUAQ2',
    'ppWindowNormal', 'msoAnimTextFontStrikeThrough', 'ppSaveAsEMF',
    'rgbBlanchedAlmond', 'xlErrorBarIncludeNone', 'rgbDarkOliveGreen',
    'XlChartPicturePlacement', 'xlGradientStopPositionTypePercent',
    '_Slide', 'ppEffectStretchRight', 'xlFill', 'msoAnimX',
    'ppBulletArabicAbjadDash', 'Corners', 'msoAnimEffectFly',
    'ppLayoutTitleOnly', 'xlInnerClockwisePoint', 'rgbHotPink',
    'ppEffectRotateLeft', 'TextRange', 'ppAutoSizeNone',
    'msoAnimShapePictureGamma', 'xlDataField', 'ppEffectWedge',
    'Comments', 'ppLayoutVerticalText', 'xlCategory', 'ppEffectCut',
    'xlXErrorBars', 'ppFarEastLineBreakLevelCustom', 'rgbSeaGreen',
    'msoAnimEffectAfterRemove', 'ppEffectRippleRightUp',
    'xlMarkerStyleSquare', 'ppEffectZoomCenter',
    'msoAnimDirectionOutBottom', 'ppPasteSVG',
    'XlGradientStopPositionType', 'xlMillionMillions',
    'msoAnimateDiagramCounterClockwiseOut',
    'ppFarEastLineBreakLevelStrict', 'ppCheckInOverwriteVersion',
    'xlNone', '_Application', 'rgbSpringGreen', 'xlPrinter',
    'ppWindowMinimized', 'DocumentWindows', 'ppEffectRandom',
    'ppShowAll', 'LineFormat', 'ppResampleMediaProfileSmall',
    'ppBulletArabicPeriod', 'PpUpdateOption', 'ChartCategory',
    'msoAnimEffectPathDiagonalUpRight', 'ppShowNamedSlideShow',
    'msoAnimFilterEffectTypePixelate',
    'ppFrameColorsBlackTextOnWhite', 'XlDataLabelsType',
    'msoAnimFilterEffectSubtypeDownLeft', 'xlConeToMax',
    'ppBulletArabicParenRight', 'ppBulletNone',
    'ppBulletThaiNumPeriod', 'xlBinsTypeBinSize', 'ppMouseOver',
    'rgbOliveDrab', 'ppBaselineAlignFarEast50', 'Table',
    'msoAnimEffectLighten', 'Slide', 'msoAnimEffectRandomBars',
    'ppBulletRomanUCPeriod', 'rgbSteelBlue',
    'msoAnimEffectPathTurnUp', 'msoAnimEffect3DJumpAndTurn',
    'ppRDIContentType', 'msoAnimDirectionRight',
    'ppCheckInMinorVersion', 'ResampleMediaTask', 'ppSelectionSlides',
    'ppActionRunProgram', 'ppPrintCurrent', 'RulerLevels',
    'xlStackScale', 'ppEffectBoxOut', 'ppBulletThaiAlphaParenRight',
    'ppEffectDoorsVertical', 'ppActionOLEVerb', 'PpTransitionSpeed',
    'xlDot', 'TabStop', 'ppSoundEffectsMixed',
    'ppSlideSizeLetterPaper', 'xlBinsTypeBinCount', 'xlPatternSolid',
    'ppPlaceholderSubtitle', 'xlMinimum', 'xlTrendline',
    'PpAfterEffect', 'Placeholders',
    'msoAnimEffectComplementaryColor2', 'xlDisplayUnitLabel',
    'xlOuterClockwisePoint', 'xlPivotChartFieldButton',
    'xlTickMarkNone', 'ppPlaying', 'ppCaseLower',
    'msoAnimEffectChangeFillColor', 'msoAnimEffectPathSpiralRight',
    'ppEffectNewsflash', 'ppEffectShredRectangleIn', 'Collection',
    'xlLabelPositionLeft', 'SldEvents', 'ppRevisionInfoBaseline',
    'ppPrintSection', 'msoAnimEffectPathSineWave',
    'msoAnimEffectGrowWithColor', 'xlLabelPositionOutsideEnd',
    'ppBaselineAlignBaseline', 'msoAnimShapeFillOn',
    'ppRevisionInfoNone', 'ppSlideSizeA3Paper', 'xlPatternGray16',
    'ppEffectCoverRight', 'xlShowValue', 'xlMidClockwiseRadiusPoint',
    'xlCorner', 'SeriesLines', 'rgbNavajoWhite',
    'ppAnimateChartMixed', 'xlBackgroundTransparent',
    'ppWindowMaximized', 'xlMillions', 'xlPatternLightUp',
    'ppShapeFormatGIF', 'xlCorners', 'ppActionMixed',
    'xlErrorBarTypeStError', 'XlBackground', 'xlLabelPositionCenter',
    'rgbDarkSlateGray', 'PpTextUnitEffect', 'MsoAnimEffect',
    'msoAnimEffectBoldReveal', 'xlPlotArea', 'ppPrintSelection',
    'ppEffectWarpOut', 'msoAnimEffectCheckerboard',
    'XlPieSliceLocation', 'ppEffectSplitHorizontalIn',
    'msoAnimEffectPathPeanut', 'ppEffectUncoverRightUp',
    'ppEffectGlitterHexagonLeft', 'xlMovingAvg',
    'msoAnimEffectDiamond', 'PpArrangeStyle',
    'msoClickStateBeforeAutomaticAnimations', 'Pane',
    'xlTickLabelOrientationHorizontal', 'ppEffectRotateRight',
    'msoAnimShapeShadowColor', 'XlCategoryType', 'ppAnimateLevelNone',
    'ppSoundFormatWAV', 'msoAnimateTextByAllLevels',
    'ppEffectRevealBlackRight', 'xlMajorGridlines',
    'DisplayUnitLabel', 'xlTenThousands', 'ppCheckInMajorVersion',
    'msoAnimEffectPathTurnRight', 'msoAnimFilterEffectTypeDissolve',
    'xlMarkerStyleDiamond', 'xlSplitByPercentValue', 'ErrorBars',
    'msoAnimEffectUnfold', 'xlColorIndexAutomatic',
    'ppLayoutVerticalTitleAndTextOverChart', 'SlideShowWindow',
    'PpPlayerState', 'Coauthoring', 'msoAnimEffectContrastingColor',
    'ppEffectMorphByWord', 'xlChecker', 'ppScaleXY', 'xlOutside',
    'ppPrintAll', 'Borders', 'xlInnerCenterPoint',
    'ppEffectCoverLeftDown', 'msoAnimShapeShadowOn',
    'msoAnimEffectRiseUp', 'rgbYellow', 'xlBuiltIn',
    'msoAnimTextFontUnderline', 'rgbMidnightBlue',
    'msoAnimEffectMediaPause', 'PpPlaceholderType',
    'xlDataLabelsShowPercent', 'xlCustom', 'ppEffectBoxLeft',
    'ppViewNotesMaster', 'xlCategoryLabelLevelNone', 'PpHTMLVersion',
    'msoAnimEffectTransparency', 'xlLegendKey', 'MediaFormat',
    'msoAnimEffectFloat', 'ppEffectCubeLeft', 'xlGray8',
    'ppEffectGlitterHexagonUp', 'msoAnimShapeFillBackColor',
    'ppSlideShowRunning', 'ppEffectFlashOnceMedium', 'PpViewType',
    'msoAnimEffectPathSpiralLeft',
    'msoAnimFilterEffectSubtypeSpokes4', 'ppBaselineAlignTop',
    'msoAnimDirectionClockwise', 'ppAutoSizeShapeToFitText',
    'rgbLightSeaGreen', 'ppCaseTitle', 'ppDateTimeHmmss',
    'msoAnimTriggerOnMediaBookmark', 'ppAnimateByWord',
    'rgbMintCream', 'PpNumberedBulletStyle',
    'msoAnimFilterEffectSubtypeFromBottom', 'msoAnimEffectStretch',
    'rgbLightSkyBlue', 'PpAutoSize', 'LinkFormat',
    'ppSaveAsPowerPoint4', 'ppRelativeToSlide', 'ppBorderRight',
    'xlTickMarkCross', 'ppPublishSlideRange', 'ppSaveAsPNG',
    'xlSplitByCustomSplit', 'ppEffectCutThroughBlack',
    'AnimationBehavior', 'ppHTMLv3', 'xlLegendPositionLeft',
    'TextStyleLevel', 'Broadcast', 'msoAnimDirectionTopLeft',
    'ppDateTimeFullYear', 'xlColumn', 'msoAnimTextFontSize',
    'ppEffectUncoverRightDown', 'rgbLightYellow',
    'XlPivotFieldOrientation', 'xlCross', 'xlLabelPositionInsideEnd',
    'xlLabelPositionBestFit', 'PpFixedFormatIntent', 'MotionEffect',
    'rgbPaleTurquoise', 'msoAnimAfterEffectNone', 'NamedSlideShow',
    'ppSelectionText', 'rgbTurquoise', 'msoAnimEffectChangeFontColor',
    'ppEffectStretchUp', 'ppAlignDistribute',
    'ppSaveAsOpenXMLShowMacroEnabled', 'msoAnimEffectGrowShrink',
    'rgbGreenYellow', 'ppForeground', 'xlWalls',
    'msoAnimEffectLightSpeed', 'ppAnimateBySeriesElements',
    'msoAnimShapeShadowOffsetY', 'ppDateTimeMMddyyhmmAMPM',
    'msoAnimFilterEffectSubtypeDown', 'xlFront', 'ppEffectCubeDown',
    'ppSaveAsAnimatedGIF', 'msoAnimEffectFade', 'ppAccent3',
    'xlDataLabelsShowValue', 'ppUpdateOptionManual',
    'ppEffectStripsRightUp', 'xlMarkerStylePlus', 'ppFileDialogOpen',
    'SetEffect', 'ppSlideShowManualAdvance', 'EffectParameters',
    'xlHiLoLines', 'xlSquare', 'ppBulletStyleMixed',
    'xlUnderlineStyleSingle', 'msoAnimTextFontSubscript',
    'ppSaveAsGIF', 'ProtectedViewWindow', 'ppViewSlideMaster',
    'ppShowSlideRange', 'PpSoundFormatType', 'SlideShowTransition',
    'ppPasteRTF', 'ppArrangeTiled', 'ppEffectCrawlFromDown',
    'msoAnimDirectionSlightly', 'ppLayoutText',
    'msoAnimEffectPathBounceRight', 'ppPrintColor', 'rgbMoccasin',
    'ActionSetting', 'ppShowTypeSpeaker', 'rgbGainsboro',
    'PpWindowState', 'ppLayoutOrgchart', '_PowerRex',
    'ppSlideSizeB5JISPaper', 'ppPasteOLEObject',
    'ppEffectGlitterDiamondDown', 'XlChartGallery',
    'PpProtectedViewCloseReason', 'xlMarkerStyleDot', 'rgbLime',
    'ppScaleToFit', 'msoAnimEffectFlashOnce', 'xlVAlignJustify',
    'xlThousands', 'ppAnimateByFourthLevel', 'ppSoundFile',
    'ppBulletAlphaLCPeriod', 'msoAnimEffectAfterTransition',
    'rgbAntiqueWhite', 'xlChartX', 'ppTabStopDecimal',
    'ppBorderBottom', 'xlUserDefined', 'ppDateTimedMMMyy',
    'msoAnimCommandTypeEvent', 'ppPlaceholderBitmap', 'rgbPlum',
    'rgbTan', 'ppEffectFlyFromBottomRight', 'ppEffectPeelOffLeft',
    'msoAnimTypeFilter', 'ppEffectUncoverLeftUp', 'PrintRange',
    'ppEffectPeekFromUp', 'msoAnimTextUnitEffectMixed',
    'PpDateTimeFormat', 'ppSlideShowRehearseNewTimings',
    'rgbMediumOrchid', 'PpPrintColorType', 'msoAnimEffectBoldFlash',
    'ppBulletSimpChinPlain', 'rgbBrown', 'ppEffectCombHorizontal',
    'XlErrorBarInclude', 'ppEffectPushUp', 'msoAnimEffectFlicker',
    'msoAnimEffectPathEqualTriangle', 'ppSlideSizeBanner',
    'xlSeriesNameLevelCustom', 'XlPattern', 'PpSlideShowPointerType',
    'View', 'xlGeoMappingLevelPostalCode',
    'ppPlaceholderVerticalBody', 'ppSlideShowPointerPen',
    'xlErrorBarIncludeMinusValues', 'msoAnimEffectWhip',
    'msoAnimAccumulateNone', 'ppTabStopLeft',
    'ppFrameColorsPresentationSchemeAccentColor',
    'ppPlaceholderPicture', 'ppResampleMediaProfileSmaller',
    'ppBulletHebrewAlphaDash', 'msoAnimEffectZip',
    'ppBulletAlphaUCParenBoth', 'ppEffectCubeUp', 'ppEffectPanRight',
    'ParagraphFormat', 'xlSizeIsArea', 'ppBulletArabicAlphaDash',
    'xlTickLabelOrientationDownward', 'XlReadingOrder', 'Fonts',
    'Trendlines', 'msoAnimDirectionFontShadow', 'xlLeft',
    'ppLayoutClipartAndText', 'ppSaveAsOpenXMLPresentation',
    'xlHAlignDistributed', 'ppEffectVortexRight', 'ChartTitle',
    '_Global', 'ppEffectOrbitUp', 'msoAnimShapePictureBrightness',
    'ppEffectSwivel', 'ppAnimateBySecondLevel', 'rgbDarkCyan',
    'msoAnimEffectGlide', 'OLEControl', 'xlVAlignBottom',
    'XlConstants', 'ppBulletHindiNumPeriod', 'xlSingle',
    'ppMediaTypeOther', 'Cell', 'msoAnimEffectPath4PointStar',
    'ppEffectWarpIn', 'xlGeoProjectionTypeAutomatic',
    'XlDisplayBlanksAs', 'PpBulletType', 'msoAnimDirectionBottomLeft',
    'xlPatternVertical', 'ppSaveAsOpenXMLPicturePresentation',
    'ppEffectRippleLeftDown', 'msoAnimateChartAllAtOnce',
    'xlHAlignRight', 'msoAnimEffectSwivel', 'Chart', 'xlGeneral',
    'ppSaveAsOpenXMLTemplateMacroEnabled', 'Design', 'ppSaveAsMP4',
    'Panes', 'ppAlignJustify', 'ppPasteBitmap', 'ppDefaultStyle',
    'xlVertical', 'msoAnimEffectPathCircle', 'ppAlignThaiDistribute',
    'ppLayoutTextAndChart', 'xlSeriesColorGradientStyleSequential',
    'msoAnimEffectRestartWhenOff', 'ppEffectCurtains',
    'msoAnimVisibility', 'ppSaveAsPowerPoint4FarEast', 'PlaySettings',
    'rgbAzure', 'ppNotSchemeColor', 'PpColorSchemeIndex',
    'MsoAnimTriggerType', 'msoAnimEffectPathFigure8Four',
    'msoAnimDirectionCounterclockwise', 'xlBackgroundOpaque',
    'msoAnimTextBulletNumber', 'ppSaveAsMetaFile', 'Columns',
    'OCXExtender', 'ppEffectCrawlFromRight', 'xlLabelPositionRight',
    'xlPatternNone', 'rgbChartreuse', 'ppPrintOutputBuildSlides',
    'msoAnimEffectSplit', 'RGBColor', 'msoAnimEffectRestartNever',
    'MsoAnimFilterEffectType', 'ppLayoutTextOverObject',
    'ppPlaceholderChart', 'xlSeriesLines', 'xlChartArea',
    'msoAnimEffectPathTrapezoid', 'msoAnimEffectPathNeutron',
    'ppLayoutObject', 'msoAnimEffectWave', 'msoAnimateLevelNone',
    'rgbBurlyWood', 'ppSlideShowPointerAlwaysHidden',
    'msoAnimEffectPathCurvedSquare', 'msoAnimTriggerAfterPrevious',
    'ppTransitionSpeedMixed', 'ppAccent1', 'Guides',
    'AnimationSettings', 'msoAnimDirectionHorizontal',
    'msoAnimEffectStretchy', 'xlDashDotDot', 'rgbOrange',
    'msoAnimEffectCenterRevolve', 'rgbFireBrick', 'ppPasteJPG',
    'xlTop', 'ppEffectFlashOnceSlow', 'XlChartSplitType',
    'CustomerData', 'ppAnimateByThirdLevel', 'ppSlideSizeCustom',
    'msoAnimEffectPathArcLeft', 'ppFixedFormatIntentScreen',
    'FreeformBuilder', 'ppSlideSizeA4Paper',
    'msoAnimFilterEffectSubtypeOut', 'ppDateTimeUAQ6',
    'ppEffectPanLeft', 'rgbSkyBlue', 'ppLayoutObjectAndText',
    'msoAnimEffectAppear', 'xlTriangle',
    'ppSaveAsOpenDocumentPresentation', 'rgbDarkTurquoise',
    'xlMarkerStyleDash', 'Gridlines', 'ppMediaTaskStatusQueued',
    'ppEffectMorphByObject', 'ppEffectFlipUp', 'XlBorderWeight',
    'xlBottom', 'xl3DBar', 'ppDirectionRightToLeft',
    'ppEffectRevealSmoothRight', 'rgbAqua',
    'xlChartElementPositionCustom', 'TimeLine', 'xlMarkerStyleCircle',
    'LegendEntry', 'msoAnimateLevelMixed', 'xlBitmap',
    'xlLegendPositionCustom', 'xlStack', 'rgbDimGray',
    'MsoAnimEffectAfter', 'xlRows', 'ppBodyStyle',
    'ppEffectBlindsHorizontal', 'TextEffectFormat',
    'rgbMediumVioletRed', 'msoAnimEffectPathTurnDown',
    'XlEndStyleCap', 'msoAnimFilterEffectSubtypeHorizontal',
    'ppPlaceholderSlideNumber', 'rgbSlateGrey', 'rgbThistle',
    'Effect', 'typelib_path', 'ppFollowColorsScheme',
    'ppSaveAsPresForReview', 'rgbGreen', 'PpChartUnitEffect',
    'msoAnimFilterEffectTypeFade', 'xlCrissCross',
    'xlHAlignCenterAcrossSelection', 'MsoAnimAdditive',
    'ppBulletUnnumbered', 'xlLightHorizontal',
    'xlGradientStopPositionTypeExtremeValue',
    'msoAnimDirectionBottomRight', 'xlStError', 'ppAccent2',
    'ppNotReady', 'msoAnimNone', 'ppAlignJustifyLow',
    'msoAnimTriggerMixed', 'rgbIvory', 'ppDirectionLeftToRight',
    'ppPlaceholderOrgChart', 'msoAnimTextFontColor', 'PpFollowColors',
    'AxisTitle', 'ppRDIRemovePersonalInformation', 'PpSelectionType',
    'DropLines', 'DiagramNodes', 'rgbMediumBlue', 'ppSoundFormatMIDI',
    'xlSlantDashDot', 'ppEffectRippleLeftUp', 'ppEffectFlashbulb',
    'ppLayoutVerticalTitleAndText', 'ppEffectPageCurlDoubleLeft',
    'xlMinusValues', 'xlHidden', 'ppSoundStopPrevious',
    'PublishObject', 'ppEffectSwitchLeft', 'msoAnimEffectSpinner',
    'rgbOldLace', 'ppAfterEffectHideOnClick', 'ppAfterEffectMixed',
    'ppLayoutTwoObjectsOverText', 'msoAnimEffectPathFootball',
    'msoAnimEffectPathArcUp', 'ppAnimateByFifthLevel',
    'XlDataLabelPosition', 'rgbLightSlateGray',
    'ppTransitionSpeedSlow', 'rgbSandyBrown', 'PpFrameColors',
    'ppEffectGlitterDiamondRight', 'xlDataLabelsShowLabel',
    'ppEffectPushLeft', 'rgbDarkSlateGrey', 'ppPasteDefault',
    'rgbLightSteelBlue', 'ppLayoutMediaClipAndText', 'XlTickMark',
    'ppEffectOrbitDown', 'msoAnimEffectPathHorizontalFigure8',
    'msoAnimDirectionHorizontalIn', 'SlideShowView',
    'msoAnimEffectChangeFontStyle', 'ppEffectRevealBlackLeft',
    'xl3DSurface', 'Shape', 'rgbDarkOrchid', 'AnimationPoint',
    'ppEffectUncoverRight', 'PpSlideLayout', 'xlAxis', 'EApplication',
    'xlVerticalCoordinate', 'ppResampleMediaProfileSmallest',
    'msoAnimateDiagramDepthByBranch',
    'xlRegionLabelOptionsBestFitOnly', 'rgbRoyalBlue',
    'NamedSlideShows', 'rgbCornsilk', 'TextStyleLevels', 'xlContext',
    'msoAnimEffectPathVerticalFigure8', 'ppSaveAsPowerPoint7',
    'msoAnimTextBulletType', 'msoAnimEffectPathArcDown',
    'PpIndentControl', 'UpBars', 'xlIndexAscending',
    'msoAnimDirectionLeft', 'ppDateTimeMMddyyHmm',
    'msoAnimEffectGrowAndTurn', 'XlVAlign', 'ppEffectStripsDownRight',
    'XlMarkerStyle', 'ppSlideShowUseSlideTimings', 'Library',
    'msoAnimateDiagramInByRing', 'xlOuterCenterPoint', 'xlAnyGallery',
    'PpTextLevelEffect', 'ppRevisionInfoMerged', 'msoAnimTypeSet',
    'ppShowTypeWindow', 'ppBulletMixed',
    'msoAnimDirectionFontStrikethrough', 'ppEffectSplitHorizontalOut',
    'ppEffectConveyorRight', 'SoundFormat', 'xlPercent',
    'ppBulletCircleNumWDWhitePlain', 'xlLogarithmic',
    'msoAnimFilterEffectSubtypeOutVertical',
    'msoAnimFilterEffectSubtypeUpLeft', 'xlRowField', 'Legend',
    'msoAnimAdditiveAddBase', 'ppLayoutLargeObject', 'rgbSnow',
    'rgbSilver', 'ChartCharacters', 'ppRDIDocumentServerProperties',
    'ChartArea', 'PpFileDialogType', 'xlDashDot', 'xlPolynomial',
    'ppArrangeCascade', 'ppEffectRotateDown',
    'msoAnimFilterEffectSubtypeUp', 'ppSoundFormatNone', 'xlDash',
    'msoAnimAdditiveAddSum', 'ppShapeFormatWMF', 'ppLayoutMixed',
    'xlSeriesNameLevelAll', 'xlLTR', 'ppEffectWheel8Spokes',
    'ppPlaceholderObject', 'msoAnimEffectPathCurvedX', 'rgbDarkGray',
    'ppProtectedViewCloseEdit', 'ppFrameColorsWhiteTextOnBlack',
    'xlLow', 'msoAnimEffectPathHeart', 'MsoAnimCommandType',
    'Presentations', 'xlGradientStopPositionTypeNumber',
    'ppEffectFlyFromTop', 'ppTabStopRight', 'xlCylinder',
    'MsoAnimType', 'xlSemiGray75', 'ppRDIComments', 'rgbRosyBrown',
    'PpEntryEffect', 'ppEffectPanDown', 'msoAnimEffectBrushOnColor',
    'msoAnimTypeNone', 'XlCategoryLabelLevel',
    'xlMarkerStyleAutomatic', 'Research', 'msoAnimShapeShadowOpacity',
    'ppEffectAirplaneLeft', 'Floor', 'msoAnimColor',
    'ppSlideSizeOnScreen', 'ppPrintOutputNotesPages',
    'msoAnimFilterEffectSubtypeDownRight', 'ppEffectStretchDown',
    'ppBorderDiagonalUp', 'ppEffectAppear', 'ppPlaceholderMixed',
    'ppEffectUncoverDown', 'ppPlaceholderCameo',
    'msoAnimFilterEffectTypeCircle', 'rgbAquamarine',
    'PpPasteDataType', 'ppPublishNamedSlideShow', 'msoAnimTypeMotion',
    'msoAnimFilterEffectTypeBlinds', 'ppBorderDiagonalDown',
    'msoAnimDirectionFontUnderline', 'ppProtectedViewCloseNormal',
    'PowerRex', 'XlCategorySortOrder', 'xlShowLabel',
    'msoAnimEffectWipe', 'ppFixedFormatIntentPrint', 'xlFloor',
    'ppPrintOutputTwoSlideHandouts', 'ppBaselineAlignCenter',
    'ppEffectFlyFromBottom', 'AddIn', 'xlCategoryDescending',
    'msoAnimFilterEffectSubtypeAcross', 'Point',
    'xlErrorBarTypeStDev', 'msoAnimEffectSpin',
    'ppSaveAsOpenXMLAddin', 'ppPasteShape', 'ppTabStopMixed',
    'msoAnimEffectPathDiagonalDownRight', 'xlScale', 'ppPasteText',
    'xlSizeIsWidth', 'msoAnimTextFontBold', 'ppSlideSizeB4JISPaper',
    'xlLineStyleNone', 'msoAnimEffectPathCurvyRight', 'rgbRed',
    'ppLayoutTable', 'msoAnimEffectThinLine', 'TableBackground',
    'rgbPeru', 'rgbDarkOrange', 'ppDateTimeFigureOut',
    'rgbDeepSkyBlue', 'MasterEvents', 'rgbWheat', 'ppEffectFade',
    'ppEffectSwitchDown', 'ppMediaTypeMovie', 'ppEffectShredStripsIn',
    'rgbMediumSlateBlue', 'msoAnimFilterEffectSubtypeFromRight',
    'msoAnimRotation', 'PpMouseActivation', 'ppShapeFormatJPG',
    'PpBorderType', 'xlVAlignCenter', 'xlHorizontal',
    'ppEffectStripsRightDown', 'rgbBlueViolet', 'rgbDarkSlateBlue',
    'ColorSchemes', 'xlDataLabelsShowNone', 'xlErrorBarIncludeBoth',
    'rgbWhiteSmoke', 'msoAnimDirectionInBottom', 'rgbBeige',
    'ppBaselineAlignAuto', 'ppEffectStripsUpRight', 'ShapeNodes',
    'msoAnimCommandTypeVerb', 'rgbLemonChiffon', 'HeaderFooter',
    'ppBulletThaiNumParenBoth', 'ppLayoutFourObjects', 'ppBorderTop',
    'msoAnimAfterEffectDim', 'ppLayoutTextAndTwoObjects',
    'ppPrintOutputSixSlideHandouts', 'ppMediaTypeSound',
    'msoAnimEffectAscend', 'Slides', 'ppLayoutTwoObjectsAndObject',
    'msoAnimDirectionInCenter', 'msoAnimEffectAfterFreeze',
    'ppRDIInkAnnotations', 'XlBinsType', 'Axes',
    'ppSaveAsStrictOpenXMLPresentation', 'ChartColorFormat',
    'ppEffectOrigamiLeft', 'xlValueNone', 'PpBaselineAlignment',
    'rgbMaroon', 'ppAlignmentMixed', 'Master', 'xlBar',
    'ppLayoutTextAndClipart', 'ppAnimateLevelMixed',
    'xlPatternGray25', 'ppAlignRight', 'xlUpward',
    'ppDateTimedMMMMyyyy', 'ppBulletTradChinPeriod', 'xlPlus',
    'msoAnimTypeMixed', 'xlUnderlineStyleNone',
    'xlParentDataLabelOptionsBanner', 'ppAfterEffectHide',
    'msoAnimEffectChangeFont', 'rgbDarkSeaGreen',
    'ppEffectConveyorLeft', 'msoAnimDirectionUp',
    'msoAnimFilterEffectTypeDiamond', 'ppEffectSpiral', 'Comment',
    'ppEffectShredStripsOut', 'msoAnimateDiagramBreadthByLevel',
    'xlDataLabelsShowBubbleSizes', 'ppEffectFadeSmoothly',
    'xlErrorBarTypePercent', 'ppEffectCoverRightUp',
    'xlMidCounterClockwiseRadiusPoint', 'ppAlertsAll',
    'ppEffectWheelReverse1Spoke', 'ppEffectFlipDown',
    'ConnectorFormat', 'DiagramNodeChildren', 'xlExponential',
    'XlRgbColor', 'msoAnimFilterEffectTypeWipe', 'ChartData',
    'ppFixedFormatTypeXPS', 'msoAnimEffectPathPointyStar',
    'xlAutomaticScale', 'msoAnimFilterEffectSubtypeIn',
    'ppViewHandoutMaster', 'msoAnimDirectionInstant', 'rgbSlateBlue',
    'msoAnimEffectPathCurvyLeft', 'ppEffectGlitterHexagonRight',
    'msoAnimFilterEffectSubtypeSpokes3', 'ppDateTimeHmm',
    'ppIndentKeepAttr', 'Designs', 'ppStopped', 'ppDateTimeUAQ4',
    'ppEffectRevealSmoothLeft', 'XlSeriesNameLevel', 'xlGray50',
    'ppBulletAlphaUCPeriod', 'ColorScheme',
    'msoAnimShapeShadowOffsetX', '_Presentation',
    'msoAnimateDiagramDown', 'rgbForestGreen', 'ppSoundFormatCDAudio',
    'xlErrorBarTypeCustom', 'rgbMediumTurquoise', 'ppEffectDissolve',
    'ppSaveAsJPG', 'msoAnimateTextByFourthLevel',
    'PpFarEastLineBreakLevel', 'MsoAnimEffectRestart', 'xlJustify',
    'ScaleEffect', 'ppAnimateByCategoryElements',
    'xlLabelPositionBelow', 'msoAnimEffectColorBlend', 'PpMediaType',
    'msoAnimTriggerOnShapeClick', 'xlChartY', 'xlCenterPoint',
    'msoAnimEffectRestartAlways', 'msoAnimateDiagramBreadthByNode',
    'rgbLightSlateGrey', 'ppSaveAsWMV', 'ppViewOutline',
    'ppFrameColorsBrowserColors', 'ppEffectFallOverLeft', 'rgbIndigo',
    'XlTickLabelPosition', 'ppAnimateByParagraph',
    'xlGeoMappingLevelCountryRegionList', 'HeadersFooters',
    'PlaceholderFormat', 'OCXExtenderEvents', 'xlPatternAutomatic',
    'xlDataLabelSeparatorDefault', 'msoAnimTextFontEmboss',
    'xlPageField', 'xlDistributed', 'ppFollowColorsMixed',
    'ppEffectSplitVerticalOut', 'msoAnimEffectPathRightTriangle',
    'rgbOlive', 'ppPrintOutputOutline', 'xlContinuous', 'xlColumns',
    'xlShowPercent', 'ppBackground', 'ppEffectZoomOutSlightly',
    'xlMaximum', 'PictureFormat', 'ppLayoutClipArtAndVerticalText',
    'XlUnderlineStyle', 'PpDirection', 'PpSlideSizeType',
    'AnimationPoints', 'ppEffectRandomBarsHorizontal',
    'PpCheckInVersionType', 'xlSeriesNameLevelNone', 'ppEffectZoomIn',
    'rgbPaleGreen', 'xlMedium', 'msoAnimEffectColorWave',
    'ppDateTimeFormatMixed', 'msoAnimEffectPathTurnUpRight',
    'rgbLightGreen', 'PpAdvanceMode', 'PpActionType',
    'ppActionLastSlideViewed', 'xlMarkerStyleNone',
    'msoAnimEffectPeek', 'xlEnd', 'xlRegionLabelOptionsNone',
    'msoAnimEffectPathSCurve2', 'AddIns', 'ppViewSlideSorter',
    'ppSlideShowPointerArrow', 'xlEndSides', 'xlDownward', 'xlHigh',
    'DefaultWebOptions', 'msoAnimFilterEffectTypeStretch',
    'ppSaveAsExternalConverter', 'xlBoth', 'ppEffectMorphByChar',
    'msoAnimFilterEffectTypeWheel', 'XlScaleType',
    'ppEffectDiamondOut', 'msoAnimShapeLineOn',
    'ppSaveAsOpenXMLTheme', 'ppEffectWindLeft', 'ppSlideShowPaused',
    'PublishObjects', 'ppSaveAsWebArchive', 'msoAnimDirectionDown',
    'FilterEffect', 'CanvasShapes', 'PresEvents', 'ppLayoutCustom',
    'Shapes', 'msoAnimTriggerOnPageClick', 'MediaBookmarks',
    'msoAnimEffectPathArcRight', 'SlideShowWindows',
    'ppRDIPublishPath', 'xlGeoMappingLevelCounty',
    'ppBulletThaiNumParenRight', 'Hyperlink', 'xlTenMillions',
    'xlScaleLogarithmic', 'rgbSienna', 'msoAnimateDiagramDepthByNode',
    'ppBulletCircleNumDBPlain', 'xlFrontEnd', 'XlRegionLabelOptions',
    'ppBorderLeft', 'xlUpBars', 'msoAnimEffectSwish', 'Diagram',
    'ppPlaceholderHeader', 'ppRDIDocumentProperties',
    'msoAnimFilterEffectSubtypeInVertical', 'Rows', 'rgbFuchsia',
    'xlUnderlineStyleSingleAccounting', 'msoAnimEffect3DSwing',
    'xlBox', 'xlPicture', 'PpTextStyleType', 'rgbDarkGoldenrod',
    'ppSoundFormatMixed', 'ppSlideSizeOnScreen16x9',
    'ppEffectCoverUp', 'ppEffectGlitterDiamondLeft',
    'ppLayoutComparison', 'XlParentDataLabelOptions',
    'msoAnimEffectBox', 'msoAnimateDiagramAllAtOnce', 'rgbTeal',
    'xlTickLabelPositionHigh', 'msoAnimEffectTeeter', 'rgbDodgerBlue',
    'msoAnimAccumulateAlways', 'msoAnimDirectionCycleClockwise',
    'msoAnimEffectPathCurvyStar', 'xlNothing', 'xlGrid',
    'msoAnimEffectRandomEffects', 'msoAnimTextFontName',
    'msoAnimEffectWedge', 'msoAnimateChartByCategory', 'ppRDIAll',
    'ppAnimateByCategory', 'xlThick', 'ppBulletRomanUCParenRight',
    'PpFixedFormatType', 'ppEffectBoxRight', 'Points',
    'PpPublishSourceType', 'ppEffectStripsLeftDown',
    'msoAnimEffectPlus', 'xlPatternUp', 'msoAnimEffectFlip',
    'rgbViolet', 'ppEffectFerrisWheelRight',
    'ppPrintOutputOneSlideHandouts', 'ppPaused', 'rgbSlateGray',
    'xlLegendPositionTop', 'Tags', 'xlInterpolated',
    'xlErrorBarIncludePlusValues', 'msoAnimEffectPathDown',
    'ppEffectGalleryLeft', 'ppEffectOrbitRight', 'ppViewNormal',
    'ppPlaceholderDate', 'msoAnimDirectionOutCenter', 'TableStyle',
    'xlAxisCrossesCustom', 'LegendEntries', 'msoAnimEffectStrips',
    'ActionSettings', 'ChartFillFormat', 'ppEffectOrbitLeft',
    'msoAnimShapeLineColor', 'ppActionNone', 'xlAxisCrossesMinimum',
    'ppActionNextSlide', 'XlTrendlineType', 'msoAnimTypeColor',
    'ThreeDFormat', 'xlCategoryLabelLevelAll', 'Sequence',
    'xlHAlignCenter', 'xlAbove', 'xlDays', 'PpGuideOrientation',
    'msoAnimEffectZoom', 'msoAnimEffectPathSwoosh',
    'ppEffectFlyFromLeft', 'xlUnderlineStyleDoubleAccounting',
    'xlBinsTypeCategorical', 'ppAnimateByFirstLevel',
    'msoAnimFilterEffectSubtypeLeft',
    'msoAnimEffectPathInvertedSquare', 'ppEffectPeekFromDown',
    'rgbLightCoral', 'rgbAliceBlue', 'XlCopyPictureFormat',
    'ppRDIDocumentWorkspace', 'XlPictureAppearance', 'msoAnimY',
    'XlErrorBarDirection', 'ppActionNamedSlideShow',
    'xlBinsTypeAutomatic', 'xlErrorBarTypeFixedValue',
    'msoAnimTypeProperty', 'msoAnimEffectPathPentagon',
    'XlColorIndex', 'ppEffectStripsDownLeft',
    'xlGeoProjectionTypeMercator', 'msoAnimEffectCredits', 'rgbPink',
    'ppLayoutTwoObjects', 'rgbNavyBlue', 'ppEffectVortexUp',
    'ppSelectionShapes', 'PpAlertLevel', 'ppFixedFormatTypePDF',
    'ppLayoutPictureWithCaption', 'msoAnimTypeRotation', 'xlAllFaces',
    'ChartFormat', 'ppSlideSizeOverhead',
    'xlTickLabelOrientationUpward', 'ppEffectGlitterDiamondUp',
    'ppBulletArabicParenBoth', 'ShapeRange', 'msoAnimEffectPathLeft',
    'xlHorizontalCoordinate', 'MouseTracker',
    'msoAnimateChartByCategoryElements', 'ppAlertsNone',
    'msoAnimateDiagramClockwise', 'ppPrintOutputSlides',
    'rgbGhostWhite', 'msoAnimDirectionNone', 'ppShapeFormatSVG',
    'ppBulletRomanUCParenBoth', '_Master', 'rgbDarkSalmon',
    'ppEffectWheel4Spokes', 'msoAnimFilterEffectTypeBox',
    'msoAnimFilterEffectTypePlus', 'msoAnimDirectionUpRight',
    'msoAnimShapePictureContrast', 'xlNotPlotted',
    'xlChartElementPositionAutomatic', 'xlCategoryAscending',
    'xlLabelPositionMixed', 'Series', 'ppSaveAsDefault',
    'msoAnimEffectStyleEmphasis', 'msoAnimEffectPathBounceLeft',
    'PpPrintHandoutOrder', 'XlAxisCrosses', 'ppCaseToggle',
    'msoAnimDirectionUpLeft', 'ppAnimateBySeries', 'Axis',
    'xlNextToAxis', 'msoAnimTextBulletFontName',
    'PpResampleMediaProfile', 'FillFormat', 'TextStyles',
    'msoAnimFilterEffectSubtypeSpokes1', 'ppMediaTypeMixed',
    'rgbOrchid', 'ResampleMediaTasks', 'msoAnimateDiagramClockwiseIn',
    'xlVAlignDistributed', 'xlCategoryScale',
    'xlGeoProjectionTypeRobinson', 'rgbCornflowerBlue',
    'ppShapeFormatPNG', 'SlideRange', 'ppBulletArabicDBPlain',
    'xlSeriesColorGradientStyleDiverging', 'SlideShowSettings',
    'msoAnimEffectPathDecayingWave', 'xlHAlignFill',
    'XlSeriesColorGradientStyle', 'XlOrientation',
    'xlDefaultAutoFormat', 'xlPatternGray50',
    'msoAnimEffectPathParallelogram', 'msoAnimDirectionDownLeft',
    'msoAnimTextFontItalic', 'ppEffectPeekFromRight',
    'ppIndentControlMixed', 'ppFollowColorsTextAndBackground',
    'msoAnimEffectMediaPlay', 'msoAnimEffectPathBuzzsaw',
    'ExtraColors', 'xlHAlignJustify', 'msoAnimateChartBySeries',
    'rgbDeepPink', 'xlPrimary', 'msoAnimEffectBounce',
    'msoAnimEffectPathOctagon', 'ppBulletRomanLCParenRight',
    'rgbYellowGreen', 'CellRange', 'xlLightDown',
    'ppBulletKanjiKoreanPlain', 'xlTransparent', 'xlScaleLinear',
    'msoAnimateDiagramUp', 'xlYears', 'msoAnimEffectBoomerang',
    'xlYErrorBars', 'XlPieSliceIndex', 'ppSaveAsPresentation',
    'rgbLimeGreen', 'xlGeoProjectionTypeAlbers',
    'msoAnimFilterEffectSubtypeInHorizontal', 'XlLineStyle', 'Column',
    'ppLayoutContentWithCaption', 'ppEffectOrigamiRight',
    'MsoAnimAfterEffect', 'ppEffectFlipLeft', 'XlAxisGroup',
    'xlSplitByValue', 'ppTitleStyle', 'ppPrintNamedSlideShow',
    'rgbLavenderBlush', 'msoAnimEffectFlashBulb', 'ppEffectFracture',
    'xlVAlignTop', 'xlDiamond', 'msoAnimDirectionHorizontalOut',
    'rgbDimGrey', 'ppEffectWindowVertical',
    'ppBulletHindiNumParenRight', 'msoAnimFilterEffectTypeStrips',
    'rgbLightBlue', 'Presentation', 'ppSlideShowPointerAutoArrow',
    'msoAnimDirectionInSlightly', 'ppSlideShowPointerNone',
    'ppClipRelativeToSlide', 'msoAnimDirectionFontAllCaps',
    'ppFileDialogSave', 'MsoAnimTextUnitEffect',
    'ppEffectGlitterHexagonDown', 'MsoAnimDirection', 'ppTitle',
    'xlSeries', 'msoAnimEffectCircle', 'PpMediaTaskStatus'
]

_check_version('1.4.9', 1725414080.437215)

